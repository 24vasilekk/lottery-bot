const { Client } = require('pg');

async function testProblematicQueries() {
    const client = new Client({
        connectionString: 'postgresql://postgres:xoIMWOtNInnWGHXnxiYCEBVmpUBcisbo@gondola.proxy.rlwy.net:59145/railway',
        ssl: {
            rejectUnauthorized: false
        }
    });

    try {
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

        // –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–∑–æ–≤ (–∫–æ—Ç–æ—Ä—ã–π –¥–∞–≤–∞–ª –æ—à–∏–±–∫—É 500)
        console.log('üéÅ –¢–µ—Å—Ç 1: API –ø—Ä–∏–∑–æ–≤');
        try {
            const prizesQuery = `
                SELECT p.id, p.user_id, p.type, p.description, p.is_given, p.created_at, p.given_at,
                       u.first_name as user_first_name,
                       u.last_name as user_last_name,
                       u.username as user_username
                FROM prizes p
                LEFT JOIN users u ON p.user_id = u.id
                ORDER BY p.created_at DESC 
                LIMIT 10
            `;
            const prizesResult = await client.query(prizesQuery);
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${prizesResult.rows.length} –ø—Ä–∏–∑–æ–≤`);
            console.table(prizesResult.rows.slice(0, 3));
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏–∑–æ–≤:', err.message);
        }

        // –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('\nüë• –¢–µ—Å—Ç 2: API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        try {
            const usersQuery = `
                SELECT u.id, u.telegram_id, u.first_name, u.username, u.stars, u.join_date, u.last_activity,
                       COUNT(DISTINCT p2.id) as total_spins,
                       COUNT(DISTINCT ucs.channel_id) as subscriptions_count,
                       COUNT(DISTINCT p.id) as prizes_won
                FROM users u
                LEFT JOIN prizes p2 ON u.id = p2.user_id
                LEFT JOIN user_channel_subscriptions ucs ON u.id = ucs.user_id
                LEFT JOIN prizes p ON u.id = p.user_id AND p.is_given = true
                GROUP BY u.id, u.telegram_id
                ORDER BY u.id DESC
                LIMIT 5
            `;
            const usersResult = await client.query(usersQuery);
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${usersResult.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            console.table(usersResult.rows);
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err.message);
        }

        // –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('\nüë§ –¢–µ—Å—Ç 3: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        try {
            const userId = 6671460008; // Telegram ID –∏–∑ –ª–æ–≥–æ–≤
            const userDetailQuery = `
                SELECT u.*, 
                       COUNT(DISTINCT p2.id) as total_spins,
                       COUNT(DISTINCT ucs.channel_id) as subscriptions_count,
                       COUNT(DISTINCT p.id) as prizes_won,
                       COALESCE(SUM(CASE WHEN p2.created_at > CURRENT_DATE THEN 1 ELSE 0 END), 0) as spins_today
                FROM users u
                LEFT JOIN prizes p2 ON u.id = p2.user_id
                LEFT JOIN user_channel_subscriptions ucs ON u.id = ucs.user_id
                LEFT JOIN prizes p ON u.id = p.user_id AND p.is_given = true
                WHERE u.telegram_id = $1
                GROUP BY u.id, u.telegram_id
            `;
            const userResult = await client.query(userDetailQuery, [userId]);
            
            if (userResult.rows.length > 0) {
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞–π–¥–µ–Ω`);
                console.table(userResult.rows);
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const userPrizesQuery = `
                    SELECT id, type as prize_type, description as prize_name, created_at
                    FROM prizes 
                    WHERE user_id = $1 
                    ORDER BY created_at DESC 
                    LIMIT 10
                `;
                const userPrizesResult = await client.query(userPrizesQuery, [userResult.rows[0].id]);
                console.log(`üéÅ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userPrizesResult.rows.length} –ø—Ä–∏–∑–æ–≤`);
                console.table(userPrizesResult.rows);
            } else {
                console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err.message);
        }

        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        console.log('\nüìä –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
        try {
            // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            const todayUsers = await client.query("SELECT COUNT(*) as count FROM users WHERE join_date > CURRENT_DATE");
            console.log(`üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: ${todayUsers.rows[0].count}`);
            
            // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
            const activity = await client.query(`
                SELECT 
                    DATE(join_date) as date,
                    COUNT(*) as users
                FROM users 
                WHERE join_date >= CURRENT_DATE - INTERVAL '7 days'
                GROUP BY DATE(join_date)
                ORDER BY date
            `);
            console.log(`üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π: ${activity.rows.length} –¥–Ω–µ–π`);
            console.table(activity.rows);
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err.message);
        }

    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
        await client.end();
    }
}

testProblematicQueries();