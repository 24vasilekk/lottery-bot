// navigation.js - –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏

class Navigation {
    constructor() {
        this.currentScreen = 'main-screen';
        this.navItems = document.querySelectorAll('.nav-item');
        this.screens = document.querySelectorAll('.screen');
        this.init();
    }

    init() {
        console.log('üß≠ Navigation –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        this.navItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const targetScreen = item.getAttribute('data-screen');
                this.navigateToScreen(targetScreen);
            });
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        this.updateActiveScreen();
    }

    navigateToScreen(screenId) {
        if (screenId === this.currentScreen) return;

        console.log(`üì± –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω: ${screenId}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
        this.currentScreen = screenId;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateActiveScreen();

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        this.updateActiveNavItem(screenId);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —ç–∫—Ä–∞–Ω–∞ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        this.loadScreenContent(screenId);

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        this.addScreenTransition();
    }

    updateActiveScreen() {
        this.screens.forEach(screen => {
            if (screen.id === this.currentScreen) {
                screen.classList.add('active');
                screen.style.display = 'block';
            } else {
                screen.classList.remove('active');
                screen.style.display = 'none';
            }
        });
    }

    updateActiveNavItem(screenId) {
        this.navItems.forEach(item => {
            if (item.getAttribute('data-screen') === screenId) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    }

    loadScreenContent(screenId) {
        switch (screenId) {
            case 'tasks-screen':
                this.loadTasksScreen();
                break;
            case 'profile-screen':
                this.loadProfileScreen();
                break;
            case 'mega-roulette-screen':
                this.loadMegaRouletteScreen();
                break;
            default:
                // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                break;
        }
    }

    loadTasksScreen() {
        const container = document.getElementById('tasks-container');
        if (!container) return;

        if (container.children.length === 0) {
            container.innerHTML = `
                <div class="tasks-loading">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π...</p>
                </div>
            `;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è (—ç—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ tasks.js)
            if (window.tasksManager) {
                window.tasksManager.loadTasks();
            } else {
                // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ
                setTimeout(() => {
                    container.innerHTML = `
                        <div class="task-category">
                            <h3>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h3>
                            <div class="task-item">
                                <div class="task-info">
                                    <div class="task-icon">üìÖ</div>
                                    <div class="task-details">
                                        <div class="task-name">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥</div>
                                        <div class="task-description">–ó–∞—Ö–æ–¥–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</div>
                                    </div>
                                </div>
                                <div class="task-reward">
                                    <span>+10 ‚≠ê</span>
                                    <button class="task-button completed">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="task-category">
                            <h3>–ü–æ–¥–ø–∏—Å–∫–∏</h3>
                            <div class="task-item">
                                <div class="task-info">
                                    <div class="task-icon">üì∫</div>
                                    <div class="task-details">
                                        <div class="task-name">–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</div>
                                        <div class="task-description">–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª</div>
                                    </div>
                                </div>
                                <div class="task-reward">
                                    <span>+50 ‚≠ê</span>
                                    <button class="task-button" onclick="openChannel('kosmetichka_channel')">–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</button>
                                </div>
                            </div>
                        </div>
                    `;
                }, 1000);
            }
        }
    }

    loadProfileScreen() {
        const statsContainer = document.getElementById('profile-stats');
        const leaderboardContainer = document.getElementById('leaderboard');
        
        if (!statsContainer || !leaderboardContainer) return;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
        if (statsContainer.children.length === 0) {
            const userData = this.getUserData();
            statsContainer.innerHTML = `
                <div class="profile-header">
                    <div class="profile-avatar">üë§</div>
                    <div class="profile-info">
                        <h3 id="profile-username">${this.getUserDisplayName()}</h3>
                        <div class="profile-telegram-id">ID: ${this.getUserTelegramId()}</div>
                        <p class="profile-level">–£—Ä–æ–≤–µ–Ω—å 1</p>
                    </div>
                </div>
                
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-value">${userData.stats?.stars || 100}</div>
                        <div class="stat-label">–ó–≤–µ–∑–¥</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">${userData.stats?.totalSpins || 0}</div>
                        <div class="stat-label">–ü—Ä–æ–∫—Ä—É—Ç–æ–∫</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">${userData.stats?.prizesWon || 0}</div>
                        <div class="stat-label">–ü—Ä–∏–∑–æ–≤</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">${userData.stats?.referrals || 0}</div>
                        <div class="stat-label">–†–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
                    </div>
                </div>
            `;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        this.loadLeaderboard();
    }

    async loadLeaderboard(showOnlyReferrals = false) {
        const container = document.getElementById('leaderboard');
        if (!container) return;

        const userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;

        container.innerHTML = `
            <div class="leaderboard-controls">
                <button class="tab-btn ${!showOnlyReferrals ? 'active' : ''}" onclick="navigation.loadLeaderboard(false)">
                    <i class="fas fa-trophy"></i> –û–±—â–∏–π
                </button>
                <button class="tab-btn ${showOnlyReferrals ? 'active' : ''}" onclick="navigation.loadLeaderboard(true)">
                    <i class="fas fa-users"></i> –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
                </button>
            </div>
            <div class="loading">
                <i class="fas fa-spinner fa-spin"></i>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...</p>
            </div>
        `;

        try {
            const endpoint = showOnlyReferrals && userId ? 
                `/api/referrals-leaderboard/${userId}?limit=10` : 
                '/api/leaderboard?limit=10';
                
            const response = await fetch(endpoint);
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞');

            const data = await response.json();
            const leaderboard = data.leaderboard || [];

            if (leaderboard.length === 0) {
                const emptyMessage = showOnlyReferrals ? 
                    '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π' : 
                    '–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞';
                    
                container.innerHTML = `
                    <div class="leaderboard-controls">
                        <button class="tab-btn ${!showOnlyReferrals ? 'active' : ''}" onclick="navigation.loadLeaderboard(false)">
                            <i class="fas fa-trophy"></i> –û–±—â–∏–π
                        </button>
                        <button class="tab-btn ${showOnlyReferrals ? 'active' : ''}" onclick="navigation.loadLeaderboard(true)">
                            <i class="fas fa-users"></i> –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
                        </button>
                    </div>
                    <div class="empty-state">
                        <p>${emptyMessage}</p>
                        ${showOnlyReferrals ? '<p>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å!</p>' : '<p>–ë—É–¥—å –ø–µ—Ä–≤—ã–º!</p>'}
                    </div>
                `;
                return;
            }

            let leaderboardHTML = `
                <div class="leaderboard-controls">
                    <button class="tab-btn ${!showOnlyReferrals ? 'active' : ''}" onclick="navigation.loadLeaderboard(false)">
                        <i class="fas fa-trophy"></i> –û–±—â–∏–π
                    </button>
                    <button class="tab-btn ${showOnlyReferrals ? 'active' : ''}" onclick="navigation.loadLeaderboard(true)">
                        <i class="fas fa-users"></i> –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
                    </button>
                </div>
                <div class="leaderboard-list">
            `;
            
            leaderboard.forEach((player, index) => {
                const position = index + 1;
                const medal = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : `${position}.`;
                
                let statsContent = '';
                if (showOnlyReferrals) {
                    // –î–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                    statsContent = `${player.referrals_count || 0} üë•`;
                } else {
                    // –î–ª—è –æ–±—â–µ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã –∏ –ø—Ä–∏–∑—ã
                    statsContent = `${player.total_stars || 0} ‚≠ê`;
                }
                
                leaderboardHTML += `
                    <div class="leaderboard-item ${position <= 3 ? 'top-player' : ''}">
                        <div class="player-rank">${medal}</div>
                        <div class="player-info">
                            <div class="player-name">${player.first_name || '–ò–≥—Ä–æ–∫'}</div>
                            <div class="player-stats">${statsContent}</div>
                        </div>
                        ${!showOnlyReferrals ? `<div class="player-prizes">${player.total_prizes || 0} üéÅ</div>` : ''}
                    </div>
                `;
            });
            
            leaderboardHTML += '</div>';
            container.innerHTML = leaderboardHTML;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
            container.innerHTML = `
                <div class="error-state">
                    <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞</p>
                    <button onclick="navigation.loadLeaderboard()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            `;
        }
    }

    loadMegaRouletteScreen() {
        const container = document.querySelector('.mega-roulette-container');
        if (!container) return;

        if (container.children.length === 0) {
            container.innerHTML = `
                <div class="mega-roulette-content">
                    <div class="mega-wheel-container">
                        <div class="mega-wheel">üé∞</div>
                        <p>–ú–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!</p>
                    </div>
                    <div class="mega-requirements">
                        <h4>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</h4>
                        <ul>
                            <li>–ú–∏–Ω–∏–º—É–º 100 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫</li>
                            <li>5 –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤</li>
                            <li>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã</li>
                        </ul>
                    </div>
                </div>
            `;
        }
    }

    addScreenTransition() {
        const currentScreenElement = document.getElementById(this.currentScreen);
        if (currentScreenElement) {
            currentScreenElement.style.animation = 'fadeIn 0.3s ease';
            setTimeout(() => {
                currentScreenElement.style.animation = '';
            }, 300);
        }
    }

    getUserDisplayName() {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user || 
                            window.telegramIntegration?.user;
        
        if (telegramUser?.username) {
            return `@${telegramUser.username}`;
        } else if (telegramUser?.first_name) {
            return telegramUser.first_name;
        }
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }

    getUserTelegramId() {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user || 
                            window.telegramIntegration?.user;
        
        return telegramUser?.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è navigation.js - –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –≤–∫–ª–∞–¥–æ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª—å

    // –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å Navigation
    showProfileScreen() {
        this.currentScreen = 'profile-screen';
        const screen = document.getElementById('profile-screen');
        
        if (!screen) return;
        
        this.showScreen('profile-screen');
        this.updateActiveNav('profile-screen');
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        screen.innerHTML = `
            <div class="screen-header">
                <h2>–ü—Ä–æ—Ñ–∏–ª—å</h2>
            </div>
            
            <!-- –í–∫–ª–∞–¥–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è -->
            <div class="profile-tabs">
                <button class="profile-tab active" data-tab="profile-info">
                    <i class="fas fa-user"></i>
                    –ü—Ä–æ—Ñ–∏–ª—å
                </button>
                <button class="profile-tab" data-tab="leaderboard">
                    <i class="fas fa-trophy"></i>
                    –õ–∏–¥–µ—Ä–±–æ—Ä–¥
                </button>
            </div>
            
            <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å" -->
            <div class="tab-content active" id="profile-info">
                <div class="profile-header">
                    <div class="profile-avatar">üë§</div>
                    <div class="profile-info">
                        <h3 id="profile-username">${this.getUserDisplayName()}</h3>
                        <div class="profile-telegram-id">ID: ${this.getUserTelegramId()}</div>
                        <p class="profile-level">–£—Ä–æ–≤–µ–Ω—å 1</p>
                    </div>
                </div>
                
                <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                <div class="section">
                    <div class="section-title">
                        <i class="fas fa-chart-bar"></i>
                        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    </div>
                    <div class="stats-grid" id="profile-stats-grid">
                        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ -->
                    </div>
                </div>
                
                <!-- –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∑–æ–≤ -->
                <div class="section">
                    <div class="section-title">
                        <i class="fas fa-gift"></i>
                        –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∑–æ–≤
                    </div>
                    <div class="prize-history" id="prize-history">
                        <!-- –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∑–æ–≤ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ -->
                    </div>
                </div>
                
                <!-- –†–µ—Ñ–µ—Ä–∞–ª—ã -->
                <div class="section">
                    <div class="section-title">
                        <i class="fas fa-users"></i>
                        –†–µ—Ñ–µ—Ä–∞–ª—ã
                    </div>
                    <div class="referrals-section" id="referrals-section">
                        <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ -->
                    </div>
                </div>
            </div>
            
            <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ "–õ–∏–¥–µ—Ä–±–æ—Ä–¥" -->
            <div class="tab-content" id="leaderboard">
                <div class="leaderboard-container">
                    <!-- –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω -->
                </div>
            </div>
        `;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        this.initProfileTabs();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        this.loadProfileData();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ (–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É)
        this.loadLeaderboard();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
    initProfileTabs() {
        const tabs = document.querySelectorAll('.profile-tab');
        const contents = document.querySelectorAll('.tab-content');
        
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const targetTab = tab.dataset.tab;
                
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                tabs.forEach(t => t.classList.remove('active'));
                contents.forEach(c => c.classList.remove('active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
                tab.classList.add('active');
                document.getElementById(targetTab).classList.add('active');
                
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                if (targetTab === 'leaderboard') {
                    this.loadLeaderboard();
                }
            });
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    async loadProfileData() {
        const userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;
        
        if (!userId) {
            console.error('User ID not found');
            return;
        }
        
        try {
            const response = await fetch(`/api/user/${userId}`);
            if (!response.ok) throw new Error('Failed to load user data');
            
            const userData = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.updateProfileStats(userData);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–∑–æ–≤
            this.loadPrizeHistory(userId);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
            this.loadReferralsInfo(userId);
            
        } catch (error) {
            console.error('Error loading profile data:', error);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    updateProfileStats(userData) {
        const statsGrid = document.getElementById('profile-stats-grid');
        if (!statsGrid) return;
        
        statsGrid.innerHTML = `
            <div class="stats-card">
                <div class="stats-card-icon">‚≠ê</div>
                <div class="stats-card-value">${userData.stats?.stars || 100}</div>
                <div class="stats-card-label">–ó–≤–µ–∑–¥</div>
            </div>
            <div class="stats-card">
                <div class="stats-card-icon">üé∞</div>
                <div class="stats-card-value">${userData.stats?.totalSpins || 0}</div>
                <div class="stats-card-label">–ü—Ä–æ–∫—Ä—É—Ç–æ–∫</div>
            </div>
            <div class="stats-card">
                <div class="stats-card-icon">üéÅ</div>
                <div class="stats-card-value">${userData.stats?.prizesWon || 0}</div>
                <div class="stats-card-label">–ü—Ä–∏–∑–æ–≤</div>
            </div>
            <div class="stats-card">
                <div class="stats-card-icon">üë•</div>
                <div class="stats-card-value">${userData.stats?.referrals || 0}</div>
                <div class="stats-card-label">–†–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
            </div>
        `;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
    async loadLeaderboard() {
        const container = document.getElementById('leaderboard');
        if (!container) return;

        const userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;

        container.innerHTML = `
            <div class="leaderboard-header">
                <h3>
                    <i class="fas fa-trophy"></i>
                    –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
                </h3>
                <p>–õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</p>
            </div>
            
            <div class="leaderboard-controls">
                <button class="leaderboard-tab active" onclick="navigation.loadLeaderboardData('global')">
                    <i class="fas fa-globe"></i> –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø
                </button>
                <button class="leaderboard-tab" onclick="navigation.loadLeaderboardData('referrals')">
                    <i class="fas fa-users"></i> –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
                </button>
            </div>
            
            <div class="leaderboard-content" id="leaderboard-content">
                <div class="loading">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...</p>
                </div>
            </div>
            
            <!-- –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -->
            <div class="current-user-rank" id="current-user-rank">
                <!-- –†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω -->
            </div>
        `;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.loadLeaderboardData('global');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userId) {
            this.loadUserRank(userId);
        }
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    async loadLeaderboardData(type = 'global') {
        const contentContainer = document.getElementById('leaderboard-content');
        const userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;
        
        if (!contentContainer) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.querySelectorAll('.leaderboard-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        event?.target?.classList.add('active');
        
        contentContainer.innerHTML = `
            <div class="loading">
                <i class="fas fa-spinner fa-spin"></i>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
            </div>
        `;

        try {
            let endpoint;
            let limitParam = '?limit=20'; // –¢–æ–ø 20 –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            
            if (type === 'referrals' && userId) {
                endpoint = `/api/referrals-leaderboard/${userId}${limitParam}`;
            } else {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
                endpoint = `/api/leaderboard-referrals${limitParam}`;
            }
            
            const response = await fetch(endpoint);
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞');

            const data = await response.json();
            const leaderboard = data.leaderboard || [];

            if (leaderboard.length === 0) {
                const emptyMessage = type === 'referrals' ? 
                    '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π' : 
                    '–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞';
                    
                contentContainer.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-users" style="font-size: 48px; margin-bottom: 15px; opacity: 0.3;"></i>
                        <p>${emptyMessage}</p>
                        ${type === 'referrals' ? '<p>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å!</p>' : '<p>–ë—É–¥—å –ø–µ—Ä–≤—ã–º!</p>'}
                    </div>
                `;
                return;
            }

            let leaderboardHTML = '<div class="leaderboard-list">';
            
            leaderboard.forEach((player, index) => {
                const position = index + 1;
                const medal = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : `${position}.`;
                const referralsCount = player.referrals_count || 0;
                
                leaderboardHTML += `
                    <div class="leaderboard-item ${position <= 3 ? 'top-player' : ''}">
                        <div class="player-rank">${medal}</div>
                        <div class="player-info">
                            <div class="player-name">${player.first_name || '–ò–≥—Ä–æ–∫'}</div>
                            <div class="player-stats">${referralsCount} üë• —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
                        </div>
                        <div class="player-score">${referralsCount}</div>
                    </div>
                `;
            });
            
            leaderboardHTML += '</div>';
            contentContainer.innerHTML = leaderboardHTML;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
            contentContainer.innerHTML = `
                <div class="error-state">
                    <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 15px; color: #ff6b6b;"></i>
                    <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞</p>
                    <button onclick="navigation.loadLeaderboardData('${type}')" class="retry-btn">
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            `;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async loadUserRank(userId) {
        try {
            const response = await fetch(`/api/user-rank/${userId}`);
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–Ω–≥–∞');
            
            const data = await response.json();
            const rankContainer = document.getElementById('current-user-rank');
            
            if (rankContainer && data.rank) {
                rankContainer.innerHTML = `
                    <div class="user-rank-card">
                        <div class="rank-info">
                            <div class="rank-position">–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: #${data.rank.position}</div>
                            <div class="rank-referrals">${data.rank.referrals_count || 0} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
                        </div>
                        <div class="rank-icon">
                            <i class="fas fa-medal"></i>
                        </div>
                    </div>
                `;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
    async loadReferralsInfo(userId) {
        const container = document.getElementById('referrals-section');
        if (!container) return;
        
        container.innerHTML = `
            <div class="referrals-stats">
                <div class="referral-link-container">
                    <label>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</label>
                    <div class="referral-link">
                        <input type="text" id="referral-link" value="https://t.me/kosmetichka_lottery_bot?start=ref_${userId}" readonly>
                        <button onclick="navigation.copyReferralLink()" class="copy-btn">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                </div>
                
                <div class="referral-actions">
                    <button onclick="navigation.shareReferralLink()" class="share-btn">
                        <i class="fas fa-share"></i>
                        –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π
                    </button>
                </div>
            </div>
        `;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
    copyReferralLink() {
        const linkInput = document.getElementById('referral-link');
        if (linkInput) {
            linkInput.select();
            document.execCommand('copy');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(message, type = 'success') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingNotification = document.querySelector('.notification');
        if (existingNotification) {
            existingNotification.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(notification);
        
        // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (notification.parentNode) {
                notification.style.animation = 'slideOutNotification 0.3s ease-in';
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }
        }, 3000);
    }

    shareReferralLink() {
        const userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;
        const referralLink = `https://t.me/kosmetichka_lottery_bot?start=ref_${userId}`;
        const message = `üé∞ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Kosmetichka Lottery!\n\nüíé –ò–≥—Ä–∞–π –≤ —Ä—É–ª–µ—Ç–∫—É –∫—Ä–∞—Å–æ—Ç—ã\nüéÅ –í—ã–∏–≥—Ä—ã–≤–∞–π –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–∑—ã\nüë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã\n\n${referralLink}`;
        
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(message)}`);
        }
    }

    getUserData() {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        try {
            const stored = localStorage.getItem('userData');
            return stored ? JSON.parse(stored) : { stats: { stars: 100, totalSpins: 0, prizesWon: 0, referrals: 0 } };
        } catch {
            return { stats: { stars: 100, totalSpins: 0, prizesWon: 0, referrals: 0 } };
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á
window.openChannel = function(channelId) {
    const channels = {
        'kosmetichka_channel': 'https://t.me/kosmetichka_channel',
        'kosmetichka_instagram': 'https://instagram.com/kosmetichka',
        'dolcedeals': 'https://t.me/dolcedeals'
    };

    const url = channels[channelId];
    if (url) {
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.openTelegramLink(url);
        } else {
            window.open(url, '_blank');
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–¥–ø–∏—Å–∫–µ
        if (window.subscriptionChecker) {
            setTimeout(() => {
                window.subscriptionChecker.notifySubscription(channelId);
            }, 2000);
        }
    }
};

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const navigationStyles = `
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .task-category {
        margin-bottom: 20px;
    }

    .task-category h3 {
        color: #EF55A5;
        margin-bottom: 15px;
        font-size: 18px;
    }

    .task-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 15px;
        margin-bottom: 10px;
    }

    .task-info {
        display: flex;
        align-items: center;
        flex: 1;
    }

    .task-icon {
        font-size: 24px;
        margin-right: 15px;
    }

    .task-name {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .task-description {
        font-size: 12px;
        color: #ccc;
    }

    .task-reward {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }

    .task-button {
        background: linear-gradient(45deg, #EF55A5, #FF6B9D);
        border: none;
        color: white;
        padding: 8px 15px;
        border-radius: 15px;
        font-size: 12px;
        cursor: pointer;
        transition: transform 0.2s;
    }

    .task-button:hover {
        transform: translateY(-1px);
    }

    .task-button.completed {
        background: #666;
        cursor: default;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
        margin-top: 20px;
    }

    .stat-item {
        text-align: center;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 20px 10px;
    }

    .stat-value {
        font-size: 24px;
        font-weight: bold;
        color: #EF55A5;
    }

    .stat-label {
        font-size: 12px;
        color: #ccc;
        margin-top: 5px;
    }

    .profile-header {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }

    .profile-avatar {
        font-size: 48px;
        margin-right: 15px;
    }

    .profile-level {
        color: #CCD537;
        font-size: 14px;
    }

    .profile-telegram-id {
        font-size: 14px;
        color: var(--text-secondary);
        margin-bottom: 15px;
        opacity: 0.8;
        font-family: monospace;
    }

    .leaderboard-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 10px;
    }

    .leaderboard-item.top-player {
        background: rgba(239, 85, 165, 0.2);
    }

    .player-rank {
        font-size: 18px;
        font-weight: bold;
        min-width: 40px;
    }

    .player-info {
        flex: 1;
        margin-left: 15px;
    }

    .player-name {
        font-weight: bold;
    }

    .player-stats {
        font-size: 12px;
        color: #ccc;
    }

    .loading, .empty-state, .error-state {
        text-align: center;
        padding: 40px 20px;
        color: #ccc;
    }

    .loading i {
        font-size: 24px;
        margin-bottom: 10px;
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
if (!document.getElementById('navigation-styles')) {
    const style = document.createElement('style');
    style.id = 'navigation-styles';
    style.textContent = navigationStyles;
    document.head.appendChild(style);
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const navigation = new Navigation();
window.navigation = navigation;

export default navigation;
