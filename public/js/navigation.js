// navigation.js - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –õ–ò–î–ï–†–ë–û–†–î–ê

class Navigation {
    constructor() {
        this.currentScreen = 'main-screen';
        this.navItems = document.querySelectorAll('.nav-item');
        this.screens = document.querySelectorAll('.screen');
        this.init();
    }

    init() {
        console.log('üß≠ Navigation –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        this.navItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const targetScreen = item.getAttribute('data-screen');
                this.navigateToScreen(targetScreen);
            });
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        this.updateActiveScreen();
    }

    navigateToScreen(screenId) {
        if (screenId === this.currentScreen) return;

        console.log(`üì± –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω: ${screenId}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
        this.currentScreen = screenId;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateActiveScreen();

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        this.updateActiveNavItem(screenId);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —ç–∫—Ä–∞–Ω–∞ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        this.loadScreenContent(screenId);

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        this.addScreenTransition();
    }

    updateActiveScreen() {
        this.screens.forEach(screen => {
            if (screen.id === this.currentScreen) {
                screen.classList.add('active');
                screen.style.display = 'block';
            } else {
                screen.classList.remove('active');
                screen.style.display = 'none';
            }
        });
    }

    updateActiveNavItem(screenId) {
        this.navItems.forEach(item => {
            if (item.getAttribute('data-screen') === screenId) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    }

    loadScreenContent(screenId) {
        switch (screenId) {
            case 'tasks-screen':
                this.loadTasksScreen();
                break;
            case 'profile-screen':
                // –ü–†–û–§–ò–õ–¨ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–¢–°–Ø –ß–ï–†–ï–ó ProfileScreen - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∑–¥–µ—Å—å
                console.log('üîÑ –ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ ProfileScreen');
                break;
            case 'mega-roulette-screen':
                this.loadMegaRouletteScreen();
                break;
            default:
                // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                break;
        }
    }

    loadTasksScreen() {
        const container = document.getElementById('tasks-container');
        if (!container) return;

        if (container.children.length === 0) {
            container.innerHTML = `
                <div class="tasks-loading">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π...</p>
                </div>
            `;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è (—ç—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ tasks.js)
            if (window.tasksManager) {
                window.tasksManager.loadTasks();
            } else {
                // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ
                setTimeout(() => {
                    container.innerHTML = `
                        <div class="task-category">
                            <h3>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h3>
                            <div class="task-item">
                                <div class="task-info">
                                    <div class="task-icon">üìÖ</div>
                                    <div class="task-details">
                                        <div class="task-name">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥</div>
                                        <div class="task-description">–ó–∞—Ö–æ–¥–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</div>
                                    </div>
                                </div>
                                <div class="task-reward">
                                    <span>+10 ‚≠ê</span>
                                    <button class="task-button completed">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="task-category">
                            <h3>–ü–æ–¥–ø–∏—Å–∫–∏</h3>
                            <div class="task-item">
                                <div class="task-info">
                                    <div class="task-icon">üì∫</div>
                                    <div class="task-details">
                                        <div class="task-name">–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</div>
                                        <div class="task-description">–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª</div>
                                    </div>
                                </div>
                                <div class="task-reward">
                                    <span>+50 ‚≠ê</span>
                                    <button class="task-button" onclick="openChannel('kosmetichka_channel')">–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</button>
                                </div>
                            </div>
                        </div>
                    `;
                }, 1000);
            }
        }
    }

    loadMegaRouletteScreen() {
        const container = document.querySelector('.mega-roulette-container');
        if (!container) return;

        if (container.children.length === 0) {
            container.innerHTML = `
                <div class="mega-roulette-content">
                    <div class="mega-wheel-container">
                        <div class="mega-wheel">üé∞</div>
                        <p>–ú–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!</p>
                    </div>
                    <div class="mega-requirements">
                        <h4>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</h4>
                        <ul>
                            <li>–ú–∏–Ω–∏–º—É–º 100 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫</li>
                            <li>5 –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤</li>
                            <li>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã</li>
                        </ul>
                    </div>
                </div>
            `;
        }
    }

    addScreenTransition() {
        const currentScreenElement = document.getElementById(this.currentScreen);
        if (currentScreenElement) {
            currentScreenElement.style.animation = 'fadeIn 0.3s ease';
            setTimeout(() => {
                currentScreenElement.style.animation = '';
            }, 300);
        }
    }

    showScreen(screenId) {
        this.screens.forEach(screen => {
            if (screen.id === screenId) {
                screen.classList.add('active');
                screen.style.display = 'block';
            } else {
                screen.classList.remove('active');
                screen.style.display = 'none';
            }
        });
    }

    updateActiveNav(screenId) {
        this.navItems.forEach(item => {
            if (item.getAttribute('data-screen') === screenId) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    }

    // –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ï–§–ï–†–ê–õ–û–í - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    copyReferralLink() {
        const linkInput = document.getElementById('referral-link');
        if (linkInput) {
            linkInput.select();
            linkInput.setSelectionRange(0, 99999); // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if (navigator.clipboard) {
                    navigator.clipboard.writeText(linkInput.value).then(() => {
                        this.showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! üìã', 'success');
                    });
                } else {
                    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                    document.execCommand('copy');
                    this.showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! üìã', 'success');
                }
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                this.showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é', 'error');
            }
        }
    }

    shareReferralLink() {
        const userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;
        const referralLink = `https://t.me/kosmetichka_lottery_bot?start=ref_${userId}`;
        const message = `üé∞ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Kosmetichka Lottery!\n\nüíé –ò–≥—Ä–∞–π –≤ —Ä—É–ª–µ—Ç–∫—É –∫—Ä–∞—Å–æ—Ç—ã\nüéÅ –í—ã–∏–≥—Ä—ã–≤–∞–π –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–∑—ã\nüë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã\n\n${referralLink}`;
        
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(message)}`);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(message, type = 'success') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingNotification = document.querySelector('.notification');
        if (existingNotification) {
            existingNotification.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(notification);
        
        // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (notification.parentNode) {
                notification.style.animation = 'slideOutNotification 0.3s ease-in';
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }
        }, 3000);
    }

    getUserDisplayName() {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user || 
                            window.telegramIntegration?.user;
        
        if (telegramUser?.username) {
            return `@${telegramUser.username}`;
        } else if (telegramUser?.first_name) {
            return telegramUser.first_name;
        }
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }

    getUserTelegramId() {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user || 
                            window.telegramIntegration?.user;
        
        return telegramUser?.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    getUserData() {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        try {
            const stored = localStorage.getItem('userData');
            return stored ? JSON.parse(stored) : { stats: { stars: 100, totalSpins: 0, prizesWon: 0, referrals: 0 } };
        } catch {
            return { stats: { stars: 100, totalSpins: 0, prizesWon: 0, referrals: 0 } };
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á
window.openChannel = function(channelId) {
    const channels = {
        'kosmetichka_channel': 'https://t.me/kosmetichka_channel',
        'kosmetichka_instagram': 'https://instagram.com/kosmetichka',
        'dolcedeals': 'https://t.me/dolcedeals'
    };

    const url = channels[channelId];
    if (url) {
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.openTelegramLink(url);
        } else {
            window.open(url, '_blank');
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–¥–ø–∏—Å–∫–µ
        if (window.subscriptionChecker) {
            setTimeout(() => {
                window.subscriptionChecker.notifySubscription(channelId);
            }, 2000);
        }
    }
};

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const navigationStyles = `
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .task-category {
        margin-bottom: 20px;
    }

    .task-category h3 {
        color: #EF55A5;
        margin-bottom: 15px;
        font-size: 18px;
    }

    .task-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 15px;
        margin-bottom: 10px;
    }

    .task-info {
        display: flex;
        align-items: center;
        flex: 1;
    }

    .task-icon {
        font-size: 24px;
        margin-right: 15px;
    }

    .task-name {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .task-description {
        font-size: 12px;
        color: #ccc;
    }

    .task-reward {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }

    .task-button {
        background: linear-gradient(45deg, #EF55A5, #FF6B9D);
        border: none;
        color: white;
        padding: 8px 15px;
        border-radius: 15px;
        font-size: 12px;
        cursor: pointer;
        transition: transform 0.2s;
    }

    .task-button:hover {
        transform: translateY(-1px);
    }

    .task-button.completed {
        background: #666;
        cursor: default;
    }

    .loading, .empty-state, .error-state {
        text-align: center;
        padding: 40px 20px;
        color: #ccc;
    }

    .loading i {
        font-size: 24px;
        margin-bottom: 10px;
    }

    .notification {
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: linear-gradient(135deg, #4CAF50, #CCD537);
        color: white;
        padding: 15px 25px;
        border-radius: 15px;
        font-weight: 600;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        z-index: 1000;
        animation: slideInNotification 0.3s ease-out;
        backdrop-filter: blur(15px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .notification.success {
        background: linear-gradient(135deg, #4CAF50, #CCD537);
    }

    .notification.error {
        background: linear-gradient(135deg, #f44336, #ff6b6b);
    }

    @keyframes slideInNotification {
        from {
            opacity: 0;
            transform: translateX(-50%) translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
    }

    @keyframes slideOutNotification {
        from {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
        to {
            opacity: 0;
            transform: translateX(-50%) translateY(-20px);
        }
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
if (!document.getElementById('navigation-styles')) {
    const style = document.createElement('style');
    style.id = 'navigation-styles';
    style.textContent = navigationStyles;
    document.head.appendChild(style);
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const navigation = new Navigation();
window.navigation = navigation;

export default navigation;
