// public/js/app.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –¶–ò–§–†–´ "3" –í –ù–ê–í–ò–ì–ê–¶–ò–ò

import { APP_CONFIG, WHEEL_PRIZES } from './config.js';
import { MainScreen } from './screens/main.js';
import { TasksScreen } from './screens/tasks.js';
import { ProfileScreen } from './screens/profile.js';
import { DepositScreen } from './screens/deposit.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const DEFAULT_USER_DATA = {
    stars: 20,
    totalSpins: 0,
    totalWins: 0,
    availableFriendSpins: 1,
    recentWins: [],
    completedTasks: [],
    profile: {
        name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        avatar: 'üë§',
        joinDate: Date.now()
    },
    lastDailyReset: Date.now()
};

export default class App {
    constructor() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kosmetichka App...');
        
        this.gameData = null;
        this.screens = {};
        this.navigation = null;
        this.tg = null;
        
        // Telegram WebApp –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ telegram-integration.js
        
        console.log('üì± App —Å–æ–∑–¥–∞–Ω');
    }

    // –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ telegram-integration.js

    async init() {
        try {
            console.log('üîß –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
            
            // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.loadGameData();
            
            // 2. –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await this.createInterface();
            
            // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            this.initNavigation();
            
            // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–∫—Ä–∞–Ω—ã
            await this.loadScreens();
            
            // 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            this.setupGlobalHandlers();
            
            // 6. –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateInterface();
            
            // 7. –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Telegram WebApp –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
            if (window.telegramIntegration) {
                this.tg = window.telegramIntegration.tg;
                console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
                // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                window.telegramIntegration.initUser();
                // –ó–∞—Ç–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
                await window.telegramIntegration.syncWithServer();
            }
            
            // 8. –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
            this.hideLoadingScreen();
            
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!');
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.handleError(error);
        }
    }

    loadGameData() {
        console.log('üíæ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage
            const saved = localStorage.getItem('kosmetichkaGameData');
            if (saved) {
                this.gameData = { ...DEFAULT_USER_DATA, ...JSON.parse(saved) };
                console.log('üíæ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
            } else {
                this.gameData = { ...DEFAULT_USER_DATA };
                console.log('üÜï –°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            if (!this.gameData.recentWins) this.gameData.recentWins = [];
            if (!this.gameData.completedTasks) this.gameData.completedTasks = [];
            if (!this.gameData.availableFriendSpins) this.gameData.availableFriendSpins = 1;
            if (!this.gameData.profile) this.gameData.profile = { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', avatar: 'üë§', joinDate: Date.now() };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.gameData = { ...DEFAULT_USER_DATA };
        }
    }

    async createInterface() {
        const app = document.getElementById('app');
        if (!app) {
            throw new Error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        app.innerHTML = `
            <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –í–í–ï–†–•–£ -->
            <div id="status-messages" class="status-messages-container"></div>
            
            <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —ç–∫—Ä–∞–Ω–æ–≤ -->
            <div id="screens-container"></div>
            
            <!-- –ù–ò–ñ–ù–Ø–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø - –í–°–ï–ì–î–ê –ó–ê–ö–†–ï–ü–õ–ï–ù–ê -->
            <nav id="bottom-navigation" class="bottom-navigation">
                <button class="nav-btn active" data-screen="main" aria-label="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞">
                    <i class="fas fa-home"></i>
                    <span>–ì–ª–∞–≤–Ω–∞—è</span>
                </button>
                <button class="nav-btn" data-screen="tasks" aria-label="–ó–∞–¥–∞–Ω–∏—è">
                    <i class="fas fa-tasks"></i>
                    <span>–ó–∞–¥–∞–Ω–∏—è</span>
                    <div class="nav-badge" id="tasks-badge" style="display: none;"></div>
                </button>
                <button class="nav-btn" data-screen="profile" aria-label="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                    <i class="fas fa-user"></i>
                    <span>–ü—Ä–æ—Ñ–∏–ª—å</span>
                </button>
            </nav>
        `;

        console.log('üñºÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω');
    }

    initNavigation() {
        this.navigation = {
            currentScreen: 'main',
            navigateTo: (screenName) => {
                console.log(`üß≠ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω: ${screenName}`);
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞
                const validScreens = ['main', 'tasks', 'profile', 'deposit', 'mega-roulette'];
                if (!validScreens.includes(screenName)) {
                    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–∫—Ä–∞–Ω: ${screenName}`);
                    return;
                }
                
                // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
                document.querySelectorAll('.screen').forEach(screen => {
                    screen.classList.remove('active');
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
                const targetScreen = document.getElementById(`${screenName}-screen`);
                if (targetScreen) {
                    targetScreen.classList.add('active');
                    this.navigation.currentScreen = screenName;
                    
                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if (this.screens[screenName] && this.screens[screenName].init) {
                        this.screens[screenName].init();
                    }
                    
                    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞–≤–µ—Ä—Ö –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–æ–≤
                    targetScreen.scrollTop = 0;
                } else {
                    console.error(`‚ùå –≠–∫—Ä–∞–Ω ${screenName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    return;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                this.updateNavigationState(screenName);
            }
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        setTimeout(() => {
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const screen = btn.dataset.screen;
                    if (screen && screen !== this.navigation.currentScreen) {
                        this.navigation.navigateTo(screen);
                    }
                });
                
                // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                btn.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        const screen = btn.dataset.screen;
                        if (screen && screen !== this.navigation.currentScreen) {
                            this.navigation.navigateTo(screen);
                        }
                    }
                });
            });
        }, 100);
        
        console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    updateNavigationState(activeScreen) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
            
            if (btn.dataset.screen === activeScreen) {
                btn.classList.add('active');
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const screenTitles = {
            'main': 'Kosmetichka - –†—É–ª–µ—Ç–∫–∞ –∫—Ä–∞—Å–æ—Ç—ã',
            'tasks': 'Kosmetichka - –ó–∞–¥–∞–Ω–∏—è',
            'profile': 'Kosmetichka - –ü—Ä–æ—Ñ–∏–ª—å',
            'mega-roulette': 'Kosmetichka - –ú–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∞'
        };
        
        if (screenTitles[activeScreen]) {
            document.title = screenTitles[activeScreen];
        }
    }

    async loadScreens() {
        try {
            console.log('üì± –ó–∞–≥—Ä—É–∑–∫–∞ —ç–∫—Ä–∞–Ω–æ–≤...');
            
            const container = document.getElementById('screens-container');
            if (!container) {
                throw new Error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —ç–∫—Ä–∞–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –û–°–ù–û–í–ù–´–ï –≠–ö–†–ê–ù–´
            console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤...');
            this.screens.main = new MainScreen(this);
            this.screens.tasks = new TasksScreen(this);
            this.screens.profile = new ProfileScreen(this);
            this.screens.deposit = new DepositScreen(this);
            
            console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã —Å–æ–∑–¥–∞–Ω—ã');

            // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –≠–ö–†–ê–ù–´ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
            try {
                console.log('üé∞ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏...');
                const megaModule = await import('./screens/mega-roulette.js');
                if (megaModule.MegaRouletteScreen) {
                    this.screens.megaRoulette = new megaModule.MegaRouletteScreen(this);
                    console.log('‚úÖ –ú–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                }
            } catch (megaError) {
                console.warn('‚ö†Ô∏è –ú–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', megaError.message);
            }

            // –†–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
            const screensHTML = [];
            
            if (this.screens.main) screensHTML.push(this.screens.main.render());
            if (this.screens.tasks) screensHTML.push(this.screens.tasks.render());
            if (this.screens.profile) screensHTML.push(this.screens.profile.render());
            if (this.screens.deposit) screensHTML.push(this.screens.deposit.render());
            if (this.screens.megaRoulette) screensHTML.push(this.screens.megaRoulette.render());
            
            container.innerHTML = screensHTML.join('');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            if (this.screens.main) {
                this.screens.main.init();
            }

            console.log('‚úÖ –í—Å–µ —ç–∫—Ä–∞–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Ä–∞–Ω–æ–≤:', error);
            throw error;
        }
    }

    setupGlobalHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        window.addEventListener('error', (event) => {
            console.error('üö® –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
            this.handleError(event.error);
        });

        window.addEventListener('unhandledrejection', (event) => {
            console.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', event.reason);
            this.handleError(event.reason);
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        window.addEventListener('beforeunload', () => {
            this.saveGameData();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                this.saveGameData();
            }
        });

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        if (this.tg) {
            this.tg.onEvent('back_button_pressed', () => {
                if (this.navigation.currentScreen !== 'main') {
                    this.navigation.navigateTo('main');
                    return true;
                }
                return false;
            });
        }

        console.log('üõ°Ô∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    updateInterface() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–≤–µ–∑–¥
        const starCount = document.getElementById('star-count');
        if (starCount) {
            starCount.textContent = this.gameData.stars || 0;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userName = document.querySelector('.user-name');
        if (userName && this.tg?.initDataUnsafe?.user?.first_name) {
            userName.textContent = this.tg.initDataUnsafe.user.first_name;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.updateUserAvatar();

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ –∑–∞–¥–∞–Ω–∏–π (–ò–°–ü–†–ê–í–õ–ï–ù–û - –£–ë–ò–†–ê–ï–ú –¶–ò–§–†–£)
        this.updateTasksBadge();

        console.log('üîÑ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
    }

    updateUI() {
        this.updateInterface();
        this.saveGameData();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
        if (this.screens.main && this.screens.main.updateSpinButtons) {
            this.screens.main.updateSpinButtons();
        }
    }

    hideLoadingScreen() {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
            console.log('üé≠ –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω...');
            loadingScreen.style.transition = 'opacity 0.5s ease';
            loadingScreen.style.opacity = '0';
            setTimeout(() => {
                loadingScreen.style.display = 'none';
                console.log('‚úÖ –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω —Å–∫—Ä—ã—Ç');
            }, 500);
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –£–ë–ò–†–ê–ï–ú –¶–ò–§–†–£ "3"
    updateTasksBadge() {
        const tasksBadge = document.getElementById('tasks-badge');
        if (tasksBadge) {
            // –ü–û–õ–ù–û–°–¢–¨–Æ –°–ö–†–´–í–ê–ï–ú –ë–ï–ô–î–ñ
            tasksBadge.style.display = 'none';
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –í–û–ó–í–†–ê–©–ê–ï–ú 0 –í–ú–ï–°–¢–û 3
    getAvailableTasksCount() {
        // –ü–æ–¥—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ü–∏—Ñ—Ä—É
        return 0;
    }

    saveGameData() {
        try {
            localStorage.setItem('kosmetichkaGameData', JSON.stringify(this.gameData));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô - –ü–û–ö–ê–ó –í–í–ï–†–•–£ –≠–ö–†–ê–ù–ê
    showStatusMessage(message, type = 'info', duration = 3000) {
        const container = document.getElementById('status-messages');
        if (!container) {
            console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const messageEl = document.createElement('div');
        messageEl.className = `status-message ${type}`;
        messageEl.textContent = message;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.appendChild(messageEl);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            messageEl.classList.add('show');
        }, 10);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            messageEl.classList.remove('show');
            setTimeout(() => {
                if (messageEl.parentNode) {
                    messageEl.parentNode.removeChild(messageEl);
                }
            }, 300);
        }, duration);

        console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${type}): ${message}`);
    }

    handleError(error) {
        console.error('üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        this.showStatusMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω–∞–º –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–∞–∫—à–Ω
        if (this.tg && typeof this.tg.sendData === 'function') {
            this.tg.sendData(JSON.stringify({
                type: 'error',
                message: error.message,
                stack: error.stack,
                timestamp: Date.now()
            }));
        }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–π
    addStars(amount) {
        this.gameData.stars += amount;
        this.updateInterface();
        this.saveGameData();
        console.log(`‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} –∑–≤–µ–∑–¥. –í—Å–µ–≥–æ: ${this.gameData.stars}`);
    }

    spendStars(amount) {
        if (this.gameData.stars >= amount) {
            this.gameData.stars -= amount;
            this.updateInterface();
            this.saveGameData();
            console.log(`üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ ${amount} –∑–≤–µ–∑–¥. –û—Å—Ç–∞–ª–æ—Å—å: ${this.gameData.stars}`);
            return true;
        }
        console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –ù—É–∂–Ω–æ: ${amount}, –µ—Å—Ç—å: ${this.gameData.stars}`);
        return false;
    }

    addWin(prize) {
        const win = {
            prize: prize,
            timestamp: Date.now()
        };
        
        this.gameData.recentWins.unshift(win);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π
        if (this.gameData.recentWins.length > APP_CONFIG.game.maxRecentWins) {
            this.gameData.recentWins = this.gameData.recentWins.slice(0, APP_CONFIG.game.maxRecentWins);
        }
        
        this.gameData.totalWins++;
        this.saveGameData();
        
        console.log(`üéÅ –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–∏–≥—Ä—ã—à: ${prize.name}`);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º)
    updateUserData(newData) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–æ–≤–µ–µ
        const localPrizes = this.gameData.prizes || [];
        const serverPrizes = newData.prizes || [];
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        this.gameData = {
            ...this.gameData,
            ...newData,
            // –ù–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤
            prizes: [...new Set([...serverPrizes, ...localPrizes])],
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–∑–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            prizesWon: Math.max(
                newData.prizesWon || 0,
                newData.prizes?.length || 0,
                this.gameData.prizes?.length || 0
            )
        };
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if (newData.stats) {
            this.gameData.stars = newData.stats.stars || this.gameData.stars;
            this.gameData.totalSpins = newData.stats.totalSpins || this.gameData.totalSpins;
            this.gameData.prizesWon = newData.stats.prizesWon || this.gameData.prizesWon;
            this.gameData.totalStarsEarned = newData.stats.totalStarsEarned || this.gameData.totalStarsEarned;
        }
        
        this.saveGameData();
        this.updateInterface();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.gameData);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ telegram-integration)
    getUserData() {
        return this.gameData;
    }

    // –ü–æ–∫–∞–∑ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
    showConfetti() {
        const colors = ['#EF55A5', '#CCD537', '#809EFF', '#FF6B9D', '#A4B93A'];
        
        for (let i = 0; i < 50; i++) {
            setTimeout(() => {
                const confetti = document.createElement('div');
                confetti.className = 'confetti';
                confetti.style.cssText = `
                    position: fixed;
                    left: ${Math.random() * 100}%;
                    top: -10px;
                    width: 10px;
                    height: 10px;
                    background: ${colors[Math.floor(Math.random() * colors.length)]};
                    pointer-events: none;
                    z-index: 9999;
                `;
                
                document.body.appendChild(confetti);
                
                setTimeout(() => {
                    if (confetti.parentNode) {
                        confetti.parentNode.removeChild(confetti);
                    }
                }, 3000);
            }, i * 50);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤–µ–∑–¥ –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö
    updateStarsDisplay() {
        document.querySelectorAll('[data-stars]').forEach(el => {
            el.textContent = this.gameData.stars;
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ header
    updateUserAvatar() {
        const avatarElement = document.querySelector('.header .avatar');
        const user = this.tg?.initDataUnsafe?.user;
        
        if (avatarElement && user) {
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            avatarElement.innerHTML = '';
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ Telegram
            if (user.photo_url) {
                const img = document.createElement('img');
                img.src = user.photo_url;
                img.alt = `–ê–≤–∞—Ç–∞—Ä ${user.first_name}`;
                img.style.cssText = 'width: 100%; height: 100%; object-fit: cover; border-radius: 50%;';
                
                // Fallback –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
                img.onerror = () => {
                    avatarElement.textContent = user.first_name?.charAt(0).toUpperCase() || 'üë§';
                };
                
                avatarElement.appendChild(img);
            } else if (user.first_name) {
                avatarElement.textContent = user.first_name.charAt(0).toUpperCase();
            } else {
                avatarElement.textContent = 'üë§';
            }
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
window.navigateToDeposit = () => {
    if (window.app && window.app.navigation) {
        window.app.navigation.navigateTo('deposit');
    }
};