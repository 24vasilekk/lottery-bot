// telegram-integration.js - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Web Apps

class TelegramIntegration {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.user = null;
        this.init();
    }

    init() {
        if (!this.tg) {
            console.warn('Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.');
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            this.user = {
                id: 123456789, // –¢–µ—Å—Ç–æ–≤—ã–π ID
                first_name: 'Test User',
                username: 'testuser'
            };
            console.log('üë§ –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.user);
            return;
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram WebApp
        this.tg.ready();
        this.tg.expand();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.user = this.tg.initDataUnsafe?.user;
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±—Ä–∞—É–∑–µ—Ä), —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!this.user) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            this.user = {
                id: 123456789, // –¢–µ—Å—Ç–æ–≤—ã–π ID
                first_name: 'Test User',
                username: 'testuser'
            };
        }
        
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.user);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
        this.setupTheme();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        this.setupMainButton();
        this.setupBackButton();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers();
        
        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º initUser –∑–¥–µ—Å—å - app –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤!
    }

    setupTheme() {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã Telegram
        const themeParams = this.tg.themeParams;
        
        if (themeParams.bg_color) {
            document.documentElement.style.setProperty('--tg-bg-color', themeParams.bg_color);
        }
        
        if (themeParams.text_color) {
            document.documentElement.style.setProperty('--tg-text-color', themeParams.text_color);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
        this.tg.setHeaderColor('#1a1a1a');
    }

    setupMainButton() {
        // –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ Telegram
        this.tg.MainButton.text = '–ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É';
        this.tg.MainButton.color = '#EF55A5';
        this.tg.MainButton.textColor = '#FFFFFF';
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        this.tg.MainButton.onClick(() => {
            if (app && app.wheelManager) {
                app.wheelManager.spin();
            }
        });
    }

    setupBackButton() {
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        this.tg.BackButton.onClick(() => {
            if (app.currentScreen !== 'main') {
                app.switchScreen('main');
                this.hideBackButton();
            } else {
                this.tg.close();
            }
        });
    }

    setupEventHandlers() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        document.addEventListener('screenChanged', (e) => {
            this.handleScreenChange(e.detail.screen);
        });
        
        document.addEventListener('wheelSpin', (e) => {
            this.handleWheelSpin(e.detail);
        });
        
        document.addEventListener('taskCompleted', (e) => {
            this.handleTaskCompleted(e.detail);
        });
    }

    initUser() {
        if (!this.user) {
            console.error('‚ùå TelegramIntegration: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        
        console.log('üë§ TelegramIntegration: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.user);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ app —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!window.app) {
            console.error('‚ùå TelegramIntegration: app –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É app –µ—Å—Ç—å –º–µ—Ç–æ–¥ getUserData
        if (!window.app.getUserData) {
            console.error('‚ùå TelegramIntegration: –º–µ—Ç–æ–¥ getUserData –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = window.app.getUserData();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Telegram
        userData.profile.name = this.user.username ? `@${this.user.username}` : (this.user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        userData.profile.username = this.user.username || '';
        userData.profile.first_name = this.user.first_name || '';
        userData.profile.telegramId = this.user.id;
        
        console.log('üìã TelegramIntegration: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData.profile);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        window.app.updateUserData(userData);
        window.app.updateUI();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        this.syncWithServer();
    }

    handleScreenChange(screen) {
        switch (screen) {
            case 'main':
                this.tg.MainButton.text = '–ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É';
                this.tg.MainButton.show();
                this.hideBackButton();
                break;
            case 'tasks':
                this.tg.MainButton.text = '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ';
                this.tg.MainButton.show();
                this.showBackButton();
                break;
            case 'profile':
                this.tg.MainButton.hide();
                this.showBackButton();
                break;
        }
    }

    handleWheelSpin(result) {
        console.log('üé∞ TelegramIntegration: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞', result);
        
        if (!this.user) {
            console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const data = {
            userId: this.user.id,
            prize: result.prize,
            spinType: result.spinType || 'normal',
            timestamp: new Date().toISOString(),
            user: this.user // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ë–î
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', data);
        this.sendToServer('wheel_spin', data);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º haptic feedback
        if (this.tg.HapticFeedback) {
            this.tg.HapticFeedback.notificationOccurred('success');
        }
    }

    handleTaskCompleted(task) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        this.sendToServer('task_completed', {
            userId: this.user?.id,
            taskId: task.id,
            reward: task.reward,
            timestamp: new Date().toISOString()
        });
        
        // Haptic feedback
        this.tg.HapticFeedback.impactOccurred('medium');
    }

    showMainButton() {
        this.tg.MainButton.show();
    }

    hideMainButton() {
        this.tg.MainButton.hide();
    }

    showBackButton() {
        this.tg.BackButton.show();
    }

    hideBackButton() {
        this.tg.BackButton.hide();
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å retry –ª–æ–≥–∏–∫–æ–π
    async sendToServer(action, data, maxRetries = 3) {
        if (!this.user) {
            console.error('‚ùå sendToServer: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return { success: false, error: 'No user data' };
        }
        
        console.log(`üì° sendToServer: ${action}`, data);
        console.log('üë§ sendToServer: user data:', this.user);
        
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                const payload = {
                    action,
                    data,
                    user: this.user
                };
                
                console.log(`üì§ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}:`, payload);
                
                const response = await fetch('/api/telegram-webhook', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Telegram-Init-Data': this.tg.initData || ''
                    },
                    body: JSON.stringify(payload)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const result = await response.json();
                console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
                return result;
                
            } catch (error) {
                console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error);
                
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                if (attempt === maxRetries) {
                    console.error('‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
                    return { success: false, error: error.message };
                }
                
                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
                const delay = Math.pow(2, attempt - 1) * 1000; // 1s, 2s, 4s
                console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    async syncWithServer() {
        if (!this.user) return;
        
        try {
            const response = await this.sendToServer('sync_user', {
                userData: window.app.getUserData(),
                user: this.user // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            });
            
            if (response?.userData) {
                window.app.updateUserData(response.userData);
                window.app.updateUI();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    showAlert(message) {
        this.tg.showAlert(message);
    }

    showConfirm(message, callback) {
        this.tg.showConfirm(message, callback);
    }

    close() {
        this.tg.close();
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–æ—Ç
    sendDataToBot(data) {
        this.tg.sendData(JSON.stringify(data));
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
let telegramIntegration;

function initTelegramIntegration() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramIntegration...');
    telegramIntegration = new TelegramIntegration();
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
    window.telegramIntegration = telegramIntegration;
    console.log('‚úÖ TelegramIntegration —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ window');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –µ—Å–ª–∏ DOM —É–∂–µ –≥–æ—Ç–æ–≤, –∏–Ω–∞—á–µ –∂–¥–µ–º DOMContentLoaded
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTelegramIntegration);
} else {
    initTelegramIntegration();
}
