// telegram-integration.js - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Web Apps

class TelegramIntegration {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.user = null;
        this.init();
    }

    init() {
        if (!this.tg) {
            console.warn('Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.');
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            let testUserId = localStorage.getItem('test_user_id');
            if (!testUserId) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö ID (–æ—Ç 900000000 –¥–æ 999999999)
                testUserId = Math.floor(Math.random() * 100000000) + 900000000;
                localStorage.setItem('test_user_id', testUserId.toString());
                console.log('üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π ID –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞:', testUserId);
            } else {
                console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π ID –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞:', testUserId);
            }
            
            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            this.user = {
                id: parseInt(testUserId),
                first_name: 'Test User',
                username: 'testuser' + testUserId.toString().slice(-4) // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π username
            };
            console.log('üë§ –î–∞–Ω–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.user);
            return;
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram WebApp
        this.tg.ready();
        this.tg.expand();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.user = this.tg.initDataUnsafe?.user;
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±—Ä–∞—É–∑–µ—Ä), —Å–æ–∑–¥–∞–µ–º –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!this.user) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram, —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            let testUserId = localStorage.getItem('test_user_id');
            if (!testUserId) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö ID (–æ—Ç 900000000 –¥–æ 999999999)
                testUserId = Math.floor(Math.random() * 100000000) + 900000000;
                localStorage.setItem('test_user_id', testUserId.toString());
                console.log('üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π ID:', testUserId);
            } else {
                console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π ID:', testUserId);
            }
            
            this.user = {
                id: parseInt(testUserId),
                first_name: 'Test User',
                username: 'testuser' + testUserId.toString().slice(-4) // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π username
            };
        }
        
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.user);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
        this.setupTheme();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        this.setupMainButton();
        this.setupBackButton();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers();
        
        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º initUser –∑–¥–µ—Å—å - app –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤!
    }

    setupTheme() {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã Telegram
        const themeParams = this.tg.themeParams;
        
        if (themeParams.bg_color) {
            document.documentElement.style.setProperty('--tg-bg-color', themeParams.bg_color);
        }
        
        if (themeParams.text_color) {
            document.documentElement.style.setProperty('--tg-text-color', themeParams.text_color);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
        this.tg.setHeaderColor('#1a1a1a');
    }

    setupMainButton() {
        // –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ Telegram
        this.tg.MainButton.text = '–ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É';
        this.tg.MainButton.color = '#EF55A5';
        this.tg.MainButton.textColor = '#FFFFFF';
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        this.tg.MainButton.onClick(() => {
            if (app && app.wheelManager) {
                app.wheelManager.spin();
            }
        });
    }

    setupBackButton() {
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        this.tg.BackButton.onClick(() => {
            if (app.currentScreen !== 'main') {
                app.switchScreen('main');
                this.hideBackButton();
            } else {
                this.tg.close();
            }
        });
    }

    setupEventHandlers() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        document.addEventListener('screenChanged', (e) => {
            this.handleScreenChange(e.detail.screen);
        });
        
        document.addEventListener('wheelSpin', (e) => {
            this.handleWheelSpin(e.detail);
        });
        
        document.addEventListener('taskCompleted', (e) => {
            this.handleTaskCompleted(e.detail);
        });
    }

    initUser() {
        if (!this.user) {
            console.error('‚ùå TelegramIntegration: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        
        console.log('üë§ TelegramIntegration: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.user);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ app —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!window.app) {
            console.error('‚ùå TelegramIntegration: app –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å DEFAULT_USER_DATA
        // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–ª–µ–≥—Ä–∞–º-–¥–∞–Ω–Ω—ã–º–∏, –ù–ï –¢–†–û–ì–ê–Ø –±–∞–ª–∞–Ω—Å
        const displayName = this.user.username ? `@${this.user.username}` : (this.user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –ø—Ä–æ—Ñ–∏–ª—å, –ù–ï –≤–µ—Å—å –æ–±—ä–µ–∫—Ç userData
        if (window.app.gameData && window.app.gameData.profile) {
            window.app.gameData.profile.name = displayName;
            window.app.gameData.profile.username = this.user.username || '';
            window.app.gameData.profile.first_name = this.user.first_name || '';
            window.app.gameData.profile.telegramId = this.user.id;
        }

        console.log('üìã TelegramIntegration: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            id: this.user.id,
            username: this.user.username,
            first_name: this.user.first_name,
            displayName: displayName
        });
        
        console.log('üìã TelegramIntegration: –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª—å, –±–∞–ª–∞–Ω—Å –ù–ï —Ç—Ä–æ–Ω—É—Ç');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ UI, –ù–ï –≤—ã–∑—ã–≤–∞–µ–º updateUserData —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        window.app.updateUI();
        
        console.log('‚úÖ TelegramIntegration: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
    }

    handleScreenChange(screen) {
        switch (screen) {
            case 'main':
                this.tg.MainButton.text = '–ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É';
                this.tg.MainButton.show();
                this.hideBackButton();
                break;
            case 'tasks':
                this.tg.MainButton.text = '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ';
                this.tg.MainButton.show();
                this.showBackButton();
                break;
            case 'profile':
                this.tg.MainButton.hide();
                this.showBackButton();
                break;
        }
    }

    handleWheelSpin(result) {
        console.log('üé∞ TelegramIntegration: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞', result);
        
        if (!this.user) {
            console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const data = {
            userId: this.user.id,
            prize: result.prize,
            spinType: result.spinType || 'normal',
            timestamp: new Date().toISOString(),
            user: this.user // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ë–î
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', data);
        this.sendToServer('wheel_spin', data);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º haptic feedback
        if (this.tg.HapticFeedback) {
            this.tg.HapticFeedback.notificationOccurred('success');
        }
    }

    handleTaskCompleted(task) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        this.sendToServer('task_completed', {
            userId: this.user?.id,
            taskId: task.id,
            reward: task.reward,
            timestamp: new Date().toISOString()
        });
        
        // Haptic feedback
        this.tg.HapticFeedback.impactOccurred('medium');
    }

    showMainButton() {
        this.tg.MainButton.show();
    }

    hideMainButton() {
        this.tg.MainButton.hide();
    }

    showBackButton() {
        this.tg.BackButton.show();
    }

    hideBackButton() {
        this.tg.BackButton.hide();
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å retry –ª–æ–≥–∏–∫–æ–π
// –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é sendToServer –≤ public/js/telegram-integration.js:

    async sendToServer(action, data, maxRetries = 3) {
        if (!this.user) {
            console.error('‚ùå sendToServer: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return { success: false, error: 'No user data' };
        }
        
        console.log(`üì° sendToServer: ${action}`);
        console.log('üìã –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', this.user);
        
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                const payload = {
                    action,
                    data,
                    user: this.user
                };
                
                console.log(`üì§ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} - –æ—Ç–ø—Ä–∞–≤–∫–∞ payload:`, payload);
                
                // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                if (action === 'wheel_spin') {
                    if (!data.spinType) {
                        console.warn('‚ö†Ô∏è spinType –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º normal');
                        data.spinType = 'normal';
                    }
                    
                    if (!data.prize) {
                        console.error('‚ùå –ü—Ä–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö!');
                        return { success: false, error: 'Prize data missing' };
                    }
                    
                    if (!data.prize.id) {
                        console.warn('‚ö†Ô∏è ID –ø—Ä–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π');
                        data.prize.id = Math.floor(Math.random() * 1000000);
                    }
                    
                    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è wheel_spin –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
                }
                
                const response = await fetch('/api/telegram-webhook', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Telegram-Init-Data': this.tg.initData || '',
                        'X-Telegram-User-ID': this.user.id.toString()
                    },
                    body: JSON.stringify(payload)
                });
                
                console.log(`üì° HTTP —Å—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                const responseText = await response.text();
                console.log('üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseText);
                
                if (!response.ok) {
                    console.error(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É –∫–∞–∫ JSON
                    let errorData;
                    try {
                        errorData = JSON.parse(responseText);
                    } catch (e) {
                        errorData = { error: responseText };
                    }
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
                    console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorData);
                    
                    // –î–ª—è 429 –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –µ—â–µ —Ä–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    if (response.status === 429) {
                        console.warn(`‚ö†Ô∏è Rate limit (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries})`);
                        
                        if (attempt < maxRetries) {
                            const delay = Math.pow(2, attempt) * 1000; // 2s, 4s, 8s
                            console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
                            await new Promise(resolve => setTimeout(resolve, delay));
                            continue;
                        }
                    }
                    
                    // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Ç–æ–∂–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                    if (attempt < maxRetries && response.status >= 500) {
                        const delay = Math.pow(2, attempt) * 500; // 1s, 2s, 4s
                        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}ms –¥–ª—è –æ—à–∏–±–∫–∏ ${response.status}...`);
                        await new Promise(resolve => setTimeout(resolve, delay));
                        continue;
                    }
                    
                    return { 
                        success: false, 
                        error: errorData.error || `HTTP ${response.status}`,
                        details: errorData.details || errorData,
                        status: response.status
                    };
                }
                
                // –ü–∞—Ä—Å–∏–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                let result;
                try {
                    result = JSON.parse(responseText);
                } catch (e) {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å');
                    result = { success: true, data: responseText };
                }
                
                console.log(`‚úÖ sendToServer —É—Å–ø–µ—à–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, result);
                return result;
                
            } catch (error) {
                console.error(`‚ùå sendToServer –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}):`, error);
                
                if (attempt < maxRetries) {
                    const delay = Math.pow(2, attempt) * 1000;
                    console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}ms...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                } else {
                    return { 
                        success: false, 
                        error: error.message || 'Network error',
                        details: error
                    };
                }
            }
        }
    }

    // –î–û–ë–ê–í–¨–¢–ï –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:
    debugConnection() {
        console.log('üîç === –û–¢–õ–ê–î–ö–ê TELEGRAM INTEGRATION ===');
        console.log('User ID:', this.user?.id);
        console.log('User data:', this.user);
        console.log('Telegram WebApp ready:', !!this.tg);
        console.log('Init data:', this.tg?.initData?.slice(0, 50) + '...');
        console.log('sendToServer function:', typeof this.sendToServer);
        console.log('=== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ===');
    }

    async syncWithServer() {
        if (!this.user) {
            console.error('‚ùå syncWithServer: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
        
        try {
            const response = await this.sendToServer('sync_user', {
                userData: {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    telegramId: this.user.id
                },
                user: this.user
            });
            
            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
            
            if (response?.userData && window.app) {
                // –í–ê–ñ–ù–û: –ë–∞–ª–∞–Ω—Å –í–°–ï–ì–î–ê –±–µ—Ä–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
                const serverStars = response.userData.stars;
                
                console.log(`‚≠ê –ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–∞: ${serverStars}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
                if (typeof serverStars === 'number') {
                    window.app.gameData.stars = serverStars;
                    window.app.gameData.total_stars_earned = response.userData.total_stars_earned || serverStars;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if (response.userData.referrals !== undefined) {
                        window.app.gameData.referrals = response.userData.referrals;
                    }
                    if (response.userData.totalSpins !== undefined) {
                        window.app.gameData.totalSpins = response.userData.totalSpins;
                    }
                    if (response.userData.prizesWon !== undefined) {
                        window.app.gameData.prizesWon = response.userData.prizesWon;
                    }
                    
                    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ë–∞–ª–∞–Ω—Å: ${window.app.gameData.stars}`);
                    
                    // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage - —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
                    window.app.updateInterface();
                } else {
                    console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–∞:', serverStars);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    showAlert(message) {
        this.tg.showAlert(message);
    }

    showConfirm(message, callback) {
        this.tg.showConfirm(message, callback);
    }

    close() {
        this.tg.close();
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–æ—Ç
    sendDataToBot(data) {
        this.tg.sendData(JSON.stringify(data));
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
let telegramIntegration;

function initTelegramIntegration() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramIntegration...');
    telegramIntegration = new TelegramIntegration();
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
    window.telegramIntegration = telegramIntegration;
    console.log('‚úÖ TelegramIntegration —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ window');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –µ—Å–ª–∏ DOM —É–∂–µ –≥–æ—Ç–æ–≤, –∏–Ω–∞—á–µ –∂–¥–µ–º DOMContentLoaded
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTelegramIntegration);
} else {
    initTelegramIntegration();
}
