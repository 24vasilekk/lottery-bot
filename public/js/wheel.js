// –õ–æ–≥–∏–∫–∞ —Ä—É–ª–µ—Ç–∫–∏

class WheelManager {
    constructor() {
        this.wheel = document.getElementById('wheel');
        this.spinButton = document.getElementById('spin-button');
        this.isSpinning = false;
        this.rotation = 0;
        this.prizes = WHEEL_PRIZES;
        this.segmentAngle = 360 / this.prizes.length;
        
        this.init();
    }

    init() {
        this.createWheel();
        this.bindEvents();
    }

    createWheel() {
        // –û—á–∏—â–∞–µ–º –∫–æ–ª–µ—Å–æ
        this.wheel.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
        this.prizes.forEach((prize, index) => {
            const segment = this.createSegment(prize, index);
            this.wheel.appendChild(segment);
        });
    }

    createSegment(prize, index) {
        const segment = document.createElement('div');
        segment.className = 'wheel-segment';
        
        const angle = this.segmentAngle * index;
        const rotation = angle + this.segmentAngle / 2;
        
        segment.style.transform = `rotate(${angle}deg)`;
        segment.style.background = this.createSegmentGradient(prize.color);
        segment.style.clipPath = this.createSegmentClipPath();
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å–µ–≥–º–µ–Ω—Ç–∞
        const content = document.createElement('div');
        content.className = 'segment-content';
        content.style.transform = `rotate(${rotation}deg)`;
        content.innerHTML = `
            <div class="segment-icon">${prize.icon}</div>
            <div class="segment-text">${prize.name}</div>
        `;
        
        segment.appendChild(content);
        return segment;
    }

    createSegmentGradient(baseColor) {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
        const lighterColor = this.lightenColor(baseColor, 20);
        const darkerColor = this.darkenColor(baseColor, 20);
        
        return `linear-gradient(135deg, ${lighterColor} 0%, ${baseColor} 50%, ${darkerColor} 100%)`;
    }

    createSegmentClipPath() {
        // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É —Å–µ–≥–º–µ–Ω—Ç–∞ –∫—Ä—É–≥–∞
        const angle = this.segmentAngle;
        const halfAngle = angle / 2;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–∫–∏ –¥–ª—è clip-path
        const startAngle = -halfAngle * Math.PI / 180;
        const endAngle = halfAngle * Math.PI / 180;
        
        const x1 = 50 + 40 * Math.cos(startAngle);
        const y1 = 50 + 40 * Math.sin(startAngle);
        const x2 = 50 + 40 * Math.cos(endAngle);
        const y2 = 50 + 40 * Math.sin(endAngle);
        
        return `polygon(50% 50%, ${x1}% ${y1}%, ${x2}% ${y2}%)`;
    }

    bindEvents() {
        this.spinButton.addEventListener('click', () => {
            this.spin();
        });
    }

    async spin() {
        if (this.isSpinning) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
        if (window.subscriptionChecker) {
            const hasSubscriptions = await window.subscriptionChecker.checkAllSubscriptions();
            if (!hasSubscriptions) {
                return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –º–æ–¥–∞–ª —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∑–≤–µ–∑–¥
        const userData = getUserData();
        const spinCost = APP_CONFIG.wheel.starCost; // 20 –∑–≤–µ–∑–¥ –∑–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        
        if (userData.stats.stars < spinCost) {
            this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏!', 'error');
            return;
        }

        this.isSpinning = true;
        this.spinButton.disabled = true;
        this.spinButton.innerHTML = '<span>–ö—Ä—É—Ç–∏—Ç—Å—è...</span>';
        
        // –í–ê–ñ–ù–û: –ù–ï —Å–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –≤ /api/spin/determine-result
        console.log('üé∞ –ó–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–∫–∏, –∑–≤–µ–∑–¥—ã –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º');

        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.addSpinEffects();

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
        const serverResponse = await this.getServerResponse();
        if (!serverResponse) {
            this.resetSpin();
            return;
        }
        
        const serverResult = serverResponse.result;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if (serverResponse.newBalance !== undefined) {
            const userData = getUserData();
            userData.stats.stars = serverResponse.newBalance;
            updateUserData(userData);
            updateStarDisplay();
            console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞: ${serverResponse.newBalance} –∑–≤–µ–∑–¥`);
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const winningSegment = this.findPrizeByServerResult(serverResult);
        const targetAngle = this.calculateTargetAngle(winningSegment);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è
        await this.animateWheel(targetAngle);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        await this.showResult(winningSegment, serverResult);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.resetSpin();
    }

    async getServerResponse() {
        try {
            const userData = getUserData();
            const response = await fetch('/api/spin/determine-result', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    userId: userData.telegramId,
                    spinType: 'normal',
                    spinCost: APP_CONFIG.wheel.starCost
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const data = await response.json();
            console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞:', data);
            
            if (!data.success) {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
            
            return data; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
            return null;
        }
    }

    findPrizeByServerResult(serverPrize) {
        // –ò—â–µ–º –ø—Ä–∏–∑ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –ø–æ —Ç–∏–ø—É –∏ –∑–Ω–∞—á–µ–Ω–∏—é
        const foundPrize = this.prizes.find(prize => {
            if (serverPrize.type === 'empty') {
                return prize.type === 'empty';
            }
            if (serverPrize.type === 'stars') {
                return prize.type === 'stars' && prize.value === serverPrize.value;
            }
            if (serverPrize.type === 'certificate') {
                return prize.type === 'certificate' && prize.value === serverPrize.value;
            }
            return false;
        });
        
        if (foundPrize) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–∏–∑: ${foundPrize.name}`);
            return foundPrize;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ
        console.warn('‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
        return {
            id: `server_${serverPrize.type}_${serverPrize.value || 'empty'}`,
            type: serverPrize.type,
            name: serverPrize.name || this.getDefaultPrizeName(serverPrize),
            value: serverPrize.value || 0,
            icon: this.getDefaultPrizeIcon(serverPrize.type),
            color: this.getDefaultPrizeColor(serverPrize.type)
        };
    }

    getDefaultPrizeName(serverPrize) {
        switch (serverPrize.type) {
            case 'empty': return '–ü—É—Å—Ç–æ';
            case 'stars': return `${serverPrize.value} –∑–≤–µ–∑–¥`;
            case 'certificate': return `–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ${serverPrize.value}‚ÇΩ`;
            default: return serverPrize.name || '–ü—Ä–∏–∑';
        }
    }

    getDefaultPrizeIcon(type) {
        switch (type) {
            case 'empty': return 'üíî';
            case 'stars': return '‚≠ê';
            case 'certificate': return 'üé´';
            default: return 'üéÅ';
        }
    }

    getDefaultPrizeColor(type) {
        switch (type) {
            case 'empty': return '#6c757d';
            case 'stars': return '#ffc107';
            case 'certificate': return '#28a745';
            default: return '#007bff';
        }
    }

    selectWinningSegment() {
        // –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è getServerResult()
        // –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ selectWinningSegment()');
        
        const random = Math.random() * 100;
        let cumulativeProbability = 0;
        
        for (const prize of this.prizes) {
            cumulativeProbability += prize.probability;
            if (random <= cumulativeProbability) {
                return prize;
            }
        }
        
        return this.prizes[0];
    }

    calculateTargetAngle(winningPrize) {
        const prizeIndex = this.prizes.findIndex(prize => prize.id === winningPrize.id);
        const prizeAngle = this.segmentAngle * prizeIndex + this.segmentAngle / 2;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ + —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        const spins = APP_CONFIG.wheel.minSpins + Math.random() * (APP_CONFIG.wheel.maxSpins - APP_CONFIG.wheel.minSpins);
        const randomOffset = (Math.random() - 0.5) * (this.segmentAngle * 0.3); // –ù–µ–±–æ–ª—å—à–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        
        return (spins * 360) + (360 - prizeAngle) + randomOffset;
    }

    async animateWheel(targetAngle) {
        return new Promise((resolve) => {
            const startRotation = this.rotation;
            const finalRotation = startRotation + targetAngle;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            this.wheel.style.setProperty('--wheel-rotation', `${finalRotation}deg`);
            this.wheel.style.setProperty('--spin-duration', `${APP_CONFIG.animations.wheelSpinDuration}ms`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            this.wheel.classList.add('spinning');
            
            // –ê–Ω–∏–º–∏—Ä—É–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å
            this.animatePointer();
            
            setTimeout(() => {
                this.rotation = finalRotation % 360;
                this.wheel.classList.remove('spinning');
                resolve();
            }, APP_CONFIG.animations.wheelSpinDuration);
        });
    }

    animatePointer() {
        const pointer = document.querySelector('.wheel-pointer');
        pointer.classList.add('bouncing');
        
        setTimeout(() => {
            pointer.classList.remove('bouncing');
        }, 300);
    }

    async showResult(prize, serverResult = null) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = getUserData();
        userData.stats.totalSpins++;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const resultToUse = serverResult || prize;
        
        if (resultToUse.type !== 'empty') {
            userData.stats.prizesWon++;
            userData.prizes.unshift({
                ...resultToUse,
                timestamp: new Date().toISOString(),
                id: Date.now()
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–∑ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏
            if (resultToUse.type === 'stars') {
                const starReward = resultToUse.value || 0;
                userData.stats.stars += starReward;
                userData.stats.totalStarsEarned += starReward;
                this.showStarGainEffect(starReward);
            }
        }
        
        updateUserData(userData);
        this.updatePrizeHistory();
        updateStarDisplay();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        this.showPrizeModal(resultToUse);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö –ø—Ä–∏–∑–æ–≤
        if (resultToUse.type !== 'empty') {
            this.createConfetti();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.checkAchievements();
    }

    showPrizeModal(prize) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
        if (prize.type.includes('golden-apple') || prize.type.includes('dolce')) {
            this.showCertificateModal(prize);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä—ã—à –±–æ–ª—å—à–µ 100 –∑–≤–µ–∑–¥
        if (prize.type.includes('stars') && prize.value > 100) {
            this.showBigStarsWinModal(prize);
            return;
        }

        const modal = document.getElementById('prize-modal');
        const title = document.getElementById('prize-title');
        const description = document.getElementById('prize-description');
        const animation = modal.querySelector('.prize-animation i');
        
        if (prize.type === 'empty') {
            title.textContent = '–£–ø—Å!';
            description.textContent = prize.description;
            animation.className = 'fas fa-heart-broken';
        } else {
            title.textContent = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!';
            description.textContent = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${prize.description}`;
            animation.className = 'fas fa-gift';
        }
        
        modal.classList.add('active');
    }

    showBigStarsWinModal(prize) {
        // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π –∑–≤–µ–∑–¥
        const existingModal = document.getElementById('big-stars-modal');
        if (existingModal) {
            existingModal.remove();
        }

        const modal = document.createElement('div');
        modal.id = 'big-stars-modal';
        modal.className = 'modal active';
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        window.createSafeModal(modal, {
            style: {
                background: 'linear-gradient(135deg, #9C27B0 0%, #E91E63 100%)'
            },
            icon: {
                class: 'fas fa-star',
                style: { color: '#FFD700' }
            },
            title: 'üéâ –û–ì–†–û–ú–ù–´–ô –í–´–ò–ì–†–´–®!',
            titleStyle: {
                color: 'white',
                marginBottom: '20px'
            },
            description: `${prize.value} –ó–í–ï–ó–î!\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∫—Ä—É–ø–Ω—ã–º –≤—ã–∏–≥—Ä—ã—à–µ–º!`,
            descriptionStyle: {
                color: 'white',
                fontSize: '18px',
                fontWeight: 'bold',
                marginBottom: '25px',
                whiteSpace: 'pre-line'
            },
            buttons: [
                {
                    text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É',
                    class: 'admin-contact-button',
                    style: {
                        background: 'white',
                        color: '#9C27B0',
                        marginBottom: '15px'
                    },
                    onclick: () => {
                        try {
                            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
                            if (window.Telegram?.WebApp?.openTelegramLink) {
                                window.Telegram.WebApp.openTelegramLink('https://t.me/kosmetichkasupport');
                            } else {
                                window.open('https://t.me/kosmetichkasupport', '_blank');
                            }
                        } catch (e) {
                            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', e);
                        }
                    }
                },
                {
                    text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É',
                    class: 'admin-contact-button',
                    onclick: () => {
                        const modalElement = document.getElementById('big-stars-modal');
                        if (modalElement) {
                            modalElement.classList.remove('active');
                            setTimeout(() => modalElement.remove(), 300);
                        }
                    }
                }
            ],
            onClose: () => {
                const modalElement = document.getElementById('big-stars-modal');
                if (modalElement) {
                    modalElement.classList.remove('active');
                    setTimeout(() => modalElement.remove(), 300);
                }
            }
        });
        
        document.body.appendChild(modal);
    }

    showCertificateModal(prize) {
        const modal = document.getElementById('certificate-modal');
        const description = document.getElementById('certificate-description');
        
        description.textContent = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${prize.name}!`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
            document.getElementById('user-telegram-id').textContent = window.Telegram.WebApp.initDataUnsafe.user.id;
        }
        
        modal.classList.add('active');
    }

    resetSpin() {
        this.isSpinning = false;
        this.spinButton.disabled = false;
        this.spinButton.innerHTML = '<span>–ö—Ä—É—Ç–∏—Ç—å</span>';
    }

    addSpinEffects() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥ —Ä—É–ª–µ—Ç–∫–∏
        this.createStarEffects();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
        this.wheel.classList.add('glow-effect');
        
        setTimeout(() => {
            this.wheel.classList.remove('glow-effect');
        }, APP_CONFIG.animations.wheelSpinDuration);
    }

    createStarEffects() {
        const wheelContainer = document.querySelector('.wheel-container');
        
        for (let i = 0; i < 5; i++) {
            const star = document.createElement('div');
            star.className = 'star-effect';
            star.innerHTML = '‚ú®';
            star.style.position = 'absolute';
            star.style.left = Math.random() * 100 + '%';
            star.style.top = Math.random() * 100 + '%';
            
            wheelContainer.appendChild(star);
            
            setTimeout(() => {
                star.remove();
            }, 1500);
        }
    }

    createConfetti() {
        const colors = [APP_CONFIG.colors.primary, APP_CONFIG.colors.lime, APP_CONFIG.colors.purple];
        
        for (let i = 0; i < 50; i++) {
            const confetti = document.createElement('div');
            confetti.className = 'confetti-piece';
            confetti.style.left = Math.random() * 100 + 'vw';
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.animationDelay = Math.random() * 3 + 's';
            confetti.style.animationDuration = (Math.random() * 3 + 2) + 's';
            
            document.body.appendChild(confetti);
            
            setTimeout(() => {
                confetti.remove();
            }, 5000);
        }
    }

    showStarGainEffect(amount) {
        const starElement = document.querySelector('.stars');
        starElement.classList.add('gaining');
        
        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â–∏–π —Ç–µ–∫—Å—Ç
        const floatingText = document.createElement('div');
        floatingText.textContent = `+${amount}`;
        floatingText.style.cssText = `
            position: absolute;
            color: ${APP_CONFIG.colors.lime};
            font-weight: bold;
            font-size: 18px;
            pointer-events: none;
            z-index: 1000;
            animation: floatUp 2s ease-out forwards;
        `;
        
        starElement.appendChild(floatingText);
        
        setTimeout(() => {
            starElement.classList.remove('gaining');
            floatingText.remove();
        }, 2000);
    }

    updatePrizeHistory() {
        const historyContainer = document.getElementById('prize-history');
        const userData = getUserData();
        
        historyContainer.innerHTML = '';
        
        const recentPrizes = userData.prizes.slice(0, 5);
        
        recentPrizes.forEach(prize => {
            const prizeElement = document.createElement('div');
            prizeElement.className = 'prize-item new';
            prizeElement.innerHTML = `
                <div class="prize-info">
                    <span class="prize-icon">${prize.icon}</span>
                    <div>
                        <div class="prize-name">${prize.name}</div>
                        <div class="prize-time">${this.formatTime(prize.timestamp)}</div>
                    </div>
                </div>
                <div class="prize-rarity ${prize.rarity}">${this.getRarityText(prize.rarity)}</div>
            `;
            
            historyContainer.appendChild(prizeElement);
        });
    }

    checkAchievements() {
        const userData = getUserData();
        const unlockedAchievements = [];
        
        ACHIEVEMENTS.forEach(achievement => {
            if (!userData.stats.achievements.includes(achievement.id)) {
                let unlocked = false;
                
                switch (achievement.id) {
                    case 'first_spin':
                        unlocked = userData.stats.totalSpins >= 1;
                        break;
                    case 'lucky_streak':
                        unlocked = this.checkLuckyStreak(userData);
                        break;
                    case 'social_butterfly':
                        unlocked = userData.stats.referrals >= 10;
                        break;
                    case 'star_collector':
                        unlocked = userData.stats.totalStarsEarned >= 1000;
                        break;
                    case 'daily_champion':
                        unlocked = this.checkDailyChampion(userData);
                        break;
                }
                
                if (unlocked) {
                    userData.stats.achievements.push(achievement.id);
                    userData.stats.stars += achievement.reward;
                    unlockedAchievements.push(achievement);
                }
            }
        });
        
        if (unlockedAchievements.length > 0) {
            updateUserData(userData);
            this.showAchievementNotifications(unlockedAchievements);
        }
    }

    checkLuckyStreak(userData) {
        const recentPrizes = userData.prizes.slice(0, 3);
        return recentPrizes.length >= 3 && recentPrizes.every(prize => prize.type !== 'empty');
    }

    checkDailyChampion(userData) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        return false; // –ü–æ–∫–∞ —á—Ç–æ false
    }

    showAchievementNotifications(achievements) {
        achievements.forEach((achievement, index) => {
            setTimeout(() => {
                this.showNotification(
                    `–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.title}! +${achievement.reward} –∑–≤–µ–∑–¥`,
                    'achievement'
                );
            }, index * 1000);
        });
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <div class="notification-icon">${NOTIFICATIONS.types[type]?.icon || '‚ÑπÔ∏è'}</div>
            <div class="notification-message">${message}</div>
            <button class="notification-close" onclick="this.parentElement.remove()">√ó</button>
        `;
        
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${APP_CONFIG.colors.cardBg};
            color: white;
            padding: 15px;
            border-radius: 10px;
            border-left: 4px solid ${APP_CONFIG.colors.primary};
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            z-index: 1001;
            display: flex;
            align-items: center;
            gap: 10px;
            max-width: 300px;
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.classList.add('hiding');
            setTimeout(() => notification.remove(), 300);
        }, NOTIFICATIONS.types[type]?.duration || 3000);
    }

    formatTime(timestamp) {
        const date = new Date(timestamp);
        const now = new Date();
        const diff = now - date;
        
        if (diff < 60000) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (diff < 3600000) return `${Math.floor(diff / 60000)} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        if (diff < 86400000) return `${Math.floor(diff / 3600000)} —á –Ω–∞–∑–∞–¥`;
        return `${Math.floor(diff / 86400000)} –¥–Ω –Ω–∞–∑–∞–¥`;
    }

    getRarityText(rarity) {
        const rarityMap = {
            common: '–û–±—ã—á–Ω—ã–π',
            uncommon: '–ù–µ–æ–±—ã—á–Ω—ã–π',
            rare: '–†–µ–¥–∫–∏–π',
            epic: '–≠–ø–∏—á–µ—Å–∫–∏–π',
            legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'
        };
        return rarityMap[rarity] || '–û–±—ã—á–Ω—ã–π';
    }

    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–≤–µ—Ç–∞–º–∏
    lightenColor(color, percent) {
        const num = parseInt(color.replace("#", ""), 16);
        const amt = Math.round(2.55 * percent);
        const R = (num >> 16) + amt;
        const G = (num >> 8 & 0x00FF) + amt;
        const B = (num & 0x0000FF) + amt;
        return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
            (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
            (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
    }

    darkenColor(color, percent) {
        const num = parseInt(color.replace("#", ""), 16);
        const amt = Math.round(2.55 * percent);
        const R = (num >> 16) - amt;
        const G = (num >> 8 & 0x00FF) - amt;
        const B = (num & 0x0000FF) - amt;
        return "#" + (0x1000000 + (R > 255 ? 255 : R < 0 ? 0 : R) * 0x10000 +
            (G > 255 ? 255 : G < 0 ? 0 : G) * 0x100 +
            (B > 255 ? 255 : B < 0 ? 0 : B)).toString(16).slice(1);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–∑–∞
function closePrizeModal() {
    const modal = document.getElementById('prize-modal');
    modal.classList.remove('active');
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è floating animation
const style = document.createElement('style');
style.textContent = `
    @keyframes floatUp {
        0% {
            transform: translateY(0);
            opacity: 1;
        }
        100% {
            transform: translateY(-50px);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);
