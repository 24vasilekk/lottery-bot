// public/js/components/navigation.js - Navigation Component (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

export class Navigation {
    constructor(app) {
        this.app = app;
        this.currentScreen = 'main';
    }

    render() {
        return `
            <div class="bottom-nav">
                <div class="nav-item active" data-screen="main">
                    <i class="fas fa-star"></i>
                    <span>–ì–ª–∞–≤–Ω–∞—è</span>
                </div>
                <div class="nav-item" data-screen="tasks">
                    <div class="nav-icon-wrapper">
                        <i class="fas fa-tasks"></i>
                        <div class="notification-badge" id="task-badge" style="display: none;">0</div>
                    </div>
                    <span>–ó–∞–¥–∞–Ω–∏—è</span>
                </div>
                <div class="nav-item" data-screen="profile">
                    <i class="fas fa-user"></i>
                    <span>–ü—Ä–æ—Ñ–∏–ª—å</span>
                </div>
            </div>
        `;
    }

    init() {
        const navContainer = document.getElementById('bottom-nav');
        if (!navContainer) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        navContainer.innerHTML = this.render();
        
        this.setupEventListeners();
        this.updateBadges();
        
        console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    setupEventListeners() {
        const navItems = document.querySelectorAll('.nav-item');
        
        navItems.forEach(item => {
            item.addEventListener('click', () => {
                const screen = item.dataset.screen;
                this.navigateTo(screen);
            });
        });
    }

    navigateTo(screenName) {
        if (this.currentScreen === screenName) return;
        
        console.log(`üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è: ${this.currentScreen} -> ${screenName}`);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞
        const validScreens = ['main', 'tasks', 'profile'];
        if (!validScreens.includes(screenName)) {
            console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–∫—Ä–∞–Ω: ${screenName}`);
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentScreen = screenName;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.updateActiveState(screenName);
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if (this.app && this.app.showScreen) {
            this.app.showScreen(screenName);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        this.initializeScreen(screenName);
    }

    updateActiveState(activeScreen) {
        try {
            const navItems = document.querySelectorAll('.nav-item');
            
            navItems.forEach(item => {
                const screen = item.dataset.screen;
                
                if (screen === activeScreen) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
        }
    }

    initializeScreen(screenName) {
        try {
            const screenKey = this.getScreenKey(screenName);
            const screen = this.app.screens[screenKey];
            
            if (screen && typeof screen.init === 'function') {
                console.log(`üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞: ${screenName}`);
                screen.init();
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–¥–∞–Ω–∏–π
                if (screenName === 'tasks' && typeof screen.updateTasks === 'function') {
                    screen.updateTasks();
                    console.log('üìã –ó–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                }
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞:', error);
        }
    }

    getScreenKey(screenName) {
        const screenMap = {
            'main': 'main',
            'tasks': 'tasks', 
            'profile': 'profile',
            'mega-roulette': 'megaRoulette'
        };
        
        return screenMap[screenName] || screenName;
    }

    updateBadges() {
        try {
            const availableTasks = this.getAvailableTasksCount();
            const taskBadge = document.getElementById('task-badge');
            
            if (taskBadge) {
                if (availableTasks > 0) {
                    taskBadge.textContent = availableTasks;
                    taskBadge.style.display = 'flex';
                } else {
                    taskBadge.style.display = 'none';
                }
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–¥–∂–µ–π:', error);
        }
    }

    getAvailableTasksCount() {
        try {
            if (!this.app.gameData) return 0;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ TasksScreen –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (this.app.screens.tasks && typeof this.app.screens.tasks.getAvailableTasksCount === 'function') {
                return this.app.screens.tasks.getAvailableTasksCount();
            }
            
            // Fallback —Ä–∞—Å—á–µ—Ç
            let count = 0;
            const completedTasks = this.app.gameData.completedTasks || [];
            
            // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            const lastDailyReset = this.app.gameData.lastDailyReset || 0;
            const today = new Date().toDateString();
            const lastResetDate = new Date(lastDailyReset).toDateString();
            
            if (today !== lastResetDate) {
                // –ï—Å—Ç—å –Ω–æ–≤—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
                count += 3; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            }
            
            // –ó–∞–¥–∞–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏
            const referrals = this.app.gameData.referrals || 0;
            if (referrals >= 1 && !completedTasks.includes('invite_1_friend')) count++;
            if (referrals >= 5 && !completedTasks.includes('invite_5_friends')) count++;
            if (referrals >= 10 && !completedTasks.includes('invite_10_friends')) count++;
            
            // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            const activeTasks = ['subscribe_channel', 'rate_app', 'share_app'];
            activeTasks.forEach(taskId => {
                if (!completedTasks.includes(taskId)) count++;
            });
            
            return count;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
            return 0;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏)
    setCurrentScreen(screenName) {
        this.currentScreen = screenName;
        this.updateActiveState(screenName);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
    getCurrentScreen() {
        return this.currentScreen;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
    isScreenAvailable(screenName) {
        const validScreens = ['main', 'tasks', 'profile'];
        return validScreens.includes(screenName);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    refresh() {
        this.updateBadges();
        this.updateActiveState(this.currentScreen);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    animateTransition(fromScreen, toScreen) {
        try {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
            const fromElement = document.getElementById(`${fromScreen}-screen`);
            const toElement = document.getElementById(`${toScreen}-screen`);
            
            if (fromElement && toElement) {
                // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞—Ç—É—Ö–∞–Ω–∏—è/–ø–æ—è–≤–ª–µ–Ω–∏—è
                fromElement.style.opacity = '0';
                
                setTimeout(() => {
                    fromElement.classList.remove('active');
                    toElement.classList.add('active');
                    toElement.style.opacity = '0';
                    
                    setTimeout(() => {
                        toElement.style.opacity = '1';
                    }, 50);
                }, 150);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞:', error);
            // Fallback –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
            document.querySelectorAll('.screen').forEach(screen => screen.classList.remove('active'));
            const targetScreen = document.getElementById(`${toScreen}-screen`);
            if (targetScreen) targetScreen.classList.add('active');
        }
    }
}