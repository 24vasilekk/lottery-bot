// api.js - HTTP API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å backend

export class APIClient {
    constructor() {
        this.baseURL = window.location.origin;
        this.timeout = 30000;
        this.retryCount = 3;
        this.retryDelay = 1000;
        
        // Rate limiting
        this.requestQueue = new Map(); // endpoint -> timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        this.minRequestInterval = 1000; // –º–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –æ–¥–Ω–æ–º—É endpoint
    }

    async request(method, endpoint, data = null, options = {}) {
        // Rate limiting –ø—Ä–æ–≤–µ—Ä–∫–∞
        const requestKey = `${method}:${endpoint}`;
        const now = Date.now();
        const lastRequestTime = this.requestQueue.get(requestKey);
        
        if (lastRequestTime && now - lastRequestTime < this.minRequestInterval) {
            const waitTime = this.minRequestInterval - (now - lastRequestTime);
            console.log(`‚è∞ Rate limit: –∂–¥–µ–º ${waitTime}ms –¥–ª—è ${requestKey}`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
        }
        
        this.requestQueue.set(requestKey, Date.now());
        
        const url = `${this.baseURL}${endpoint}`;
        const config = {
            method,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            ...options
        };

        if (data && (method === 'POST' || method === 'PUT')) {
            config.body = JSON.stringify(data);
        }

        let lastError;
        
        for (let attempt = 1; attempt <= this.retryCount; attempt++) {
            try {
                console.log(`üì° API Request: ${method} ${endpoint} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
                
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), this.timeout);
                
                const response = await fetch(url, {
                    ...config,
                    signal: controller.signal
                });
                
                clearTimeout(timeoutId);

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({ error: 'Network error' }));
                    
                    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ rate limit
                    if (response.status === 429 || (errorData.error && errorData.error.includes('—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤'))) {
                        const retryAfter = errorData.retryAfter || 5000; // 5 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        console.warn(`‚ö†Ô∏è Rate limit –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –∂–¥–µ–º ${retryAfter}ms`);
                        await new Promise(resolve => setTimeout(resolve, retryAfter));
                        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                        continue;
                    }
                    
                    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
                }

                const result = await response.json();
                console.log(`‚úÖ API Success: ${method} ${endpoint}`);
                return result;
                
            } catch (error) {
                lastError = error;
                console.error(`‚ùå API Error (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, error.message);
                
                if (attempt < this.retryCount && this.shouldRetry(error)) {
                    console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${this.retryDelay}ms...`);
                    await this.delay(this.retryDelay * attempt);
                    continue;
                }
                
                break;
            }
        }
        
        console.error(`‚ùå API Failed after ${this.retryCount} attempts:`, lastError.message);
        throw lastError;
    }

    shouldRetry(error) {
        return error.name === 'AbortError' || 
               error.message.includes('fetch') ||
               error.message.includes('Network');
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // === –û–°–ù–û–í–ù–´–ï HTTP –ú–ï–¢–û–î–´ ===

    async get(endpoint, options = {}) {
        return this.request('GET', endpoint, null, options);
    }

    async post(endpoint, data, options = {}) {
        return this.request('POST', endpoint, data, options);
    }

    async put(endpoint, data, options = {}) {
        return this.request('PUT', endpoint, data, options);
    }

    async delete(endpoint, options = {}) {
        return this.request('DELETE', endpoint, null, options);
    }

    // === API –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    async getUserData(telegramId) {
        return this.get(`/api/user/${telegramId}`);
    }

    async updateUserBalance(telegramId, newBalance) {
        return this.post('/api/user/balance', { telegramId, newBalance });
    }

    // –†—É–ª–µ—Ç–∫–∞
    async spinWheel(telegramId, spinType = 'normal') {
        return this.post('/api/spin', { telegramId, spinType });
    }

    async getWheelSettings(wheelType = 'normal') {
        return this.get(`/api/wheel/settings/${wheelType}`);
    }

    // –ü—Ä–∏–∑—ã
    async getUserPrizes(telegramId) {
        return this.get(`/api/user/${telegramId}/prizes`);
    }

    async claimPrize(telegramId, prizeId) {
        return this.post('/api/user/claim-prize', { telegramId, prizeId });
    }

    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    async getUserTransactions(telegramId) {
        return this.get(`/api/user/${telegramId}/transactions`);
    }

    // –ó–∞–¥–∞–Ω–∏—è
    async getUserTasks(telegramId) {
        return this.get(`/api/user/${telegramId}/tasks`);
    }

    async completeTask(telegramId, taskId) {
        return this.post('/api/task/complete', { telegramId, taskId });
    }

    // –ü–æ–¥–ø–∏—Å–∫–∏
    async checkSubscription(telegramId, channelId) {
        return this.post('/api/subscription/check', { telegramId, channelId });
    }

    // –†–µ—Ñ–µ—Ä–∞–ª—ã
    async getReferralInfo(telegramId) {
        return this.get(`/api/user/${telegramId}/referrals`);
    }

    async getLeaderboard(type = 'stars') {
        return this.get(`/api/leaderboard/${type}`);
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    async getStats() {
        return this.get('/api/stats');
    }

    // –ü—Ä–æ–º–æ–∫–æ–¥—ã
    async usePromoCode(telegramId, promoCode) {
        return this.post('/api/promo/use', { telegramId, promoCode });
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
    async syncBalance(telegramId) {
        return this.get(`/api/user/${telegramId}/balance-sync`);
    }

    // === –ê–î–ú–ò–ù–°–ö–ò–ï API –ú–ï–¢–û–î–´ ===

    async adminGetStats(adminToken) {
        return this.get('/api/admin/stats', {
            headers: { 'admin-token': adminToken }
        });
    }

    async adminUpdateUser(adminToken, telegramId, updateData) {
        return this.post('/api/admin/user/update', 
            { telegramId, ...updateData },
            { headers: { 'admin-token': adminToken } }
        );
    }

    async adminAddStars(adminToken, telegramId, amount) {
        return this.post('/api/admin/user/stars', 
            { telegramId, amount },
            { headers: { 'admin-token': adminToken } }
        );
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
export const api = new APIClient();

// –î–ª—è backward compatibility (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è window.api)
if (typeof window !== 'undefined') {
    window.api = api;
}

console.log('‚úÖ API Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');