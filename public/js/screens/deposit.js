// public/js/screens/deposit.js - Deposit Screen Module (TELEGRAM STARS)

export class DepositScreen {
    constructor(app) {
        this.app = app;
        this.userBalance = 0;
        this.transactionHistory = [];
        this.depositAmounts = [
            { amount: 100, bonus: 0, popular: false },
            { amount: 200, bonus: 0, popular: false },
            { amount: 500, bonus: 25, popular: true },
            { amount: 1000, bonus: 100, popular: false },
            { amount: 2500, bonus: 300, popular: false }
        ];
    }

    render() {
        return `
            <div id="deposit-screen" class="screen">
                <div class="header">
                    <h2>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</h2>
                    <div class="current-balance">
                        <span class="balance-label">–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</span>
                        <span class="balance-amount" id="current-balance">${this.userBalance} ‚≠ê</span>
                    </div>
                </div>

                <div class="deposit-tabs">
                    <button class="deposit-tab active" data-tab="quick">‚ö° –ë—ã—Å—Ç—Ä–æ</button>
                    <button class="deposit-tab" data-tab="custom">‚úèÔ∏è –°—É–º–º–∞</button>
                    <button class="deposit-tab" data-tab="history">üìä –ò—Å—Ç–æ—Ä–∏—è</button>
                </div>

                <div id="quick-deposit" class="deposit-section active">
                    ${this.renderQuickDeposit()}
                </div>

                <div id="custom-deposit" class="deposit-section">
                    ${this.renderCustomDeposit()}
                </div>

                <div id="history-deposit" class="deposit-section">
                    ${this.renderTransactionHistory()}
                </div>

                <div class="deposit-info">
                    <div class="info-card">
                        <h4>‚ÑπÔ∏è –û Telegram Stars</h4>
                        <ul>
                            <li>üí´ 1 Telegram Star = 1 –∏–≥—Ä–æ–≤–∞—è –∑–≤–µ–∑–¥–∞</li>
                            <li>üé∞ 20 –∑–≤–µ–∑–¥ = 1 –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ä—É–ª–µ—Ç–∫–∏</li>
                            <li>üîí –ë—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–µ—Ä–µ–∑ Telegram</li>
                            <li>üéÅ –ë–æ–Ω—É—Å—ã –ø—Ä–∏ –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è—Ö</li>
                        </ul>
                    </div>
                </div>
            </div>
        `;
    }

    renderQuickDeposit() {
        return `
            <div class="quick-deposit-container">
                <h3>üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
                <div class="deposit-options">
                    ${this.depositAmounts.map(option => this.renderDepositOption(option)).join('')}
                </div>
            </div>
        `;
    }

    renderDepositOption(option) {
        const totalAmount = option.amount + option.bonus;
        const popularBadge = option.popular ? '<div class="popular-badge">üî• –ü–æ–ø—É–ª—è—Ä–Ω–æ</div>' : '';
        const bonusBadge = option.bonus > 0 ? `<div class="bonus-badge">+${option.bonus} ‚≠ê –±–æ–Ω—É—Å</div>` : '';
        
        return `
            <div class="deposit-option ${option.popular ? 'popular' : ''}" 
                 onclick="handleDepositOption(${option.amount})">
                ${popularBadge}
                <div class="deposit-amount">${option.amount} ‚≠ê</div>
                ${bonusBadge}
                <div class="deposit-total">–ü–æ–ª—É—á–∏—Ç–µ: ${totalAmount} ‚≠ê</div>
                <div class="deposit-price">${option.amount} Telegram Stars</div>
                <button class="deposit-btn">–ü–æ–ø–æ–ª–Ω–∏—Ç—å</button>
            </div>
        `;
    }

    renderCustomDeposit() {
        return `
            <div class="custom-deposit-container">
                <h3>‚úèÔ∏è –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Å—É–º–º–∞</h3>
                
                <div class="custom-input-group">
                    <label for="custom-amount">–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:</label>
                    <div class="input-wrapper">
                        <input type="number" 
                               id="custom-amount" 
                               min="50" 
                               max="2500" 
                               placeholder="100"
                               class="custom-amount-input">
                        <span class="input-suffix">‚≠ê</span>
                    </div>
                    <div class="input-info">
                        –ú–∏–Ω–∏–º—É–º: 50 ‚≠ê ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 2500 ‚≠ê
                    </div>
                </div>

                <div class="custom-summary" id="custom-summary">
                    <div class="summary-row">
                        <span>–ö –æ–ø–ª–∞—Ç–µ:</span>
                        <span id="custom-pay-amount">0 Telegram Stars</span>
                    </div>
                    <div class="summary-row">
                        <span>–ü–æ–ª—É—á–∏—Ç–µ:</span>
                        <span id="custom-receive-amount">0 ‚≠ê</span>
                    </div>
                </div>

                <button class="custom-deposit-btn" id="custom-deposit-btn" onclick="handleCustomDeposit()" disabled>
                    –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—É–º–º—É
                </button>
            </div>
        `;
    }

    renderTransactionHistory() {
        if (!this.transactionHistory || this.transactionHistory.length === 0) {
            return `
                <div class="history-container">
                    <h3>üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π</h3>
                    <div class="empty-history">
                        <div class="empty-icon">üì≠</div>
                        <p>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞</p>
                        <p>–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>
                    </div>
                </div>
            `;
        }

        return `
            <div class="history-container">
                <h3>üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π</h3>
                <div class="history-list">
                    ${this.transactionHistory.map(transaction => this.renderTransactionItem(transaction)).join('')}
                </div>
            </div>
        `;
    }

    renderTransactionItem(transaction) {
        const date = new Date(transaction.transaction_date);
        const dateStr = date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });

        const statusClass = transaction.status === 'completed' ? 'success' : 
                           transaction.status === 'pending' ? 'pending' : 'failed';
        
        const statusIcon = transaction.status === 'completed' ? '‚úÖ' : 
                          transaction.status === 'pending' ? '‚è≥' : '‚ùå';

        return `
            <div class="transaction-item ${statusClass}">
                <div class="transaction-info">
                    <div class="transaction-amount">+${transaction.amount} ‚≠ê</div>
                    <div class="transaction-date">${dateStr}</div>
                </div>
                <div class="transaction-status">
                    <span class="status-icon">${statusIcon}</span>
                    <span class="status-text">${this.getStatusText(transaction.status)}</span>
                </div>
            </div>
        `;
    }

    getStatusText(status) {
        switch (status) {
            case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
            case 'pending': return '–û–∂–∏–¥–∞–Ω–∏–µ';
            case 'failed': return '–û—à–∏–±–∫–∞';
            case 'refunded': return '–í–æ–∑–≤—Ä–∞—Ç';
            default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    }

    async init() {
        this.setupEventListeners();
        await this.loadUserBalance();
        await this.loadTransactionHistory();
        this.updateDisplay();
        console.log('‚úÖ –≠–∫—Ä–∞–Ω –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        const depositTabs = document.querySelectorAll('.deposit-tab');
        depositTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                this.switchTab(tab.dataset.tab);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
        const customAmountInput = document.getElementById('custom-amount');
        if (customAmountInput) {
            customAmountInput.addEventListener('input', () => {
                this.updateCustomSummary();
            });
        }

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        window.handleDepositOption = (amount) => {
            this.handleDepositOption(amount);
        };

        window.handleCustomDeposit = () => {
            this.handleCustomDeposit();
        };
    }

    switchTab(tabName) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.deposit-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        const targetTab = document.querySelector(`[data-tab="${tabName}"]`);
        if (targetTab) {
            targetTab.classList.add('active');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏
        document.querySelectorAll('.deposit-section').forEach(section => {
            section.classList.remove('active');
        });
        
        const sectionId = `${tabName}-deposit`;
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
            targetSection.classList.add('active');
        }
    }

    async loadUserBalance() {
        try {
            const userData = this.app.getUserData();
            this.userBalance = userData.stars || 0;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
            this.userBalance = 0;
        }
    }

    async loadTransactionHistory() {
        if (!this.app.tg?.initDataUnsafe?.user?.id) return;

        try {
            const userId = this.app.tg.initDataUnsafe.user.id;
            const response = await fetch(`/api/user/${userId}/transactions`);
            const data = await response.json();
            
            if (data.success) {
                this.transactionHistory = data.transactions;
            } else {
                this.transactionHistory = [];
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
            this.transactionHistory = [];
        }
    }

    updateDisplay() {
        const balanceElement = document.getElementById('current-balance');
        if (balanceElement) {
            balanceElement.textContent = `${this.userBalance} ‚≠ê`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        const historySection = document.getElementById('history-deposit');
        if (historySection && historySection.classList.contains('active')) {
            historySection.innerHTML = this.renderTransactionHistory();
        }
    }

    updateCustomSummary() {
        const input = document.getElementById('custom-amount');
        const payAmount = document.getElementById('custom-pay-amount');
        const receiveAmount = document.getElementById('custom-receive-amount');
        const depositBtn = document.getElementById('custom-deposit-btn');

        if (!input || !payAmount || !receiveAmount || !depositBtn) return;

        const amount = parseInt(input.value) || 0;
        const isValid = amount >= 50 && amount <= 2500;

        // –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
        let bonus = 0;
        if (amount >= 2000) bonus = Math.floor(amount * 0.15);
        else if (amount >= 1000) bonus = Math.floor(amount * 0.10);
        else if (amount >= 500) bonus = Math.floor(amount * 0.05);

        const totalReceive = amount + bonus;

        payAmount.textContent = `${amount} Telegram Stars`;
        receiveAmount.textContent = `${totalReceive} ‚≠ê${bonus > 0 ? ` (+ ${bonus} –±–æ–Ω—É—Å)` : ''}`;
        
        depositBtn.disabled = !isValid;
        depositBtn.textContent = isValid 
            ? `–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ ${amount} ‚≠ê` 
            : '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É';
    }

    async handleDepositOption(amount) {
        try {
            console.log(`üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${amount} –∑–≤–µ–∑–¥`);
            
            if (!this.app.tg?.initDataUnsafe?.user?.id) {
                this.app.showStatusMessage('–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            this.app.showStatusMessage('–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã...', 'info');

            const userId = this.app.tg.initDataUnsafe.user.id;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            const response = await fetch('/api/deposit/create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    userId, 
                    amount,
                    userData: this.app.getUserData()
                })
            });

            const result = await response.json();

            if (result.success) {
                this.app.showStatusMessage('–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç —Å –±–æ—Ç–æ–º', 'success');
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –±–æ—Ç–æ–º
                if (this.app.tg && this.app.tg.openTelegramLink) {
                    this.app.tg.openTelegramLink('https://t.me/kosmetichkalottery_bot');
                }
            } else {
                this.app.showStatusMessage(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞', 'error');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
            this.app.showStatusMessage('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞', 'error');
        }
    }

    async handleCustomDeposit() {
        const input = document.getElementById('custom-amount');
        const amount = parseInt(input.value);

        if (amount < 50 || amount > 2500) {
            this.app.showStatusMessage('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 50 –¥–æ 2500 –∑–≤–µ–∑–¥', 'error');
            return;
        }

        await this.handleDepositOption(amount);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞
    async refreshBalance() {
        await this.loadUserBalance();
        await this.loadTransactionHistory();
        this.updateDisplay();
    }

    onPaymentCompleted(amount) {
        this.userBalance += amount;
        this.updateDisplay();
        this.app.showStatusMessage(`–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${amount} ‚≠ê –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`, 'success');
        
        // Haptic feedback
        if (this.app.tg?.HapticFeedback) {
            this.app.tg.HapticFeedback.notificationOccurred('success');
        }
    }
}