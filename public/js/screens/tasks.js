// public/js/screens/tasks.js - Tasks Screen Module (UPDATED FOR CHANNEL SUBSCRIPTIONS)

import { TASKS_CONFIG } from '../config.js';

export class TasksScreen {
    constructor(app) {
        this.app = app;
        this.currentTab = 'channels';
        this.channels = [];
        this.dailyTasks = [];
        this.hotOffers = [];
        this.userBlocked = false;
    }

    render() {
        return `
            <div id="tasks-screen" class="screen">
                <div class="header">
                    <h2>üìã –ó–∞–¥–∞–Ω–∏—è</h2>
                    <div class="task-counter">
                        <span id="completed-tasks-count">${this.getCompletedTasksCount()}</span>/<span id="total-tasks-count">${this.getTotalTasksCount()}</span>
                    </div>
                </div>

                <div class="task-tabs">
                    <button class="task-tab active" data-tab="channels">üì∫ –ö–∞–Ω–∞–ª—ã</button>
                    <button class="task-tab" data-tab="daily">üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ</button>
                    <button class="task-tab" data-tab="referral">üë• –†–µ—Ñ–µ—Ä–∞–ª—ã</button>
                    <button class="task-tab" data-tab="hot">üî• –ê–∫—Ç–∏–≤–Ω—ã–µ</button>
                </div>

                <div id="channels-tasks" class="task-section active">
                    ${this.renderChannelTasks()}
                </div>

                <div id="daily-tasks" class="task-section">
                    ${this.renderDailyTasks()}
                </div>

                <div id="referral-tasks" class="task-section">
                    ${this.renderReferralTasks()}
                </div>

                <div id="hot-tasks" class="task-section">
                    ${this.renderHotOffers()}
                </div>
            </div>
        `;
    }

    async init() {
        this.setupEventListeners();
        await this.loadTasks();
        this.checkDailyReset();
        this.updateTaskCounter();
        console.log('‚úÖ –≠–∫—Ä–∞–Ω –∑–∞–¥–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupEventListeners() {
        // Task tabs
        const taskTabs = document.querySelectorAll('.task-tab');
        taskTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                this.switchTab(tab.dataset.tab);
            });
        });
    }

    switchTab(tabName) {
        this.currentTab = tabName;
        
        // Update tabs
        document.querySelectorAll('.task-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        const targetTab = document.querySelector(`[data-tab="${tabName}"]`);
        if (targetTab) {
            targetTab.classList.add('active');
        }
        
        // Update sections
        document.querySelectorAll('.task-section').forEach(section => {
            section.classList.remove('active');
        });
        
        const sectionId = `${tabName}-tasks`;
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
            targetSection.classList.add('active');
        }
        
        // Refresh content
        this.refreshTabContent(tabName);
    }

    refreshTabContent(tabName) {
        const sectionId = `${tabName}-tasks`;
        const container = document.getElementById(sectionId);
        if (!container) return;
        
        switch (tabName) {
            case 'channels':
                container.innerHTML = this.renderChannelTasks();
                break;
            case 'daily':
                container.innerHTML = this.renderDailyTasks();
                break;
            case 'referral':
                container.innerHTML = this.renderReferralTasks();
                break;
            case 'hot':
                container.innerHTML = this.renderHotOffers();
                break;
        }
        
        // Re-attach event listeners for the new content
        this.attachTaskEventListeners();
    }

    // ===================== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ö–ê–ù–ê–õ–û–í =====================
    
    async loadTasks() {
        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (this.app.tg?.initDataUnsafe?.user?.id) {
                const userId = this.app.tg.initDataUnsafe.user.id;
                const response = await fetch(`/api/tasks/available/${userId}`);
                const data = await response.json();

                if (data.blocked) {
                    this.userBlocked = true;
                    this.blockMessage = data.message;
                    this.banUntil = data.banUntil;
                } else {
                    this.userBlocked = false;
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏
                    this.channels = await this.loadChannelInfo(data.channels || []);
                }
                
                console.log('‚úÖ –ó–∞–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
            } else {
                console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤');
                this.channels = [];
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.refreshTabContent(this.currentTab);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
            this.channels = [];
        }
    }

    renderChannelTasks() {
        if (this.userBlocked) {
            return `
                <div class="blocked-state">
                    <div class="blocked-icon">üö´</div>
                    <h3>–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞</h3>
                    <p>${this.blockMessage}</p>
                    <p>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ: ${new Date(this.banUntil).toLocaleString('ru-RU')}</p>
                </div>
            `;
        }

        if (!this.channels || this.channels.length === 0) {
            return '<div class="empty-state">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏</div>';
        }

        const channelsList = this.channels.map(channel => this.renderChannelTaskItem(channel)).join('');
        
        return `
            <div class="channels-header">
                <button class="check-all-subscriptions-btn" onclick="checkAllSubscriptions()">
                    üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
                </button>
                <div class="channels-info">
                    –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${this.channels.length}
                </div>
            </div>
            <div class="channels-list">
                ${channelsList}
            </div>
        `;
    }

    formatSubscriberCount(count) {
        if (count < 1000) return count.toString();
        if (count < 1000000) return (count / 1000).toFixed(1) + 'K';
        return (count / 1000000).toFixed(1) + 'M';
    }

    truncateText(text, maxLength) {
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength) + '...';
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏
    async loadChannelInfo(channels) {
        const enrichedChannels = [];
        
        for (const channel of channels) {
            try {
                const response = await fetch(`/api/channel-info/${channel.channel_username}`);
                if (response.ok) {
                    const data = await response.json();
                    enrichedChannels.push({
                        ...channel,
                        photo_url: data.channel.photo_url,
                        member_count: data.channel.member_count,
                        description: data.channel.description
                    });
                } else {
                    enrichedChannels.push(channel);
                }
            } catch (error) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ ${channel.channel_username}:`, error);
                enrichedChannels.push(channel);
            }
        }
        
        return enrichedChannels;
    }

    renderChannelTaskItem(channel) {
        const isHot = channel.is_hot_offer && channel.hot_offer_multiplier > 1;
        const reward = Math.floor(channel.reward_stars * (channel.hot_offer_multiplier || 1));
        const hotBadge = isHot ? `<div class="hot-badge">üî• x${channel.hot_offer_multiplier}</div>` : '';
        
        return `
            <div class="channel-task-item ${isHot ? 'hot-offer' : ''}" data-channel-id="${channel.id}">
                ${hotBadge}
                <div class="channel-avatar">
                    ${channel.photo_url ? 
                        `<img src="${channel.photo_url}" 
                             alt="${channel.channel_name}" 
                             class="channel-photo"
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                         <div class="channel-photo-fallback" style="display: none;">üì∫</div>` :
                        `<div class="channel-photo-fallback">üì∫</div>`
                    }
                </div>
                <div class="channel-info">
                    <div class="channel-header">
                        <div class="channel-title">${channel.channel_name}</div>
                        <div class="channel-subscribers">${this.formatSubscriberCount(channel.member_count || 0)}</div>
                    </div>
                    <div class="channel-username">@${channel.channel_username}</div>
                    ${channel.description ? `<div class="channel-description">${this.truncateText(channel.description, 60)}</div>` : ''}
                    <div class="channel-reward">
                        <span class="reward-amount">+${reward}</span>
                        <span class="reward-icon">‚≠ê</span>
                    </div>
                    ${channel.target_subscribers ? 
                        `<div class="progress-bar">
                            <div class="progress-fill" style="width: ${Math.min(100, (channel.current_subscribers / channel.target_subscribers) * 100)}%"></div>
                        </div>
                        <div class="progress-text">${channel.current_subscribers}/${channel.target_subscribers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</div>` 
                        : ''
                    }
                </div>
                <div class="channel-actions">
                    <button class="subscribe-btn" onclick="handleChannelSubscribe('${channel.id}', '${channel.channel_username}')">
                        üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
                    </button>
                </div>
            </div>
        `;
    }

    renderDailyTasks() {
        if (!TASKS_CONFIG.daily) {
            return '<div class="empty-state">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</div>';
        }

        const todayTasks = TASKS_CONFIG.daily.filter(task => !this.isTaskCompleted(task.id));
        
        if (todayTasks.length === 0) {
            return '<div class="empty-state">–í—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! üéâ</div>';
        }
        
        return todayTasks.map(task => this.renderTaskItem(task, 'daily')).join('');
    }


    renderReferralTasks() {
        if (!TASKS_CONFIG.friends) {
            return '<div class="empty-state">–ó–∞–¥–∞–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</div>';
        }

        const referrals = this.app.gameData.referrals || 0;
        const availableTasks = TASKS_CONFIG.friends.filter(task => {
            const isCompleted = this.isTaskCompleted(task.id);
            const hasEnoughReferrals = referrals >= (task.required || 1);
            return !isCompleted;
        });

        let content = `
            <div class="referral-section">
                <div class="referral-stats">
                    <div class="stat-item">
                        <div class="stat-value">${referrals}</div>
                        <div class="stat-label">üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π</div>
                    </div>
                </div>
                
                <div class="referral-link-container">
                    <h4>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</h4>
                    <div class="referral-link">
                        <input type="text" id="referral-link" value="${this.getReferralLink()}" readonly>
                        <button onclick="copyReferralLink()">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                    </div>
                </div>
                
                <div class="referral-description">
                    <p>üí° –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã!</p>
                    <p>‚≠ê –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 100 –∑–≤–µ–∑–¥</p>
                </div>
            </div>
        `;

        if (availableTasks.length > 0) {
            content += '<div class="referral-tasks">';
            content += availableTasks.map(task => this.renderTaskItem(task, 'friends')).join('');
            content += '</div>';
        }

        return content;
    }

    renderHotOffers() {
        if (!TASKS_CONFIG.active) {
            return '<div class="empty-state">–ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</div>';
        }

        const activeTasks = TASKS_CONFIG.active.filter(task => !this.isTaskCompleted(task.id));
        
        if (activeTasks.length === 0) {
            return '<div class="empty-state">–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! üåü</div>';
        }

        return activeTasks.map(task => this.renderTaskItem(task, 'active')).join('');
    }



    renderTaskItem(task, category) {
        const reward = task.reward || { type: 'stars', amount: 0 };
        const rewardText = reward.type === 'stars' ? `+${reward.amount} ‚≠ê` : '–ù–∞–≥—Ä–∞–¥–∞';
        
        const progressText = category === 'friends' && task.required ? 
            `(${this.app.gameData.referrals || 0}/${task.required})` : '';
        
        return `
            <div class="task-item" data-task-id="${task.id}" data-category="${category}">
                <div class="task-icon">${task.icon}</div>
                <div class="task-content">
                    <div class="task-name">${task.name} ${progressText}</div>
                    <div class="task-description">${task.description}</div>
                    <div class="task-reward">${rewardText}</div>
                </div>
                <button class="task-complete-btn" onclick="handleTaskComplete('${task.id}', '${category}')">
                    –í—ã–ø–æ–ª–Ω–∏—Ç—å
                </button>
            </div>
        `;
    }


    attachTaskEventListeners() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞–Ω–∏–π
        window.handleChannelSubscribe = (channelId, channelUsername) => {
            this.handleChannelSubscribe(channelId, channelUsername);
        };

        window.copyReferralLink = () => {
            this.copyReferralLink();
        };

        window.handleTaskComplete = (taskId, category) => {
            this.completeTask(taskId, category);
        };
    }

    completeTask(taskId, category) {
        console.log(`üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: ${taskId} (${category})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω–∏–µ
        if (this.isTaskCompleted(taskId)) {
            this.app.showStatusMessage('–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!', 'info');
            return;
        }

        const task = this.findTask(taskId, category);
        if (!task) {
            console.error('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', taskId);
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        if (!this.app.gameData.completedTasks) {
            this.app.gameData.completedTasks = [];
        }
        this.app.gameData.completedTasks.push(taskId);

        // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
        if (task.reward) {
            if (task.reward.type === 'stars') {
                this.app.gameData.stars += task.reward.amount;
                this.app.showStatusMessage(`–ü–æ–ª—É—á–µ–Ω–æ ${task.reward.amount} ‚≠ê!`, 'success');
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        this.app.saveGameData();
        this.app.updateStarsDisplay();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateTaskCounter();
        this.refreshTabContent(this.currentTab);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±—ç–¥–∂–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (this.app.navigation && this.app.navigation.updateBadges) {
            this.app.navigation.updateBadges();
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
        if (category === 'active') {
            this.handleActiveTask(taskId);
        }

        // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        if (this.app.tg && this.app.tg.HapticFeedback) {
            this.app.tg.HapticFeedback.impactOccurred('medium');
        }

        console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:', taskId);
    }

    // ===================== –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–î–ê–ù–ò–ô =====================

    async handleChannelSubscribe(channelId, channelUsername) {
        try {
            console.log(`üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: ${channelUsername} (ID: ${channelId})`);

            if (!this.app.tg?.initDataUnsafe?.user?.id) {
                this.app.showStatusMessage('–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
                return;
            }

            const userId = this.app.tg.initDataUnsafe.user.id;

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            const channelUrl = `https://t.me/${channelUsername}`;
            if (this.app.tg && this.app.tg.openTelegramLink) {
                this.app.tg.openTelegramLink(channelUrl);
            } else {
                window.open(channelUrl, '_blank');
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            this.app.showStatusMessage('–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"', 'info', 5000);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
            setTimeout(() => {
                this.showSubscriptionCheckButton(channelId, channelUsername, userId);
            }, 2000);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª:', error);
            this.app.showStatusMessage('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª', 'error');
        }
    }

    showSubscriptionCheckButton(channelId, channelUsername, userId) {
        const channelItem = document.querySelector(`[data-channel-id="${channelId}"]`);
        if (!channelItem) return;

        const button = channelItem.querySelector('.subscribe-btn');
        if (!button) return;

        button.textContent = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É';
        button.onclick = () => this.checkAndCompleteSubscription(channelId, channelUsername, userId);
    }

    async checkAndCompleteSubscription(channelId, channelUsername, userId) {
        try {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ –∫–∞–Ω–∞–ª ${channelUsername}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            const checkResponse = await fetch('/api/subscription/check', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId, channelUsername })
            });

            const checkResult = await checkResponse.json();

            if (!checkResult.isSubscribed) {
                this.app.showStatusMessage('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!', 'error');
                return;
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            const completeResponse = await fetch('/api/subscription/complete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    userId, 
                    channelId, 
                    userData: this.app.getUserData() 
                })
            });

            const result = await completeResponse.json();

            if (result.success) {
                this.app.addStars(result.reward);
                this.app.showStatusMessage(`–ü–æ–ª—É—á–µ–Ω–æ ${result.reward} ‚≠ê!`, 'success');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                await this.loadTasks();
                
                // Haptic feedback
                if (this.app.tg?.HapticFeedback) {
                    this.app.tg.HapticFeedback.notificationOccurred('success');
                }
            } else {
                this.app.showStatusMessage(result.error || '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è', 'error');
                if (result.banUntil) {
                    await this.loadTasks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                }
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
            this.app.showStatusMessage('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏', 'error');
        }
    }


    getReferralLink() {
        if (!this.app.tg?.initDataUnsafe?.user?.id) {
            return 'https://t.me/kosmetichka_lottery_bot';
        }

        const userId = this.app.tg.initDataUnsafe.user.id;
        return `https://t.me/kosmetichka_lottery_bot?start=ref_${userId}`;
    }

    copyReferralLink() {
        const linkInput = document.getElementById('referral-link');
        if (linkInput) {
            linkInput.select();
            document.execCommand('copy');
            this.app.showStatusMessage('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
        }
    }

    handleActiveTask(taskId) {
        const task = TASKS_CONFIG.active.find(t => t.id === taskId);
        if (!task) return;

        if (task.url) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            if (this.app.tg && this.app.tg.openLink) {
                this.app.tg.openLink(task.url);
            } else {
                window.open(task.url, '_blank');
            }
        } else if (taskId === 'rate_app') {
            this.app.showStatusMessage('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! üåü', 'success');
        }
    }

    isTaskCompleted(taskId) {
        return (this.app.gameData.completedTasks || []).includes(taskId);
    }

    findTask(taskId, category) {
        try {
            switch (category) {
                case 'daily':
                    return TASKS_CONFIG.daily?.find(t => t.id === taskId);
                case 'friends':
                    return TASKS_CONFIG.friends?.find(t => t.id === taskId);
                case 'active':
                    return TASKS_CONFIG.active?.find(t => t.id === taskId);
                default:
                    return null;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è:', error);
            return null;
        }
    }

    getCompletedTasksList() {
        try {
            const allTasks = [
                ...(TASKS_CONFIG.daily || []),
                ...(TASKS_CONFIG.friends || []),
                ...(TASKS_CONFIG.active || [])
            ];
            
            return allTasks.filter(task => this.isTaskCompleted(task.id));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
            return [];
        }
    }

    getCompletedTasksCount() {
        return (this.app.gameData.completedTasks || []).length;
    }

    getTotalTasksCount() {
        try {
            return (TASKS_CONFIG.daily?.length || 0) + 
                   (TASKS_CONFIG.friends?.length || 0) + 
                   (TASKS_CONFIG.active?.length || 0);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω–∏–π:', error);
            return 0;
        }
    }

    getAvailableTasksCount() {
        try {
            let count = 0;
            const completedTasks = this.app.gameData.completedTasks || [];
            
            // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            const lastDailyReset = this.app.gameData.lastDailyReset || 0;
            const today = new Date().toDateString();
            const lastResetDate = new Date(lastDailyReset).toDateString();
            
            if (today !== lastResetDate) {
                count += (TASKS_CONFIG.daily || []).filter(task => !completedTasks.includes(task.id)).length;
            }
            
            // –ó–∞–¥–∞–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏
            const referrals = this.app.gameData.referrals || 0;
            const friendTasks = TASKS_CONFIG.friends || [];
            
            friendTasks.forEach(task => {
                const requiredFriends = task.required || 1;
                if (referrals >= requiredFriends && !completedTasks.includes(task.id)) {
                    count++;
                }
            });
            
            // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            const activeTasks = TASKS_CONFIG.active || [];
            activeTasks.forEach(task => {
                if (!completedTasks.includes(task.id)) {
                    count++;
                }
            });
            
            return count;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
            return 0;
        }
    }

    updateTaskCounter() {
        try {
            const completedEl = document.getElementById('completed-tasks-count');
            const totalEl = document.getElementById('total-tasks-count');
            
            if (completedEl) {
                completedEl.textContent = this.getCompletedTasksCount();
            }
            if (totalEl) {
                totalEl.textContent = this.getTotalTasksCount();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π:', error);
        }
    }

    updateTasks() {
        this.updateTaskCounter();
        this.refreshTabContent(this.currentTab);
        this.attachTaskEventListeners();
    }

    checkDailyReset() {
        try {
            const now = new Date();
            const lastReset = this.app.gameData.lastDailyReset ? 
                new Date(this.app.gameData.lastDailyReset) : 
                new Date(0);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∏ –ª–∏ —Å—É—Ç–∫–∏
            if (now.toDateString() !== lastReset.toDateString()) {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
                const dailyTaskIds = (TASKS_CONFIG.daily || []).map(task => task.id);
                this.app.gameData.completedTasks = (this.app.gameData.completedTasks || [])
                    .filter(taskId => !dailyTaskIds.includes(taskId));
                
                this.app.gameData.lastDailyReset = now.getTime();
                this.app.saveGameData();
                
                console.log('üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±—Ä–æ—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
window.handleChannelSubscribe = async function(channelId, channelUsername) {
    try {
        const channelUrl = `https://t.me/${channelUsername}`;
        
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.openTelegramLink(channelUrl);
        } else {
            window.open(channelUrl, '_blank');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (window.app) {
            window.app.showStatusMessage('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"', 'info');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞:', error);
    }
};

window.checkAllSubscriptions = async function() {
    try {
        if (!window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
            alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        
        const userId = window.Telegram.WebApp.initDataUnsafe.user.id;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const button = document.querySelector('.check-all-subscriptions-btn');
        const originalText = button.textContent;
        button.textContent = '‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º...';
        button.disabled = true;
        
        const response = await fetch('/api/check-user-subscriptions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ userId })
        });
        
        const data = await response.json();
        
        if (data.success) {
            let message = `–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n`;
            message += `–ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${data.newSubscriptions}\n`;
            if (data.totalReward > 0) {
                message += `–ü–æ–ª—É—á–µ–Ω–æ –∑–≤–µ–∑–¥: ${data.totalReward} ‚≠ê`;
            }
            
            alert(message);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if (window.app && data.totalReward > 0) {
                window.app.gameData.stars = (window.app.gameData.stars || 0) + data.totalReward;
                window.app.saveGameData();
                window.app.updateUI();
            }
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
            if (window.app?.currentScreen?.loadTasks) {
                await window.app.currentScreen.loadTasks();
            }
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: ' + data.error);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫');
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        const button = document.querySelector('.check-all-subscriptions-btn');
        if (button) {
            button.textContent = originalText;
            button.disabled = false;
        }
    }
};