// public/js/screens/tasks.js - Tasks Screen Module (FIXED COPY FUNCTION)

import { TASKS_CONFIG } from '../config.js';

export class TasksScreen {
    constructor(app) {
        this.app = app;
        this.currentTab = 'referral';
        this.channels = [];
        this.dailyTasks = [];
        this.hotOffers = [];
        this.userBlocked = false;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º
        window.tasksScreen = this;
        console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ window.tasksScreen —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
    formatTimeRemaining(endDate) {
        if (!endDate) return null;
        
        const end = new Date(endDate);
        const now = new Date();
        const diff = end - now;
        
        if (diff <= 0) return '–ò—Å—Ç–µ–∫–ª–æ';
        
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        
        if (days > 0) {
            return `${days}–¥ ${hours}—á`;
        }
        if (hours > 0) {
            return `${hours}—á ${minutes}–º`;
        }
        if (minutes > 0) {
            return `${minutes}–º`;
        }
        return '–ú–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã';
    }

    render() {
        return `
            <div id="tasks-screen" class="screen">
                <!-- –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Header -->
                <div class="tasks-header-profile">
                    <div class="tasks-avatar">
                        üìã
                    </div>
                    <div class="tasks-info">
                        <h2 class="tasks-title">–ó–∞–¥–∞–Ω–∏—è</h2>
                    </div>
                </div>

                <!-- Tabs - —Ç–æ–ª—å–∫–æ –†–µ—Ñ–µ—Ä–∞–ª—ã –∏ –ê–∫—Ç–∏–≤–Ω—ã–µ -->
                <div class="task-tabs-profile">
                    <button class="task-tab-profile active" data-tab="referral">
                        <div class="tab-text">–†–µ—Ñ–µ—Ä–∞–ª—ã</div>
                    </button>
                    <button class="task-tab-profile" data-tab="hot">
                        <div class="tab-text">–ê–∫—Ç–∏–≤–Ω—ã–µ</div>
                    </button>
                </div>

                <!-- Content sections -->
                <div class="task-content">
                    <div id="referral-tasks" class="task-section active">
                        ${this.renderReferralTasks()}
                    </div>

                    <div id="hot-tasks" class="task-section">
                        ${this.renderHotOffers()}
                    </div>
                </div>
            </div>
        `;
    }

    async init() {
        console.log('üéØ [INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TasksScreen...');
        console.log('üéØ [INIT] this.app —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!this.app);
        console.log('üéØ [INIT] this.app.gameData —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!this.app?.gameData);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –µ—â–µ —Ä–∞–∑ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        window.tasksScreen = this;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ app —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!this.app) {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: this.app –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ init()');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ gameData —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!this.app.gameData) {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: this.app.gameData –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ init()');
            console.log('üîß –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É gameData...');
            this.app.gameData = {
                stars: 0,
                taskStatuses: {},
                completedTasks: [],
                referrals: 0,
                totalSpins: 0
            };
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!this.app.gameData.taskStatuses) {
            this.app.gameData.taskStatuses = {};
        }
        if (!this.app.gameData.completedTasks) {
            this.app.gameData.completedTasks = [];
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤–µ–∑–¥—ã –≤ 0
        // –ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –¢–û–õ–¨–ö–û –∏–∑ –ë–î —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        if (this.app.gameData.stars === undefined || this.app.gameData.stars === null) {
            console.log('‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ë–î');
            // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 - –æ—Å—Ç–∞–≤–ª—è–µ–º undefined –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        }
        
        console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π. –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', {
            stars: this.app.gameData.stars,
            completedTasks: this.app.gameData.completedTasks,
            taskStatuses: this.app.gameData.taskStatuses
        });
        
        this.setupEventListeners();
        await this.loadTasks();
        this.checkDailyReset();
        this.updateTaskCounter();
        this.startTimerUpdates();
        console.log('‚úÖ –≠–∫—Ä–∞–Ω –∑–∞–¥–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupEventListeners() {
        // Task tabs
        const taskTabs = document.querySelectorAll('.task-tab-profile');
        taskTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                this.switchTab(tab.dataset.tab);
            });
        });
    }

    switchTab(tabName) {
        this.currentTab = tabName;
        
        // Update tabs
        document.querySelectorAll('.task-tab-profile').forEach(tab => {
            tab.classList.remove('active');
        });
        
        const targetTab = document.querySelector(`[data-tab="${tabName}"]`);
        if (targetTab) {
            targetTab.classList.add('active');
        }
        
        // Update sections
        document.querySelectorAll('.task-section').forEach(section => {
            section.classList.remove('active');
        });
        
        const sectionId = `${tabName}-tasks`;
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
            targetSection.classList.add('active');
        }
        
        // Refresh content
        this.refreshTabContent(tabName);
    }

    refreshTabContent(tabName) {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏: ${tabName}`);
        
        const sectionId = `${tabName}-tasks`;
        const container = document.getElementById(sectionId);
        
        if (!container) {
            console.error(`‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ${sectionId}`);
            return;
        }
        
        console.log(`üìã –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${sectionId}`);
        
        switch (tabName) {
            case 'referral':
                container.innerHTML = this.renderReferralTasks();
                break;
            case 'hot':
                console.log(`üî• –†–µ–Ω–¥–µ—Ä–∏–º –≥–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–∞–Ω–∞–ª–æ–≤: ${this.channels?.length || 0}`);
                container.innerHTML = this.renderHotOffers();
                break;
        }
        
        // Re-attach event listeners for the new content
        this.attachTaskEventListeners();
    }

    // ===================== –ú–ï–¢–û–î–´ –†–ï–ù–î–ï–†–ò–ù–ì–ê =====================

    renderReferralTasks() {
        const referralLink = this.getReferralLink();
        const friendsInvited = this.getActualReferralsCount();

        return `
            <!-- –ü–û–õ–ù–û–®–ò–†–ò–ù–ù–´–ô –ë–õ–û–ö –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò -->
            <div class="referral-full-width-block">
                <h3 class="referral-center-title">–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</h3>
                
                <div class="referral-link-wrapper">
                    <input type="text" 
                           id="referral-link" 
                           class="referral-input-full" 
                           value="${referralLink}" 
                           readonly>
                    <button class="copy-btn-referral" onclick="window.tasksScreen.copyReferralLink()">
                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                </div>

                <div class="friends-counter">
                    <span class="friends-number">${friendsInvited}</span>
                    <span class="friends-text">–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π</span>
                </div>
            </div>

            <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
            <div class="task-section-header">
                <div class="section-info">
                    <h3>üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π</h3>
                    <p>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 20 ‚≠ê –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞</p>
                </div>
            </div>
        `;
    }

    renderHotOffers() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        if (!this.channels || this.channels.length === 0) {
            return `
                <div class="task-section-empty">
                    <div class="empty-icon">üî•</div>
                    <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</h3>
                    <p>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏</p>
                </div>
            `;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const activeTasks = this.channels;
        
        if (activeTasks.length === 0) {
            return `
                <div class="task-section-empty">
                    <div class="empty-icon">üî•</div>
                    <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</h3>
                    <p>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏</p>
                </div>
            `;
        }

        console.log(`üìã –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ${activeTasks.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π`);

        return `
            <div class="task-section-header">
                <div class="section-info">
                    <h3>üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h3>
                    <p>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏</p>
                </div>
            </div>
            
            <div class="task-cards-grid">
                ${activeTasks.map(task => this.renderActiveTaskCard(task)).join('')}
            </div>
        `;
    }

    renderActiveTaskCard(task) {
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞ –∏–∑ –ë–î –∫ —Ñ–æ—Ä–º–∞—Ç—É –∑–∞–¥–∞–Ω–∏—è
        const taskId = `channel_${task.id}`;
        const taskStatus = this.getTaskStatus(taskId);
        const isCompleted = this.isTaskCompleted(taskId);
        
        console.log(`üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–Ω–∞–ª–∞ ${task.channel_username}: —Å—Ç–∞—Ç—É—Å=${taskStatus}, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ=${isCompleted}`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞
        const channelTask = {
            id: taskId,
            type: 'subscription',
            channelUsername: task.channel_username,
            name: task.channel_name || task.channel_username,
            reward: {
                type: 'stars',
                amount: task.reward_stars || 10
            },
            description: task.is_hot_offer ? 'üî• –ì–û–†–Ø–ß–ï–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï! –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!' : '–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª',
            endDate: task.end_date // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        };
        
        const timeRemaining = this.formatTimeRemaining(task.end_date);
        
        return `
            <div class="task-card active-task-new ${taskStatus === 'completed' ? 'completed' : ''} ${task.is_hot_offer ? 'hot-offer' : ''}" data-task-id="${taskId}" data-status="${taskStatus}" ${task.end_date ? `data-end-date="${task.end_date}"` : ''}>
                <div class="task-content-grid">
                    <div class="task-left">
                        <div class="channel-header">
                            ${task.channel_avatar_url ? 
                                `<img src="${task.channel_avatar_url}" alt="Avatar" class="channel-avatar" onerror="this.style.display='none'">` : 
                                '<div class="channel-avatar-placeholder">üì∫</div>'
                            }
                            <div class="channel-info">
                                <div class="channel-title">${task.channel_name || task.channel_username}</div>
                                <div class="channel-username">@${task.channel_username}</div>
                            </div>
                        </div>
                        <div class="task-reward-info">+${task.reward_stars} ‚≠ê</div>
                        ${timeRemaining ? `
                            <div class="task-timer-container">
                                <div class="timer-icon">‚è∞</div>
                                <div class="timer-text">${timeRemaining}</div>
                            </div>
                        ` : ''}
                    </div>
                    <div class="task-right">
                        <div class="task-desc">
                            ${task.channel_description || channelTask.description}
                        </div>
                        <div class="task-action">
                            ${this.renderTaskButton(channelTask, taskStatus)}
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    renderTaskButton(task, status) {
        console.log(`üîò –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${task.id}, —Å—Ç–∞—Ç—É—Å: ${status}`);
        
        switch (status) {
            case 'completed':
                return `<div class="task-completed-status">
                    ‚úÖ –°–¥–µ–ª–∞–Ω–æ
                </div>`;
            
            case 'checking':
                return `<button class="task-checking-btn" disabled>
                    ‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞...
                </button>`;
            
            case 'ready_to_check':
                return `<button class="task-ready-btn" onclick="(function() { 
                    const ts = window.tasksScreen; 
                    if (ts && ts.app) {
                        console.log('[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º - app:', !!ts.app, 'gameData:', !!ts.app.gameData);
                        ts.performTaskCheckById('${task.id}');
                    } else {
                        console.error('[DEBUG] window.tasksScreen –∏–ª–∏ app –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
                        alert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
                    }
                })()">
                    üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                </button>`;
            
            case 'pending':
            default:
                return `<button class="task-complete-btn" onclick="(function() { 
                    const ts = window.tasksScreen; 
                    if (ts && ts.app && ts.app.gameData) {
                        console.log('[DEBUG] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ - app:', !!ts.app, 'gameData:', !!ts.app.gameData);
                        ts.startTaskCheck('${task.id}', 'active');
                    } else {
                        console.error('[DEBUG] window.tasksScreen, app –∏–ª–∏ gameData –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
                        alert('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
                    }
                })()">
                    –í—ã–ø–æ–ª–Ω–∏—Ç—å
                </button>`;
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ onclick
    performTaskCheckById(taskId) {
        console.log(`üéØ [DEBUG] performTaskCheckById –≤—ã–∑–≤–∞–Ω –¥–ª—è: ${taskId}`);
        console.log(`üéØ [DEBUG] this:`, this);
        console.log(`üéØ [DEBUG] this.app —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:`, !!this.app);
        console.log(`üéØ [DEBUG] this.app.gameData —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:`, !!this.app?.gameData);
        
        const task = this.findTask(taskId, 'active');
        if (task) {
            this.performTaskCheck(taskId, task);
        } else {
            console.error('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', taskId);
            this.showMessage('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error');
        }
    }

    // ===================== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø =====================

    copyReferralLink() {
        console.log('üîó –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏');
        
        const linkInput = document.getElementById('referral-link');
        if (!linkInput) {
            console.error('‚ùå –ü–æ–ª–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            this.showMessage('–û—à–∏–±–∫–∞: –ø–æ–ª–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        const actualLink = this.getReferralLink();
        console.log('üîó –ö–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É:', actualLink);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ
        linkInput.value = actualLink;

        // –í—ã–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        linkInput.focus();
        linkInput.select();
        linkInput.setSelectionRange(0, 99999); // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        try {
            // –ü—Ä–æ–±—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API
            if (navigator.clipboard && window.isSecureContext) {
                navigator.clipboard.writeText(actualLink).then(() => {
                    console.log('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ Clipboard API');
                    this.showMessage('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
                    this.updateCopyButtonSuccess();
                }).catch(err => {
                    console.warn('‚ö†Ô∏è Clipboard API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', err);
                    this.fallbackCopy(actualLink);
                });
            } else {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                console.log('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
                this.fallbackCopy(actualLink);
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            this.showMessage('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
        }
    }

    fallbackCopy(text) {
        try {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            const textArea = document.createElement("textarea");
            textArea.value = text;
            textArea.style.position = "fixed";
            textArea.style.left = "-999999px";
            textArea.style.top = "-999999px";
            document.body.appendChild(textArea);
            
            textArea.focus();
            textArea.select();
            
            const successful = document.execCommand('copy');
            document.body.removeChild(textArea);
            
            if (successful) {
                console.log('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ execCommand');
                this.showMessage('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
                this.updateCopyButtonSuccess();
            } else {
                console.error('‚ùå execCommand –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
                this.showMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 'error');
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ fallback –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            this.showMessage('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
        }
    }

    updateCopyButtonSuccess() {
        const btn = document.querySelector('.copy-btn-referral');
        if (!btn) return;

        const originalText = btn.innerHTML;
        const originalStyle = btn.style.background;

        btn.innerHTML = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
        btn.style.background = 'linear-gradient(135deg, #4CAF50, #45a049)';

        setTimeout(() => {
            btn.innerHTML = originalText;
            btn.style.background = originalStyle;
        }, 2000);
    }

    showMessage(message, type = 'info', duration) {
        if (this.app && this.app.showStatusMessage) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            let messageDuration = duration;
            if (!messageDuration) {
                switch (type) {
                    case 'error':
                        messageDuration = 6000; // 6 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—à–∏–±–æ–∫
                        break;
                    case 'success':
                        messageDuration = 4000; // 4 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —É—Å–ø–µ—Ö–∞
                        break;
                    default:
                        messageDuration = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                }
            }
            
            this.app.showStatusMessage(message, type, messageDuration);
        } else {
            // Fallback - –ø—Ä–æ—Å—Ç–æ–π alert
            alert(message);
        }
    }

    // ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====================

    attachTaskEventListeners() {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        window.tasksScreen = this;
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
        window.handleChannelSubscribe = (channelId, channelUsername) => {
            this.handleChannelSubscribe(channelId, channelUsername);
        };

        window.checkChannelSubscription = (channelId, channelUsername) => {
            this.checkChannelSubscription(channelId, channelUsername);
        };

        window.checkAllSubscriptions = () => {
            this.checkAllSubscriptions();
        };
    }

    async loadTasks() {
        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (this.app.tg?.initDataUnsafe?.user?.id) {
                const userId = this.app.tg.initDataUnsafe.user.id;
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞–Ω–∏–π
                try {
                    const userResponse = await fetch(`/api/user/${userId}`);
                    if (userResponse.ok) {
                        const userData = await userResponse.json();
                        
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        if (userData.task_statuses !== undefined) {
                            console.log('üîç [–ó–ê–ì–†–£–ó–ö–ê] task_statuses —Å —Å–µ—Ä–≤–µ—Ä–∞:', userData.task_statuses);
                            console.log('üîç [–ó–ê–ì–†–£–ó–ö–ê] –¢–∏–ø task_statuses:', typeof userData.task_statuses);
                            
                            // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ - –ø–∞—Ä—Å–∏–º JSON, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            let taskStatuses;
                            if (typeof userData.task_statuses === 'string') {
                                try {
                                    taskStatuses = JSON.parse(userData.task_statuses);
                                } catch (e) {
                                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ task_statuses:', e);
                                    taskStatuses = {};
                                }
                            } else if (typeof userData.task_statuses === 'object' && userData.task_statuses !== null) {
                                taskStatuses = userData.task_statuses;
                            } else {
                                taskStatuses = {};
                            }
                            
                            this.app.gameData.taskStatuses = taskStatuses;
                            console.log('‚úÖ [–ó–ê–ì–†–£–ó–ö–ê] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã taskStatuses:', this.app.gameData.taskStatuses);
                        }
                        if (userData.completed_tasks !== undefined) {
                            console.log('üîç [–ó–ê–ì–†–£–ó–ö–ê] completed_tasks —Å —Å–µ—Ä–≤–µ—Ä–∞:', userData.completed_tasks);
                            console.log('üîç [–ó–ê–ì–†–£–ó–ö–ê] –¢–∏–ø completed_tasks:', typeof userData.completed_tasks);
                            
                            // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ - –ø–∞—Ä—Å–∏–º JSON, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            let completedTasks;
                            if (typeof userData.completed_tasks === 'string') {
                                try {
                                    completedTasks = JSON.parse(userData.completed_tasks);
                                } catch (e) {
                                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ completed_tasks:', e);
                                    completedTasks = [];
                                }
                            } else if (Array.isArray(userData.completed_tasks)) {
                                completedTasks = userData.completed_tasks;
                            } else {
                                completedTasks = [];
                            }
                            
                            this.app.gameData.completedTasks = completedTasks;
                            console.log('‚úÖ [–ó–ê–ì–†–£–ó–ö–ê] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã completedTasks:', this.app.gameData.completedTasks);
                        }
                        if (userData.stars !== undefined) {
                            this.app.gameData.stars = userData.stars;
                        }
                        
                        console.log('üì• –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞:', {
                            completedTasks: this.app.gameData.completedTasks,
                            taskStatuses: this.app.gameData.taskStatuses,
                            stars: this.app.gameData.stars
                        });
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
                        this.app.saveGameData();
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        if (this.app.updateStarsDisplay) {
                            this.app.updateStarsDisplay();
                        }
                    }
                } catch (userLoadError) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userLoadError);
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
                const response = await fetch(`/api/tasks/available/${userId}`);
                const data = await response.json();

                if (data.blocked) {
                    this.userBlocked = true;
                    this.blockMessage = data.message;
                    this.banUntil = data.banUntil;
                } else {
                    this.userBlocked = false;
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏
                    this.channels = await this.loadChannelInfo(data.channels || []);
                }
                
                console.log('‚úÖ –ó–∞–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
            } else {
                console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤');
                this.channels = [];
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.refreshTabContent(this.currentTab);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
            this.channels = [];
        }
    }

    async loadChannelInfo(channels) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤–∞—Ç–∞—Ä–∞—Ö –∫–∞–Ω–∞–ª–æ–≤
        return channels.map(channel => ({
            ...channel,
            avatar_url: channel.photo_url || null
        }));
    }

    getReferralLink() {
        if (!this.app.tg?.initDataUnsafe?.user?.id) {
            return 'https://t.me/kosmetichkalottery_bot?start=ref_demo';
        }

        const userId = this.app.tg.initDataUnsafe.user.id;
        return `https://t.me/kosmetichkalottery_bot?start=ref_${userId}`;
    }

    // ===================== –õ–û–ì–ò–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ù–ò–ô (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø) =====================

    getTaskStatus(taskId) {
        if (!this.app.gameData.taskStatuses) {
            this.app.gameData.taskStatuses = {};
        }
        
        return this.app.gameData.taskStatuses[taskId] || 'pending';
    }

    setTaskStatus(taskId, status) {
        try {
            if (!this.app || !this.app.gameData) {
                console.error('‚ùå App –∏–ª–∏ gameData –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å readonly –æ—à–∏–±–æ–∫
            const currentStatuses = this.app.gameData.taskStatuses || {};
            const newStatuses = { ...currentStatuses };
            newStatuses[taskId] = status;
            
            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            this.app.gameData.taskStatuses = newStatuses;
            this.app.saveGameData();
            console.log(`üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è ${taskId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${status}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ setTaskStatus:', error);
            throw error;
        }
    }

    async startTaskCheck(taskId, category) {
        console.log(`üéØ [DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–¥–∞–Ω–∏—è: ${taskId} (${category})`);
        console.log(`üéØ [DEBUG] this.app —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:`, !!this.app);
        console.log(`üéØ [DEBUG] this.app.gameData —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:`, !!this.app?.gameData);
        console.log(`üéØ [DEBUG] this.app.tg —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:`, !!this.app?.tg);
        console.log(`üéØ [DEBUG] channels –∑–∞–≥—Ä—É–∂–µ–Ω—ã:`, !!this.channels && this.channels.length);
        
        try {
            if (!this.app) {
                console.error('‚ùå [DEBUG] App –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ startTaskCheck');
                this.showMessage('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É', 'error');
                return;
            }
            
            if (!this.app.gameData) {
                console.error('‚ùå [DEBUG] gameData –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                this.showMessage('–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É', 'error');
                return;
            }
            
            const task = this.findTask(taskId, category);
            console.log(`üéØ [DEBUG] –ù–∞–π–¥–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:`, task);
            
            if (!task) {
                console.error('‚ùå [DEBUG] –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', taskId, '–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category);
                console.error('‚ùå [DEBUG] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:', this.channels?.map(c => `channel_${c.id}`) || '–Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤');
                this.showMessage('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error');
                return;
            }

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
        if (task.type === 'subscription' && task.channelUsername) {
            const channelUrl = `https://t.me/${task.channelUsername}`;
            console.log(`üîó –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –≤ Telegram: ${channelUrl}`);
            
            // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
            let opened = false;
            
            try {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ Telegram
                if (this.app.tg && this.app.tg.openTelegramLink) {
                    console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º openTelegramLink');
                    this.app.tg.openTelegramLink(channelUrl);
                    opened = true;
                } else if (this.app.tg && this.app.tg.openLink) {
                    console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º openLink');  
                    this.app.tg.openLink(channelUrl);
                    opened = true;
                } else {
                    console.log('üì± Fallback –∫ window.open');
                    window.open(channelUrl, '_blank');
                    opened = true;
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:', error);
                // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –∫–∞–Ω–∞–ª –º–æ–≥ –æ—Ç–∫—Ä—ã—Ç—å—Å—è
            }
            
            // –í—Å–µ–≥–¥–∞ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª catch)
            // –¢–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥—ã Telegram –Ω–µ –≤—Å–µ–≥–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            console.log('‚úÖ –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ ready_to_check');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            this.showMessage('üì± –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã', 'success');
            
            // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" 
            this.setTaskStatus(taskId, 'ready_to_check');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É 
            const activeTab = document.querySelector('.task-tab-profile.active');
            const tabName = activeTab?.dataset?.tab || this.currentTab;
            console.log(`üìç –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞: ${tabName}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –≤–∫–ª–∞–¥–∫–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
            if (tabName === 'hot') {
                this.refreshTabContent('hot');
            }
            
            return;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–¥–∞–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –∏–ª–∏ —É–∂–µ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ
        this.performTaskCheck(taskId, task);
        
        } catch (error) {
            console.error('‚ùå [DEBUG] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ startTaskCheck:', {
                error: error,
                message: error?.message,
                stack: error?.stack,
                taskId: taskId,
                category: category,
                appExists: !!this.app,
                gameDataExists: !!this.app?.gameData,
                tgExists: !!this.app?.tg,
                channelsLength: this.channels?.length || 0
            });
            this.showMessage(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: ${error?.message || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
        }
    }

    async performTaskCheck(taskId, task) {
        console.log(`üîç [DEBUG] –ù–∞—á–∏–Ω–∞–µ–º performTaskCheck –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: ${taskId}`);
        console.log(`üîç [DEBUG] –û–±—ä–µ–∫—Ç –∑–∞–¥–∞–Ω–∏—è:`, task);
        
        try {
            // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ø—Ä–æ–≤–µ—Ä–∫–∞"
            console.log(`üîç [DEBUG] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'checking' –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${taskId}`);
            this.setTaskStatus(taskId, 'checking');
            this.refreshTabContent(this.currentTab);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞
            this.showMessage('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è...', 'info');

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            setTimeout(async () => {
                try {
                    console.log(`üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è...`);
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                    const checkResult = await this.checkTaskCompletion(task);
                    console.log(`üîç [DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:`, checkResult);
                
                if (checkResult.success) {
                    // –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
                    this.setTaskStatus(taskId, 'completed');
                    
                    // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∏
                    if (!this.isTaskCompleted(taskId)) {
                        this.addTaskToCompleted(taskId);
                        
                        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥
                        const rewardAmount = await this.giveTaskReward(task);
                        this.showMessage(`üéâ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ ${rewardAmount} ‚≠ê!`, 'success');
                        
                        console.log(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ ${taskId} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${rewardAmount} –∑–≤–µ–∑–¥`);
                    } else {
                        this.showMessage('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ', 'info');
                    }
                    
                    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    if (this.app.tg?.HapticFeedback) {
                        this.app.tg.HapticFeedback.notificationOccurred('success');
                    }
                } else {
                    // –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                    this.setTaskStatus(taskId, task.type === 'channel_subscription' ? 'ready_to_check' : 'pending');
                    this.showMessage(checkResult.error || '–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', 'error');
                    
                    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    if (this.app.tg?.HapticFeedback) {
                        this.app.tg.HapticFeedback.notificationOccurred('error');
                    }
                }
                } catch (error) {
                    console.error('‚ùå [DEBUG] –û—à–∏–±–∫–∞ –≤ setTimeout performTaskCheck:', {
                        error: error,
                        message: error?.message,
                        stack: error?.stack,
                        taskId: taskId
                    });
                    this.setTaskStatus(taskId, 'pending');
                    this.showMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è: ${error?.message || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                this.refreshTabContent(this.currentTab);
                this.updateTaskCounter();
            }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–ü—Ä–æ–≤–µ—Ä–∫–∞"
            
        } catch (error) {
            console.error('‚ùå [DEBUG] –û—à–∏–±–∫–∞ –≤ performTaskCheck:', {
                error: error,
                message: error?.message,
                stack: error?.stack,
                taskId: taskId
            });
            this.showMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è: ${error?.message || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
        }
    }

    async checkTaskCompletion(task) {
        console.log(`‚úÖ [DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:`, task);
        
        try {
            const userId = this.app.tg?.initDataUnsafe?.user?.id;
            console.log(`‚úÖ [DEBUG] ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, userId);
            console.log(`‚úÖ [DEBUG] this.app.tg:`, !!this.app.tg);
            console.log(`‚úÖ [DEBUG] initDataUnsafe:`, !!this.app.tg?.initDataUnsafe);
            
            if (!userId) {
                console.log(`‚ùå [DEBUG] –ù–µ—Ç userId, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É`);
                return { success: false, error: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã' };
            }

            // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
            if (task.type === 'subscription' && task.channelUsername) {
                console.log(`üì∫ [DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: ${task.channelUsername}`);
                return await this.checkChannelSubscriptionStatus(userId, task.channelUsername);
            }
            
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª)
            if (task.type === 'external_action' && task.url) {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (—Å–æ—Ü—Å–µ—Ç–∏, –æ—Ü–µ–Ω–∫–∏ –∏ —Ç.–¥.)
                if (this.app.tg?.openLink) {
                    this.app.tg.openLink(task.url);
                } else {
                    window.open(task.url, '_blank');
                }
                
                // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π —Å—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ (–Ω–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
                return { success: true };
            }

            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
            return { success: true };
        } catch (error) {
            console.error('‚ùå [DEBUG] –û—à–∏–±–∫–∞ –≤ checkTaskCompletion:', {
                error: error,
                message: error?.message,
                stack: error?.stack,
                task: task
            });
            return { success: false, error: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è: ${error?.message || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` };
        }
    }

    async checkChannelSubscriptionStatus(userId, channelUsername) {
        try {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ –∫–∞–Ω–∞–ª ${channelUsername}`);
            
            const response = await fetch('/api/check-subscription', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    userId: userId,
                    channelUsername: channelUsername
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const result = await response.json();
            
            if (result.success && result.isSubscribed) {
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª');
                return { success: true };
            } else {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª');
                return { 
                    success: false, 
                    error: result.error || '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' 
                };
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
            return { 
                success: false, 
                error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
            };
        }
    }

    addTaskToCompleted(taskId) {
        console.log(`üéØ [–°–û–•–†–ê–ù–ï–ù–ò–ï] –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ: ${taskId}`);
        console.log(`üîç [–°–û–•–†–ê–ù–ï–ù–ò–ï] –¢–µ–∫—É—â–∏–µ completedTasks:`, this.app.gameData.completedTasks);
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ completedTasks –≤—Å–µ–≥–¥–∞ –º–∞—Å—Å–∏–≤
        if (!Array.isArray(this.app.gameData.completedTasks)) {
            console.log(`‚ö†Ô∏è [–°–û–•–†–ê–ù–ï–ù–ò–ï] completedTasks –Ω–µ –º–∞—Å—Å–∏–≤, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º`);
            this.app.gameData.completedTasks = [];
        }
        
        if (!this.app.gameData.completedTasks.includes(taskId)) {
            this.app.gameData.completedTasks.push(taskId);
            console.log(`‚úÖ [–°–û–•–†–ê–ù–ï–ù–ò–ï] –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:`, this.app.gameData.completedTasks);
            this.app.saveGameData();
            console.log(`üíæ [–°–û–•–†–ê–ù–ï–ù–ò–ï] –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${taskId}`);
        } else {
            console.log(`‚ÑπÔ∏è [–°–û–•–†–ê–ù–ï–ù–ò–ï] –ó–∞–¥–∞–Ω–∏–µ ${taskId} —É–∂–µ –±—ã–ª–æ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö`);
        }
    }

    async giveTaskReward(task) {
        console.log(`üí∞ [DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ:`, task);
        
        if (!task.reward || task.reward.type !== 'stars') {
            console.log(`üí∞ [DEBUG] –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –∑–≤–µ–∑–¥—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0`);
            return 0;
        }

        const rewardAmount = task.reward.amount;
        const userId = this.app.tg?.initDataUnsafe?.user?.id;
        
        console.log(`üí∞ [DEBUG] –°—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥—ã: ${rewardAmount}, ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        
        if (!userId) {
            console.error('‚ùå [DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã');
            return 0;
        }
        
        console.log(`üí∞ [DEBUG] –ù–∞—á–∏—Å–ª—è–µ–º ${rewardAmount} –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è`);
        
        try {
            console.log(`üí∞ [DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã`);
            
            const requestBody = {
                userId: userId,
                taskId: task.id,
                taskType: task.type,
                channelUsername: task.channelUsername,
                rewardAmount: rewardAmount
            };
            
            console.log(`üí∞ [DEBUG] –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:`, requestBody);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
            const response = await fetch('/api/tasks/complete', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });
            
            console.log(`üí∞ [DEBUG] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);

            if (!response.ok) {
                console.log(`‚ùå [DEBUG] HTTP –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
                const errorText = await response.text();
                console.log(`‚ùå [DEBUG] –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:`, errorText);
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const result = await response.json();
            console.log(`üí∞ [DEBUG] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, result);
            
            if (result.success) {
                console.log(`‚úÖ [DEBUG] –ù–∞–≥—Ä–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∞: ${rewardAmount} –∑–≤–µ–∑–¥`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                if (result.newBalance !== undefined) {
                    console.log(`üí∞ [DEBUG] –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.newBalance}`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ gameData —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if (this.app && this.app.gameData) {
                        console.log(`üí∞ [DEBUG] –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${this.app.gameData.stars}`);
                        this.app.gameData.stars = result.newBalance;
                        this.app.saveGameData();
                        this.updateStarsDisplayImmediate();
                    } else {
                        console.error(`‚ùå [DEBUG] app.gameData –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!`);
                    }
                } else {
                    console.log(`‚ö†Ô∏è [DEBUG] –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å`);
                }
                
                return rewardAmount;
            } else {
                console.error('‚ùå [DEBUG] –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã:', result.error);
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã');
            }
            
        } catch (error) {
            console.error('‚ùå [DEBUG] –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã:', {
                error: error,
                message: error?.message,
                stack: error?.stack,
                task: task
            });
            this.showMessage(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã: ${error?.message || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
            return 0;
        }
    }

    updateStarsDisplayImmediate() {
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        try {
            if (this.app && this.app.updateStarsDisplay) {
                this.app.updateStarsDisplay();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∑–≤–µ–∑–¥–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if (this.app && this.app.gameData && this.app.gameData.stars !== undefined) {
                const starsElements = document.querySelectorAll('[data-stars], .stars-count, .user-stars, .mega-stars span');
                starsElements.forEach(el => {
                    if (el) {
                        el.textContent = this.app.gameData.stars;
                    }
                });
            } else {
                console.error('‚ùå [DEBUG] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥: app.gameData –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ç–∫—Ä–∞–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            const headerStars = document.querySelector('.tasks-header-profile .stars, .profile-header .stars');
            if (headerStars) {
                headerStars.textContent = this.app.gameData.stars;
            }
            
            console.log(`üé® –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: ${this.app.gameData.stars}`);
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤–µ–∑–¥:', error);
        }
    }

    async syncUserDataWithServer() {
        try {
            const userId = this.app.tg?.initDataUnsafe?.user?.id;
            if (!userId) {
                console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
                return;
            }

            const response = await fetch('/api/update-user-stars', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    userId: userId,
                    stars: this.app.gameData.stars,
                    completedTasks: this.app.gameData.completedTasks || [],
                    taskStatuses: this.app.gameData.taskStatuses || {}
                })
            });

            if (response.ok) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            } else {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º:', response.status);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
        }
    }

    // ===================== –°–¢–ê–†–´–ô –ú–ï–¢–û–î COMPLETETASK (–û–°–¢–ê–í–õ–ï–ù –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò) =====================

    completeTask(taskId, category) {
        console.log(`üéØ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥: ${taskId} (${category})`);
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        return this.startTaskCheck(taskId, category);
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    async syncTaskWithServer(taskId, task) {
        try {
            const userId = this.app.tg?.initDataUnsafe?.user?.id;
            if (!userId) {
                console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
                return;
            }

            const response = await fetch('/api/tasks/complete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    userId,
                    taskId,
                    taskName: task.name,
                    reward: task.reward,
                    userData: this.app.getUserData()
                })
            });

            if (!response.ok) {
                console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
        }
    }

    handleActiveTask(taskId) {
        const task = TASKS_CONFIG.active.find(t => t.id === taskId);
        if (!task) return;

        if (task.url) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            if (this.app.tg && this.app.tg.openLink) {
                this.app.tg.openLink(task.url);
            } else {
                window.open(task.url, '_blank');
            }
        } else if (taskId === 'rate_app') {
            this.showMessage('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! üåü', 'success');
        }
    }

    async checkChannelSubscription(channelId, channelUsername) {
        try {
            const userId = this.app.tg?.initDataUnsafe?.user?.id;
            if (!userId) {
                this.showMessage('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 'error');
                return;
            }

            this.showMessage('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É...', 'info');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            const response = await fetch('/api/subscription/check', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId, channelUsername })
            });

            const result = await response.json();

            if (!result.isSubscribed) {
                this.showMessage('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª', 'error');
                return;
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            const completeResponse = await fetch('/api/subscription/complete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    userId, 
                    channelId, 
                    userData: this.app.getUserData() 
                })
            });

            const completeResult = await completeResponse.json();

            if (completeResult.success) {
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –ª–æ–∫–∞–ª—å–Ω–æ - —Å–µ—Ä–≤–µ—Ä —É–∂–µ –Ω–∞—á–∏—Å–ª–∏–ª!
                console.log(`‚≠ê –°–µ—Ä–≤–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞–≥—Ä–∞–¥—É: ${completeResult.reward} –∑–≤–µ–∑–¥`);
                this.showMessage(`–ü–æ–ª—É—á–µ–Ω–æ ${completeResult.reward} ‚≠ê!`, 'success');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                await this.loadTasks();
                
                // Haptic feedback
                if (this.app.tg?.HapticFeedback) {
                    this.app.tg.HapticFeedback.notificationOccurred('success');
                }
            } else {
                this.showMessage(completeResult.error || '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è', 'error');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
            this.showMessage('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏', 'error');
        }
    }

    isTaskCompleted(taskId) {
        const completedTasks = this.app.gameData.completedTasks || [];
        const isInCompletedList = completedTasks.includes(taskId);
        const taskStatus = this.getTaskStatus(taskId);
        
        console.log(`üîç [–ü–†–û–í–ï–†–ö–ê] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏–µ ${taskId}:`);
        console.log(`üìã [–ü–†–û–í–ï–†–ö–ê] –í—Å–µ completedTasks:`, completedTasks);
        console.log(`‚úÖ [–ü–†–û–í–ï–†–ö–ê] –í —Å–ø–∏—Å–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: ${isInCompletedList}`);
        console.log(`üìä [–ü–†–û–í–ï–†–ö–ê] –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è: ${taskStatus}`);
        
        // –ó–∞–¥–∞–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –µ—Å–ª–∏ –æ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ò –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å completed
        const isCompleted = isInCompletedList && taskStatus === 'completed';
        
        console.log(`üéØ [–ü–†–û–í–ï–†–ö–ê] –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${taskId}: ${isCompleted}`);
        
        return isCompleted;
    }

    findTask(taskId, category) {
        try {
            switch (category) {
                case 'friends':
                    return TASKS_CONFIG.friends?.find(t => t.id === taskId);
                case 'active':
                    // –ò—â–µ–º —Å—Ä–µ–¥–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ë–î
                    if (!this.channels) return null;
                    
                    const channelId = taskId.replace('channel_', '');
                    const channel = this.channels.find(c => c.id == channelId);
                    
                    if (channel) {
                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞–Ω–∏—è
                        return {
                            id: taskId,
                            type: 'subscription',
                            channelUsername: channel.channel_username,
                            name: channel.channel_name || channel.channel_username,
                            reward: {
                                type: 'stars',
                                amount: channel.reward_stars || 10
                            },
                            description: channel.is_hot_offer ? 'üî• –ì–æ—Ä—è—á–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!' : '–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª'
                        };
                    }
                    return null;
                default:
                    return null;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è:', error);
            return null;
        }
    }

    getCompletedTasksCount() {
        return (this.app.gameData.completedTasks || []).length;
    }

    getTotalTasksCount() {
        try {
            return (TASKS_CONFIG.friends?.length || 0) + 
                   (TASKS_CONFIG.active?.length || 0);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω–∏–π:', error);
            return 0;
        }
    }

    getAvailableTasksCount() {
        try {
            const completedTasks = this.app.gameData.completedTasks || [];
            let count = 0;
            
            // –ó–∞–¥–∞–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏
            count += (TASKS_CONFIG.friends || []).filter(task => !completedTasks.includes(task.id)).length;
            
            // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            count += (TASKS_CONFIG.active || []).filter(task => !completedTasks.includes(task.id)).length;
            
            return count;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
            return 0;
        }
    }

    // –î–û–ë–ê–í–ò–¢–¨ –≤ –∫–ª–∞—Å—Å TasksScreen:
    getActualReferralsCount() {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const referrals = this.app.gameData.referrals || 0;
        console.log('üìä –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ –∑–∞–¥–∞–Ω–∏—è—Ö:', referrals);
        return referrals;
    }

    startTimerUpdates() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        this.timerInterval = setInterval(() => {
            this.updateTimers();
        }, 60000); // 60 —Å–µ–∫—É–Ω–¥
        
        // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        this.updateTimers();
    }
    
    updateTimers() {
        const timers = document.querySelectorAll('.task-timer');
        timers.forEach(timer => {
            const card = timer.closest('.task-card[data-end-date]');
            if (!card) return;
            
            const endDate = card.getAttribute('data-end-date');
            if (!endDate) return;
            
            const timeRemaining = this.formatTimeRemaining(endDate);
            
            if (timeRemaining === '–ò—Å—Ç–µ–∫–ª–æ') {
                timer.textContent = '‚è∞ –ò—Å—Ç–µ–∫–ª–æ';
                timer.classList.add('expired');
                card.classList.add('expired');
            } else if (timeRemaining) {
                timer.textContent = `‚è∞ ${timeRemaining}`;
                timer.classList.remove('expired');
                card.classList.remove('expired');
            }
        });
    }

    destroy() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    async forceUpdateData() {
        const userId = this.app.tg?.initDataUnsafe?.user?.id;
        if (!userId) return;
        
        try {
            const response = await fetch(`/api/user/${userId}`);
            if (response.ok) {
                const userData = await response.json();
                this.app.updateUserData(userData);
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        }
    }

    checkDailyReset() {
        // –î–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Å–±—Ä–æ—Å –Ω–µ –Ω—É–∂–µ–Ω
        return;
    }

    updateTaskCounter() {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–¥–∞–Ω–∏–π –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if (this.app.navigation) {
                const completedCount = this.getCompletedTasksCount();
                const totalTasks = this.getTotalTasksCount();
                
                console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞: ${completedCount}/${totalTasks}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±—ç–¥–∂–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω
                if (this.app.navigation.updateBadges) {
                    this.app.navigation.updateBadges();
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            const completedCountEl = document.getElementById('completed-tasks-count');
            const totalCountEl = document.getElementById('total-tasks-count');
            
            if (completedCountEl) {
                completedCountEl.textContent = this.getCompletedTasksCount();
            }
            
            if (totalCountEl) {
                totalCountEl.textContent = this.getTotalTasksCount();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:', error);
        }
    }
}
