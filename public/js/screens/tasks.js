// public/js/screens/tasks.js - Tasks Screen Module (UPDATED FOR CHANNEL SUBSCRIPTIONS)

import { TASKS_CONFIG } from '../config.js';

export class TasksScreen {
    constructor(app) {
        this.app = app;
        this.currentTab = 'channels';
        this.channels = [];
        this.dailyTasks = [];
        this.hotOffers = [];
        this.userBlocked = false;
    }

    render() {
        return `
            <div id="tasks-screen" class="screen">
                <!-- –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Header -->
                <div class="tasks-header-profile">
                    <div class="tasks-avatar">
                        üìã
                    </div>
                    <div class="tasks-info">
                        <h2 class="tasks-title">–ó–∞–¥–∞–Ω–∏—è</h2>
                    </div>
                </div>

                <!-- Tabs –≤ –Ω–æ–≤–æ–º —Å—Ç–∏–ª–µ -->
                <div class="task-tabs-profile">
                    <button class="task-tab-profile active" data-tab="channels">
                        <div class="tab-icon">üì∫</div>
                        <div class="tab-text">–ö–∞–Ω–∞–ª—ã</div>
                    </button>
                    <button class="task-tab-profile" data-tab="daily">
                        <div class="tab-icon">üìÖ</div>
                        <div class="tab-text">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ</div>
                    </button>
                    <button class="task-tab-profile" data-tab="referral">
                        <div class="tab-icon">üë•</div>
                        <div class="tab-text">–†–µ—Ñ–µ—Ä–∞–ª—ã</div>
                    </button>
                    <button class="task-tab-profile" data-tab="hot">
                        <div class="tab-icon">üî•</div>
                        <div class="tab-text">–ê–∫—Ç–∏–≤–Ω—ã–µ</div>
                    </button>
                </div>

                <!-- Content sections -->
                <div class="task-content">
                    <div id="channels-tasks" class="task-section active">
                        ${this.renderChannelTasks()}
                    </div>

                    <div id="daily-tasks" class="task-section">
                        ${this.renderDailyTasks()}
                    </div>

                    <div id="referral-tasks" class="task-section">
                        ${this.renderReferralTasks()}
                    </div>

                    <div id="hot-tasks" class="task-section">
                        ${this.renderHotOffers()}
                    </div>
                </div>
            </div>
        `;
    }

    async init() {
        this.setupEventListeners();
        await this.loadTasks();
        this.checkDailyReset();
        this.updateTaskCounter();
        console.log('‚úÖ –≠–∫—Ä–∞–Ω –∑–∞–¥–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupEventListeners() {
        // Task tabs
        const taskTabs = document.querySelectorAll('.task-tab-profile');
        taskTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                this.switchTab(tab.dataset.tab);
            });
        });
    }

    switchTab(tabName) {
        this.currentTab = tabName;
        
        // Update tabs
        document.querySelectorAll('.task-tab-profile').forEach(tab => {
            tab.classList.remove('active');
        });
        
        const targetTab = document.querySelector(`[data-tab="${tabName}"]`);
        if (targetTab) {
            targetTab.classList.add('active');
        }
        
        // Update sections
        document.querySelectorAll('.task-section').forEach(section => {
            section.classList.remove('active');
        });
        
        const sectionId = `${tabName}-tasks`;
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
            targetSection.classList.add('active');
        }
        
        // Refresh content
        this.refreshTabContent(tabName);
    }

    refreshTabContent(tabName) {
        const sectionId = `${tabName}-tasks`;
        const container = document.getElementById(sectionId);
        if (!container) return;
        
        switch (tabName) {
            case 'channels':
                container.innerHTML = this.renderChannelTasks();
                break;
            case 'daily':
                container.innerHTML = this.renderDailyTasks();
                break;
            case 'referral':
                container.innerHTML = this.renderReferralTasks();
                break;
            case 'hot':
                container.innerHTML = this.renderHotOffers();
                break;
        }
        
        // Re-attach event listeners for the new content
        this.attachTaskEventListeners();
    }

    // ===================== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ö–ê–ù–ê–õ–û–í =====================
    
    async loadTasks() {
        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (this.app.tg?.initDataUnsafe?.user?.id) {
                const userId = this.app.tg.initDataUnsafe.user.id;
                const response = await fetch(`/api/tasks/available/${userId}`);
                const data = await response.json();

                if (data.blocked) {
                    this.userBlocked = true;
                    this.blockMessage = data.message;
                    this.banUntil = data.banUntil;
                } else {
                    this.userBlocked = false;
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏
                    this.channels = await this.loadChannelInfo(data.channels || []);
                }
                
                console.log('‚úÖ –ó–∞–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
            } else {
                console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤');
                this.channels = [];
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.refreshTabContent(this.currentTab);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
            this.channels = [];
        }
    }

    renderChannelTasks() {
        if (this.userBlocked) {
            return `
                <div class="task-section-blocked">
                    <div class="blocked-icon">üö´</div>
                    <h3>–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞</h3>
                    <p>${this.blockMessage}</p>
                    <p>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ: ${new Date(this.banUntil).toLocaleString('ru-RU')}</p>
                </div>
            `;
        }

        if (!this.channels || this.channels.length === 0) {
            return `
                <div class="task-section-empty">
                    <div class="empty-icon">üì∫</div>
                    <h3>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤</h3>
                    <p>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏</p>
                </div>
            `;
        }

        return `
            <div class="task-section-header">
                <div class="section-info">
                    <h3>üì∫ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã</h3>
                    <p>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã</p>
                </div>
                <button class="check-all-btn" onclick="checkAllSubscriptions()">
                    üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ
                </button>
            </div>
            
            <div class="task-cards-grid">
                ${this.channels.map(channel => this.renderChannelCard(channel)).join('')}
            </div>
        `;
    }

    renderChannelCard(channel) {
        const isHot = channel.is_hot_offer;
        const reward = isHot ? channel.reward_stars * channel.hot_offer_multiplier : channel.reward_stars;
        const avatarUrl = channel.avatar_url || `https://ui-avatars.com/api/?name=${encodeURIComponent(channel.channel_name)}&background=ff6b9d&color=fff&size=60&rounded=true`;
        
        return `
            <div class="task-card channel-card ${isHot ? 'hot-offer' : ''}">
                ${isHot ? 
                    `<div class="hot-badge">üî• x${channel.hot_offer_multiplier}</div>` : ''
                }
                <div class="channel-header">
                    <div class="channel-avatar">
                        <img src="${avatarUrl}" alt="${channel.channel_name}" onerror="this.src='data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"60\" height=\"60\" viewBox=\"0 0 60 60\"><circle cx=\"30\" cy=\"30\" r=\"30\" fill=\"%23ff6b9d\"/><text x=\"30\" y=\"38\" text-anchor=\"middle\" fill=\"white\" font-size=\"20\">üì∫</text></svg>'">
                    </div>
                    <div class="channel-info">
                        <div class="channel-name">${channel.channel_name}</div>
                        <div class="channel-username">@${channel.channel_username}</div>
                        ${channel.description ? 
                            `<div class="channel-description">${this.truncateText(channel.description, 100)}</div>` : ''
                        }
                    </div>
                </div>
                
                <div class="channel-stats">
                    <div class="stat-item">
                        <div class="stat-icon">üë•</div>
                        <div class="stat-text">${this.formatSubscriberCount(channel.member_count || 0)}</div>
                    </div>
                    <div class="stat-item reward">
                        <div class="stat-icon">‚≠ê</div>
                        <div class="stat-text">+${reward}</div>
                    </div>
                </div>
                
                <div class="channel-actions">
                    <button class="subscribe-btn primary" onclick="handleChannelSubscribe('${channel.id}', '${channel.channel_username}')">
                        üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
                    </button>
                    <button class="check-btn" onclick="checkChannelSubscription('${channel.id}', '${channel.channel_username}')">
                        üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }

    renderDailyTasks() {
        if (!TASKS_CONFIG.daily) {
            return `
                <div class="task-section-empty">
                    <div class="empty-icon">üìÖ</div>
                    <h3>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π...</h3>
                    <p>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è</p>
                </div>
            `;
        }

        const todayTasks = TASKS_CONFIG.daily.filter(task => !this.isTaskCompleted(task.id));
        
        if (todayTasks.length === 0) {
            return `
                <div class="task-section-empty">
                    <div class="empty-icon">‚úÖ</div>
                    <h3>–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!</h3>
                    <p>–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏</p>
                </div>
            `;
        }

        return `
            <div class="task-section-header">
                <div class="section-info">
                    <h3>üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h3>
                    <p>–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã</p>
                </div>
            </div>
            
            <div class="task-cards-grid">
                ${todayTasks.map(task => this.renderTaskCard(task)).join('')}
            </div>
        `;
    }

    renderReferralTasks() {
        if (!TASKS_CONFIG.friends) {
            return `
                <div class="task-section-empty">
                    <div class="empty-icon">üë•</div>
                    <h3>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π...</h3>
                    <p>–ó–∞–¥–∞–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è</p>
                </div>
            `;
        }

        const referralLink = this.getReferralLink();
        const friendsInvited = this.app.gameData.friendsInvited || 0;

        return `
            <div class="task-section-header">
                <div class="section-info">
                    <h3>üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π</h3>
                    <p>–ü–æ–ª—É—á–∞–π –∑–≤–µ–∑–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞</p>
                </div>
            </div>
            
            <div class="referral-link-container">
                <div class="referral-info">
                    <h4>–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</h4>
                    <div class="link-input-group">
                        <input type="text" id="referral-link" value="${referralLink}" readonly>
                        <button class="copy-btn" onclick="window.tasksScreen?.copyReferralLink()">
                            üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                    </div>
                    <p class="referral-stats">–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <strong>${friendsInvited}</strong></p>
                </div>
            </div>
            
            <div class="task-cards-grid">
                ${TASKS_CONFIG.friends.map(task => this.renderFriendsTaskCard(task)).join('')}
            </div>
        `;
    }

    renderHotOffers() {
        if (!TASKS_CONFIG.active) {
            return `
                <div class="task-section-empty">
                    <div class="empty-icon">üî•</div>
                    <h3>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π...</h3>
                    <p>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è</p>
                </div>
            `;
        }

        const activeTasks = TASKS_CONFIG.active.filter(task => !this.isTaskCompleted(task.id));
        
        if (activeTasks.length === 0) {
            return `
                <div class="task-section-empty">
                    <div class="empty-icon">‚úÖ</div>
                    <h3>–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!</h3>
                    <p>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏</p>
                </div>
            `;
        }

        return `
            <div class="task-section-header">
                <div class="section-info">
                    <h3>üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h3>
                    <p>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏</p>
                </div>
            </div>
            
            <div class="task-cards-grid">
                ${activeTasks.map(task => this.renderActiveTaskCard(task)).join('')}
            </div>
        `;
    }

    renderTaskCard(task) {
        const isCompleted = this.isTaskCompleted(task.id);
        
        return `
            <div class="task-card ${isCompleted ? 'completed' : ''}">
                <div class="task-header">
                    <div class="task-icon">${task.icon}</div>
                    <div class="task-info">
                        <div class="task-name">${task.name}</div>
                        <div class="task-description">${task.description}</div>
                    </div>
                </div>
                
                <div class="task-reward">
                    <span class="reward-amount">+${task.reward.amount}</span>
                    <span class="reward-icon">‚≠ê</span>
                </div>
                
                <div class="task-actions">
                    ${isCompleted ? 
                        `<div class="task-status">
                            <i class="fas fa-check"></i>
                            –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                        </div>` :
                        `<button class="task-button" onclick="window.tasksScreen?.completeTask('${task.id}', 'daily')">
                            –í—ã–ø–æ–ª–Ω–∏—Ç—å
                        </button>`
                    }
                </div>
            </div>
        `;
    }

    renderFriendsTaskCard(task) {
        const isCompleted = this.isTaskCompleted(task.id);
        const currentProgress = this.app.gameData.friendsInvited || 0;
        const requiredCount = task.requirement;
        const progressPercentage = Math.min(100, (currentProgress / requiredCount) * 100);
        
        return `
            <div class="task-card friends-task ${isCompleted ? 'completed' : ''}">
                <div class="task-header">
                    <div class="task-icon">${task.icon}</div>
                    <div class="task-info">
                        <div class="task-name">${task.name}</div>
                        <div class="task-description">${task.description}</div>
                    </div>
                </div>
                
                <div class="task-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${progressPercentage}%"></div>
                    </div>
                    <div class="progress-text">${currentProgress}/${requiredCount}</div>
                </div>
                
                <div class="task-reward">
                    <span class="reward-amount">+${task.reward.amount}</span>
                    <span class="reward-icon">‚≠ê</span>
                </div>
                
                <div class="task-actions">
                    ${isCompleted ? 
                        `<div class="task-status">
                            <i class="fas fa-check"></i>
                            –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                        </div>` :
                        currentProgress >= requiredCount ?
                        `<button class="task-button" onclick="window.tasksScreen?.completeTask('${task.id}', 'friends')">
                            –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É
                        </button>` :
                        `<div class="task-pending">
                            –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –µ—â–µ ${requiredCount - currentProgress} –¥—Ä—É–∑–µ–π
                        </div>`
                    }
                </div>
            </div>
        `;
    }

    renderActiveTaskCard(task) {
        const isCompleted = this.isTaskCompleted(task.id);
        
        return `
            <div class="task-card active-task ${isCompleted ? 'completed' : ''}">
                <div class="hot-badge">üî• –ê–∫—Ç–∏–≤–Ω–æ–µ</div>
                <div class="task-header">
                    <div class="task-icon">${task.icon}</div>
                    <div class="task-info">
                        <div class="task-name">${task.name}</div>
                        <div class="task-description">${task.description}</div>
                    </div>
                </div>
                
                <div class="task-reward">
                    <span class="reward-amount">+${task.reward.amount}</span>
                    <span class="reward-icon">‚≠ê</span>
                </div>
                
                <div class="task-actions">
                    ${isCompleted ? 
                        `<div class="task-status">
                            <i class="fas fa-check"></i>
                            –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                        </div>` :
                        `<button class="task-button" onclick="window.tasksScreen?.completeTask('${task.id}', 'active')">
                            ${task.action || '–í—ã–ø–æ–ª–Ω–∏—Ç—å'}
                        </button>`
                    }
                </div>
            </div>
        `;
    }

    // ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====================

    async loadChannelInfo(channels) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤–∞—Ç–∞—Ä–∞—Ö –∫–∞–Ω–∞–ª–æ–≤
        return channels.map(channel => ({
            ...channel,
            avatar_url: channel.photo_url || null
        }));
    }

    formatSubscriberCount(count) {
        if (count >= 1000000) {
            return `${(count / 1000000).toFixed(1)}M`;
        } else if (count >= 1000) {
            return `${(count / 1000).toFixed(1)}K`;
        }
        return count.toString();
    }

    truncateText(text, maxLength) {
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength) + '...';
    }

    attachTaskEventListeners() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏
        window.handleChannelSubscribe = (channelId, channelUsername) => {
            this.handleChannelSubscribe(channelId, channelUsername);
        };

        window.checkChannelSubscription = (channelId, channelUsername) => {
            this.checkChannelSubscription(channelId, channelUsername);
        };

        window.checkAllSubscriptions = () => {
            this.checkAllSubscriptions();
        };
    }

    async handleChannelSubscribe(channelId, channelUsername) {
        try {
            const channelUrl = `https://t.me/${channelUsername}`;
            
            if (this.app.tg && this.app.tg.openTelegramLink) {
                this.app.tg.openTelegramLink(channelUrl);
            } else if (this.app.tg && this.app.tg.openLink) {
                this.app.tg.openLink(channelUrl);
            } else {
                window.open(channelUrl, '_blank');
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
            this.app.showStatusMessage('–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"', 'info');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞:', error);
            this.app.showStatusMessage('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞', 'error');
        }
    }

    async checkChannelSubscription(channelId, channelUsername) {
        try {
            const userId = this.app.tg?.initDataUnsafe?.user?.id;
            if (!userId) {
                this.app.showStatusMessage('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 'error');
                return;
            }

            this.app.showStatusMessage('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É...', 'info');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            const checkResponse = await fetch('/api/subscription/check', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId, channelId, channelUsername })
            });

            const checkResult = await checkResponse.json();

            if (!checkResult.subscribed) {
                this.app.showStatusMessage('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª', 'error');
                return;
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            const completeResponse = await fetch('/api/subscription/complete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    userId, 
                    channelId, 
                    userData: this.app.getUserData() 
                })
            });

            const result = await completeResponse.json();

            if (result.success) {
                this.app.addStars(result.reward);
                this.app.showStatusMessage(`–ü–æ–ª—É—á–µ–Ω–æ ${result.reward} ‚≠ê!`, 'success');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                await this.loadTasks();
                
                // Haptic feedback
                if (this.app.tg?.HapticFeedback) {
                    this.app.tg.HapticFeedback.notificationOccurred('success');
                }
            } else {
                this.app.showStatusMessage(result.error || '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è', 'error');
                if (result.banUntil) {
                    await this.loadTasks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                }
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
            this.app.showStatusMessage('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏', 'error');
        }
    }

    async checkAllSubscriptions() {
        this.app.showStatusMessage('–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏...', 'info');
        
        for (const channel of this.channels) {
            await this.checkChannelSubscription(channel.id, channel.channel_username);
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 500));
        }
    }

    getReferralLink() {
        if (!this.app.tg?.initDataUnsafe?.user?.id) {
            return 'https://t.me/kosmetichka_lottery_bot';
        }

        const userId = this.app.tg.initDataUnsafe.user.id;
        return `https://t.me/kosmetichka_lottery_bot?start=ref_${userId}`;
    }

    copyReferralLink() {
        const linkInput = document.getElementById('referral-link');
        if (linkInput) {
            linkInput.select();
            document.execCommand('copy');
            this.app.showStatusMessage('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
        }
    }

    // ===================== –õ–û–ì–ò–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ù–ò–ô =====================

    completeTask(taskId, category) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É–∂–µ
        if (this.isTaskCompleted(taskId)) {
            this.app.showStatusMessage('–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', 'info');
            return;
        }

        const task = this.findTask(taskId, category);
        if (!task) {
            console.error('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', taskId);
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        if (!this.app.gameData.completedTasks) {
            this.app.gameData.completedTasks = [];
        }
        this.app.gameData.completedTasks.push(taskId);

        // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
        if (task.reward) {
            if (task.reward.type === 'stars') {
                this.app.gameData.stars += task.reward.amount;
                this.app.showStatusMessage(`–ü–æ–ª—É—á–µ–Ω–æ ${task.reward.amount} ‚≠ê!`, 'success');
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
        this.app.saveGameData();
        this.app.updateStarsDisplay();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        this.syncTaskWithServer(taskId, task);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateTaskCounter();
        this.refreshTabContent(this.currentTab);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±—ç–¥–∂–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (this.app.navigation && this.app.navigation.updateBadges) {
            this.app.navigation.updateBadges();
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
        if (category === 'active') {
            this.handleActiveTask(taskId);
        }

        // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        if (this.app.tg && this.app.tg.HapticFeedback) {
            this.app.tg.HapticFeedback.impactOccurred('medium');
        }

        console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:', taskId);
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    async syncTaskWithServer(taskId, task) {
        try {
            const userId = this.app.tg?.initDataUnsafe?.user?.id;
            if (!userId) {
                console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
                return;
            }

            const response = await fetch('/api/tasks/complete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    userId,
                    taskId,
                    taskName: task.name,
                    reward: task.reward,
                    userData: this.app.getUserData()
                })
            });

            if (!response.ok) {
                console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
        }
    }

    handleActiveTask(taskId) {
        const task = TASKS_CONFIG.active.find(t => t.id === taskId);
        if (!task) return;

        if (task.url) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            if (this.app.tg && this.app.tg.openLink) {
                this.app.tg.openLink(task.url);
            } else {
                window.open(task.url, '_blank');
            }
        } else if (taskId === 'rate_app') {
            this.app.showStatusMessage('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! üåü', 'success');
        }
    }

    isTaskCompleted(taskId) {
        return (this.app.gameData.completedTasks || []).includes(taskId);
    }

    findTask(taskId, category) {
        try {
            switch (category) {
                case 'daily':
                    return TASKS_CONFIG.daily?.find(t => t.id === taskId);
                case 'friends':
                    return TASKS_CONFIG.friends?.find(t => t.id === taskId);
                case 'active':
                    return TASKS_CONFIG.active?.find(t => t.id === taskId);
                default:
                    return null;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è:', error);
            return null;
        }
    }

    getCompletedTasksList() {
        try {
            const allTasks = [
                ...(TASKS_CONFIG.daily || []),
                ...(TASKS_CONFIG.friends || []),
                ...(TASKS_CONFIG.active || [])
            ];
            
            return allTasks.filter(task => this.isTaskCompleted(task.id));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
            return [];
        }
    }

    getCompletedTasksCount() {
        return (this.app.gameData.completedTasks || []).length;
    }

    getTotalTasksCount() {
        try {
            return (TASKS_CONFIG.daily?.length || 0) + 
                   (TASKS_CONFIG.friends?.length || 0) + 
                   (TASKS_CONFIG.active?.length || 0) + 
                   (this.channels?.length || 0);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω–∏–π:', error);
            return 0;
        }
    }

    getAvailableTasksCount() {
        try {
            const completedTasks = this.app.gameData.completedTasks || [];
            
            // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            const lastDailyReset = this.app.gameData.lastDailyReset || 0;
            const today = new Date().toDateString();
            const lastResetDate = new Date(lastDailyReset).toDateString();
            let count = 0;
            
            if (today !== lastResetDate) {
                count += (TASKS_CONFIG.daily || []).filter(task => !completedTasks.includes(task.id)).length;
            }
            
            // –ó–∞–¥–∞–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏
            count += (TASKS_CONFIG.friends || []).filter(task => !completedTasks.includes(task.id)).length;
            
            // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            count += (TASKS_CONFIG.active || []).filter(task => !completedTasks.includes(task.id)).length;
            
            // –ö–∞–Ω–∞–ª—ã
            count += (this.channels || []).length;
            
            return count;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
            return 0;
        }
    }

    checkDailyReset() {
        const lastReset = this.app.gameData.lastDailyReset || 0;
        const today = new Date().toDateString();
        const lastResetDate = new Date(lastReset).toDateString();
        
        if (today !== lastResetDate) {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            const dailyTaskIds = (TASKS_CONFIG.daily || []).map(task => task.id);
            const completedTasks = this.app.gameData.completedTasks || [];
            
            this.app.gameData.completedTasks = completedTasks.filter(taskId => 
                !dailyTaskIds.includes(taskId)
            );
            
            this.app.gameData.lastDailyReset = new Date().getTime();
            this.app.saveGameData();
            
            console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã');
        }
    }

    updateTaskCounter() {
        const completedCount = document.getElementById('completed-tasks-count');
        const totalCount = document.getElementById('total-tasks-count');
        
        if (completedCount) {
            completedCount.textContent = this.getCompletedTasksCount();
        }
        
        if (totalCount) {
            totalCount.textContent = this.getTotalTasksCount();
        }
    }
}
