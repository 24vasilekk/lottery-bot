// screens/main.js - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å–º–µ—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞

import { WHEEL_PRIZES, APP_CONFIG } from '../config.js';

export class MainScreen {
    constructor(app) {
        this.app = app;
        this.isSpinning = false;
        this.wheelRotation = 0;
        this.initialized = false;
        this.lastSpinType = null;
    }

    render() {
        return `
            <div id="main-screen" class="screen active">
                <div class="header">
                    <div class="user-info">
                        <div id="profile-pic" class="profile-pic" tabindex="0" role="button" aria-label="–ü—Ä–æ—Ñ–∏–ª—å">
                            ${this.app.tg?.initDataUnsafe?.user?.first_name?.charAt(0) || 'üë§'}
                        </div>
                        <div class="user-details">
                            <div class="user-name">${this.app.tg?.initDataUnsafe?.user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</div>
                            <div class="user-stars">
                                <span id="star-count">${this.app.gameData.stars}</span> ‚≠ê
                                <button id="deposit-btn" class="deposit-quick-btn" onclick="navigateToDeposit()" title="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <button id="mega-roulette-btn" class="mega-btn" aria-label="–ú–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∞">
                        üëë –ú–ï–ì–ê
                    </button>
                </div>

                <div class="wheel-container">
                    <div class="wheel" id="wheel">
                        <div class="wheel-pointer"></div>
                        <svg id="wheel-svg" width="400" height="400" viewBox="0 0 400 400">
                            <g id="wheel-segments"></g>
                        </svg>
                        <div class="wheel-center">SPIN</div>
                    </div>

                    <div class="spin-controls">
                        <div class="spin-buttons">
                            <button id="spin-button-stars" class="spin-btn primary" type="button">
                                <i class="fas fa-star"></i>
                                <span>–ó–∞ 20 ‚≠ê</span>
                            </button>
                            <button id="spin-button-friend" class="spin-btn secondary" type="button">
                                <i class="fas fa-heart"></i>
                                <span id="friend-button-text">–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞ –¥—Ä—É–≥–∞</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="recent-wins">
                    <span class="recent-wins-title">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏</span>
                    <div class="recent-wins-list" id="recent-wins-list">
                        <!-- Recent wins will be shown here -->
                    </div>
                </div>

            </div>
        `;
    }

    init() {
        console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞...');
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.wheelRotation = 0;
        
        try {
            setTimeout(async () => {
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
                if (this.app.syncBalanceFromServer) {
                    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω...');
                    await this.app.syncBalanceFromServer();
                }
                
                this.generateWheelSVG();
                this.setupEventListeners();
                this.updateRecentWins();
                this.updateSpinButtons();
                this.testSynchronization();
                this.initialized = true;
                console.log('‚úÖ –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }, 100);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞:', error);
        }
    }

    setupEventListeners() {
        console.log('üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        this.removeEventListeners();
        
        const spinStarsBtn = document.getElementById('spin-button-stars');
        const spinFriendBtn = document.getElementById('spin-button-friend');
        
        if (spinStarsBtn) {
            this.starsBtnHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                if (!this.isSpinning && !spinStarsBtn.disabled) {
                    this.spinWheel('stars');
                }
            };
            spinStarsBtn.addEventListener('click', this.starsBtnHandler);
            spinStarsBtn.addEventListener('touchend', this.starsBtnHandler);
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–æ–±–∞–≤–ª–µ–Ω');
        }
        
        if (spinFriendBtn) {
            this.friendBtnHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                if (!this.isSpinning && !spinFriendBtn.disabled) {
                    this.spinWheel('friend');
                }
            };
            spinFriendBtn.addEventListener('click', this.friendBtnHandler);
            spinFriendBtn.addEventListener('touchend', this.friendBtnHandler);
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥—Ä—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω');
        }

        const megaBtn = document.getElementById('mega-roulette-btn');
        if (megaBtn) {
            this.megaBtnHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.openMegaRoulette();
            };
            megaBtn.addEventListener('click', this.megaBtnHandler);
            megaBtn.addEventListener('touchend', this.megaBtnHandler);
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–≥–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω');
        }
        
        const profilePic = document.getElementById('profile-pic');
        if (profilePic) {
            this.profileHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.app.navigation.navigateTo('profile');
            };
            profilePic.addEventListener('click', this.profileHandler);
            profilePic.addEventListener('touchend', this.profileHandler);
            profilePic.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.profileHandler(e);
                }
            });
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–±–∞–≤–ª–µ–Ω');
        }

        console.log('‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    removeEventListeners() {
        console.log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        const spinStarsBtn = document.getElementById('spin-button-stars');
        const spinFriendBtn = document.getElementById('spin-button-friend');
        const megaBtn = document.getElementById('mega-roulette-btn');
        const profilePic = document.getElementById('profile-pic');
        
        if (spinStarsBtn && this.starsBtnHandler) {
            spinStarsBtn.removeEventListener('click', this.starsBtnHandler);
            spinStarsBtn.removeEventListener('touchend', this.starsBtnHandler);
        }
        
        if (spinFriendBtn && this.friendBtnHandler) {
            spinFriendBtn.removeEventListener('click', this.friendBtnHandler);
            spinFriendBtn.removeEventListener('touchend', this.friendBtnHandler);
        }
        
        if (megaBtn && this.megaBtnHandler) {
            megaBtn.removeEventListener('click', this.megaBtnHandler);
            megaBtn.removeEventListener('touchend', this.megaBtnHandler);
        }
        
        if (profilePic && this.profileHandler) {
            profilePic.removeEventListener('click', this.profileHandler);
            profilePic.removeEventListener('touchend', this.profileHandler);
            profilePic.removeEventListener('keydown', this.profileHandler);
        }
    }

    generateWheelSVG() {
        const container = document.getElementById('wheel-segments');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ä—É–ª–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const radius = 180;
        const centerX = 200;
        const centerY = 200;

        const gradients = {
            empty: 'linear-gradient(135deg, #1a1a1a 0%, #000000 100%)',
            stars: 'linear-gradient(135deg, #FFD700 0%, #FFA500 100%)',
            'golden-apple': [
                'linear-gradient(135deg, #9ACD32 0%, #8FBC8F 100%)',
                'linear-gradient(135deg, #8FBC8F 0%, #7CFC00 100%)',
                'linear-gradient(135deg, #7CFC00 0%, #ADFF2F 100%)',
                'linear-gradient(135deg, #ADFF2F 0%, #32CD32 100%)',
                'linear-gradient(135deg, #32CD32 0%, #228B22 100%)'
            ],
            'wildberries': [
                'linear-gradient(135deg, #8E44AD 0%, #9B59B6 100%)',
                'linear-gradient(135deg, #9B59B6 0%, #6C3483 100%)',
                'linear-gradient(135deg, #6C3483 0%, #512E5F 100%)',
                'linear-gradient(135deg, #512E5F 0%, #3E1B40 100%)'
            ]
        };

        let svgContent = '';
        let defsContent = '<defs>';
        
        defsContent += `
            <linearGradient id="emptyGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#1a1a1a;stop-opacity:1" />
                <stop offset="100%" style="stop-color:#000000;stop-opacity:1" />
            </linearGradient>
            <pattern id="emptyPattern" patternUnits="userSpaceOnUse" width="20" height="20">
                <rect width="20" height="20" fill="url(#emptyGradient)"/>
                <path d="M0,20 L20,0" stroke="rgba(255,255,255,0.1)" stroke-width="1"/>
            </pattern>
        `;
        
        defsContent += `
            <linearGradient id="starsGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#FFD700;stop-opacity:1" />
                <stop offset="100%" style="stop-color:#FFA500;stop-opacity:1" />
            </linearGradient>
        `;
        
        gradients['golden-apple'].forEach((gradient, index) => {
            const gradientMatch = gradient.match(/linear-gradient\(135deg,\s*([^,]+)\s*0%,\s*([^)]+)\s*100%\)/);
            if (gradientMatch) {
                const [, color1, color2] = gradientMatch;
                defsContent += `
                    <linearGradient id="appleGradient${index}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:${color1.trim()};stop-opacity:1" />
                        <stop offset="100%" style="stop-color:${color2.trim()};stop-opacity:1" />
                    </linearGradient>
                `;
            }
        });
        
        gradients['wildberries'].forEach((gradient, index) => {
            const gradientMatch = gradient.match(/linear-gradient\(135deg,\s*([^,]+)\s*0%,\s*([^)]+)\s*100%\)/);
            if (gradientMatch) {
                const [, color1, color2] = gradientMatch;
                defsContent += `
                    <linearGradient id="wbGradient${index}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:${color1.trim()};stop-opacity:1" />
                        <stop offset="100%" style="stop-color:${color2.trim()};stop-opacity:1" />
                    </linearGradient>
                `;
            }
        });
        
        defsContent += '</defs>';

        let currentAngle = -90;
        
        WHEEL_PRIZES.forEach((prize, index) => {
            const segmentAngle = prize.angle || (360 / WHEEL_PRIZES.length);
            const startAngle = currentAngle * Math.PI / 180;
            const endAngle = (currentAngle + segmentAngle) * Math.PI / 180;

            const x1 = centerX + radius * Math.cos(startAngle);
            const y1 = centerY + radius * Math.sin(startAngle);
            const x2 = centerX + radius * Math.cos(endAngle);
            const y2 = centerY + radius * Math.sin(endAngle);

            const largeArc = segmentAngle > 180 ? 1 : 0;

            const path = `M ${centerX} ${centerY} L ${x1} ${y1} A ${radius} ${radius} 0 ${largeArc} 1 ${x2} ${y2} Z`;

            let fillUrl;
            if (prize.type === 'empty') {
                fillUrl = 'url(#emptyPattern)';
            } else if (prize.type === 'stars') {
                fillUrl = 'url(#starsGradient)';
            } else if (prize.type === 'certificate') {
                if (prize.name.includes('–ó–Ø')) {
                    const appleValues = ['300‚ÇΩ', '500‚ÇΩ', '1000‚ÇΩ', '2000‚ÇΩ', '5000‚ÇΩ'];
                    const appleIndex = appleValues.findIndex(val => prize.name.includes(val));
                    fillUrl = `url(#appleGradient${Math.max(0, appleIndex)})`;
                } else if (prize.name.includes('WB')) {
                    const wbValues = ['500‚ÇΩ', '1000‚ÇΩ', '2000‚ÇΩ', '3000‚ÇΩ'];
                    const wbIndex = wbValues.findIndex(val => prize.name.includes(val));
                    fillUrl = `url(#wbGradient${Math.max(0, wbIndex)})`;
                } else {
                    fillUrl = 'url(#appleGradient0)';
                }
            } else {
                fillUrl = 'url(#emptyPattern)';
            }

            svgContent += `
                <path 
                    d="${path}" 
                    fill="${fillUrl}" 
                    stroke="rgba(255,255,255,0.2)" 
                    stroke-width="1"
                    class="wheel-segment-path"
                    data-prize-id="${prize.id}"
                    style="filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3))"
                />
            `;

            if (prize.topText || prize.centerText) {
                const middleAngle = (startAngle + endAngle) / 2;
                const middleAngleDeg = middleAngle * 180 / Math.PI;

                if (prize.topText) {
                    const topRadius = radius * 0.85;
                    const topX = centerX + topRadius * Math.cos(middleAngle);
                    const topY = centerY + topRadius * Math.sin(middleAngle);
                    
                    const topRotation = middleAngleDeg + 90;
                    
                    let topTextColor = 'white';
                    if (prize.type.startsWith('stars')) {
                        topTextColor = '#FFFACD';
                    } else if (prize.type.startsWith('golden-apple')) {
                        topTextColor = '#F0FFF0';
                    } else if (prize.type.startsWith('wildberries')) {
                        topTextColor = '#F0E6FF';
                    }
                    
                    svgContent += `
                        <text 
                            x="${topX}" 
                            y="${topY}" 
                            text-anchor="middle" 
                            dominant-baseline="middle" 
                            font-size="${segmentAngle > 60 ? '16' : '14'}" 
                            font-weight="bold"
                            fill="${topTextColor}"
                            class="segment-top-text"
                            style="filter: drop-shadow(0 2px 4px rgba(0,0,0,0.8)); font-family: 'Arial', sans-serif; user-select: none;"
                            transform="rotate(${topRotation} ${topX} ${topY})"
                        >${prize.topText}</text>
                    `;
                }

                if (prize.centerText) {
                    const centerRadius = radius * 0.6;
                    const centerX_pos = centerX + centerRadius * Math.cos(middleAngle);
                    const centerY_pos = centerY + centerRadius * Math.sin(middleAngle);
                    
                    let centerRotation = middleAngleDeg;
                    if (middleAngleDeg > 90 && middleAngleDeg < 270) {
                        centerRotation += 180;
                    }
                    
                    let centerTextColor = 'white';
                    if (prize.type.startsWith('stars')) {
                        centerTextColor = '#FFF8DC';
                    } else if (prize.type.startsWith('golden-apple')) {
                        centerTextColor = '#F5FFFA';
                    } else if (prize.type.startsWith('wildberries')) {
                        centerTextColor = '#E6E6FA';
                    }
                    
                    svgContent += `
                        <text 
                            x="${centerX_pos}" 
                            y="${centerY_pos}" 
                            text-anchor="middle" 
                            dominant-baseline="middle" 
                            font-size="${segmentAngle > 60 ? '14' : segmentAngle > 30 ? '12' : '10'}" 
                            font-weight="bold"
                            fill="${centerTextColor}"
                            class="segment-center-text"
                            style="filter: drop-shadow(0 1px 3px rgba(0,0,0,0.8)); font-family: 'Arial', sans-serif; user-select: none;"
                            transform="rotate(${centerRotation} ${centerX_pos} ${centerY_pos})"
                        >${prize.centerText}</text>
                    `;
                }
            }

            currentAngle += segmentAngle;
        });

        container.innerHTML = defsContent + svgContent;
        console.log('‚úÖ –ß–∏—Å—Ç–æ–µ –∫–æ–ª–µ—Å–æ –±–µ–∑ –∏–∫–æ–Ω–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ');
    }

    async spinWheel(type) {
        if (this.isSpinning) {
            console.log('‚è≥ –†—É–ª–µ—Ç–∫–∞ —É–∂–µ –∫—Ä—É—Ç–∏—Ç—Å—è');
            return;
        }

        console.log('\nüé∞ ========== –ù–ê–ß–ê–õ–û –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –ü–†–û–ö–†–£–¢–ö–ò ==========');
        console.log(`üéÆ –¢–∏–ø: ${type}`);
        this.lastSpinType = type;

        try {
            if (type === 'stars' && this.app.gameData.stars < APP_CONFIG.wheel.starCost) {
                this.app.showStatusMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏!', 'error');
                return;
            }

            if (type === 'friend') {
                const referralsCount = this.app.gameData.referrals || 0;
                const friendSpinsUsed = this.app.gameData.friendSpinsUsed || 0;
                
                if (referralsCount === 0 || friendSpinsUsed >= referralsCount) {
                    this.showReferralLink();
                    return;
                }
            }

            this.isSpinning = true;
            this.updateSpinButtons();

            const originalStars = this.app.gameData.stars;
            const originalFriendSpins = this.app.gameData.friendSpinsUsed || 0;

            if (type === 'stars') {
                const success = await this.app.spendStars(APP_CONFIG.wheel.starCost);
                if (!success) {
                    this.isSpinning = false;
                    this.updateSpinButtons();
                    this.app.showStatusMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏!', 'error');
                    return;
                }
                console.log(`üí∞ –°–ø–∏—Å–∞–Ω–æ ${APP_CONFIG.wheel.starCost} –∑–≤–µ–∑–¥`);
                
                // –£–ë–†–ê–ù–û: –ò–∑–±—ã—Ç–æ—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–∏–≥—Ä—ã—à–∞
            } else if (type === 'friend') {
                this.app.gameData.friendSpinsUsed = (this.app.gameData.friendSpinsUsed || 0) + 1;
                console.log(`‚ù§Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞ –¥—Ä—É–≥–∞`);
                this.app.updateUI();
            }

            console.log('\nüìã –®–ê–ì 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞...');
            const winningPrize = await this.selectRandomPrize();
            
            if (!winningPrize) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –ø—Ä–∏–∑');
            }
            
            console.log('\nüìê –®–ê–ì 2: –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —É–≥–ª–∞...');
            const targetAngle = this.calculateTargetAngleForPrize(winningPrize);
            
            console.log('\nüåÄ –®–ê–ì 3: –ê–Ω–∏–º–∞—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏...');
            await this.animateWheelToTarget(targetAngle);
            
            console.log('\nüèÜ –®–ê–ì 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞...');
            console.log(`üëÅÔ∏è  –ü–û–ö–ê–ó–ê–ù–û: ${winningPrize.name}`);
            console.log(`üí∞ –ü–û–õ–£–ß–ï–ù–û: ${winningPrize.realName || winningPrize.name} (${winningPrize.value})`);
            
            await this.handlePrizeWin(winningPrize);

            console.log('üéä ========== –ü–†–û–ö–†–£–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ==========\n');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏:', error);
            this.app.showStatusMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ —Ä—É–ª–µ—Ç–∫–∏', 'error');
            
            if (type === 'stars') {
                this.app.gameData.stars = originalStars;
                console.log('üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∑–≤–µ–∑–¥—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
            } else if (type === 'friend') {
                this.app.gameData.friendSpinsUsed = originalFriendSpins;
                console.log('‚ù§Ô∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞ –¥—Ä—É–≥–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
            }
            this.app.updateUI();
            this.app.saveGameData();
            
            // –£–ë–†–ê–ù–û: –ò–∑–±—ã—Ç–æ—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - —É–∂–µ –æ—Ç–∫–∞—Ç–∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
        } finally {
            this.isSpinning = false;
            this.updateSpinButtons();
        }
    }

    async selectRandomPrize() {
        try {
            console.log('üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑ –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º —à–∞–Ω—Å–∞–º –∏–∑ –ë–î...');
            
            let realChances = [];
            let apiWorking = false;
            
            try {
                const response = await fetch('/api/wheel-settings/normal');
                console.log('üì° –°—Ç–∞—Ç—É—Å API response:', response.status, response.ok);
                
                if (response.ok) {
                    const settings = await response.json();
                    console.log('üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ API:', settings);
                    
                    if (settings.prizes && settings.prizes.length > 0) {
                        const validPrizes = settings.prizes.filter(p => 
                            p.probability && p.probability > 0 && 
                            p.type && ['empty', 'stars', 'certificate'].includes(p.type)
                        );
                        
                        if (validPrizes.length > 0) {
                            realChances = validPrizes;
                            apiWorking = true;
                            console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —à–∞–Ω—Å—ã:', realChances);
                        } else {
                            console.warn('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', settings.prizes);
                        }
                    } else {
                        console.warn('‚ö†Ô∏è API –æ—Ç–≤–µ—Ç–∏–ª, –Ω–æ –±–µ–∑ –ø—Ä–∏–∑–æ–≤');
                    }
                } else {
                    console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
                }
            } catch (apiError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ API:', apiError);
                console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —à–∞–Ω—Å—ã');
            }
            
            if (!apiWorking) {
                realChances = this.getRealDefaultChances();
                console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —à–∞–Ω—Å—ã:', realChances);
            }
            
            const totalProbability = realChances.reduce((sum, chance) => sum + chance.probability, 0);
            console.log(`üìä –û–±—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${totalProbability}%`);
            
            if (Math.abs(totalProbability - 100) > 0.1) {
                console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π!', totalProbability);
                realChances = [
                    { id: 'empty', type: 'empty', probability: 94, name: '–ü—É—Å—Ç–æ', value: 0 },
                    { id: 'stars20', type: 'stars', probability: 5, name: '20 –∑–≤–µ–∑–¥', value: 20 },
                    { id: 'cert300', type: 'certificate', probability: 1, name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 300‚ÇΩ', value: 300 }
                ];
                console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —à–∞–Ω—Å—ã:', realChances);
            }
            
            const random = Math.random() * 100;
            let cumulative = 0;
            
            console.log(`üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: ${random.toFixed(2)}%`);
            
            for (const realChance of realChances) {
                cumulative += realChance.probability;
                console.log(`üìà ${realChance.name}: ${cumulative.toFixed(2)}% (—Ç–∏–ø: ${realChance.type})`);
                
                if (random < cumulative) {
                    console.log(`‚úÖ –í–´–ü–ê–õ –†–ï–ê–õ–¨–ù–´–ô –ü–†–ò–ó: ${realChance.name} (${realChance.type})`);
                    
                    const visualPrize = this.findVisualPrizeForRealChance(realChance);
                    
                    if (!visualPrize) {
                        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑ –¥–ª—è:', realChance);
                        console.error('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ WHEEL_PRIZES:', WHEEL_PRIZES);
                        return this.createFallbackPrize(realChance);
                    }
                    
                    console.log(`üé® –ù–∞–π–¥–µ–Ω –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑:`, visualPrize);
                    
                    const enhancedPrize = {
                        ...visualPrize,
                        realType: realChance.type,
                        realName: realChance.name,
                        realValue: realChance.value || 0,
                        realDescription: realChance.description,
                        value: realChance.value || 0,
                        isRealPrize: true,
                        debugInfo: {
                            originalVisualType: visualPrize.type,
                            realType: realChance.type,
                            apiWorking: apiWorking
                        }
                    };
                    
                    console.log(`üîó –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏–∑:`, enhancedPrize);
                    console.log(`üëÅÔ∏è  –í–ò–ó–£–ê–õ–¨–ù–û: ${enhancedPrize.name} (${enhancedPrize.type})`);
                    console.log(`üí∞ –†–ï–ê–õ–¨–ù–û: ${enhancedPrize.realName} (${enhancedPrize.realType}, ${enhancedPrize.value})`);
                    
                    return enhancedPrize;
                }
            }
            
            console.log('‚ö†Ô∏è Fallback –Ω–∞ –ø—É—Å—Ç–æ—Ç—É');
            const emptyPrize = WHEEL_PRIZES.find(p => p.type === 'empty') || WHEEL_PRIZES[0];
            return this.createFallbackPrize({ type: 'empty', name: '–ü—É—Å—Ç–æ', value: 0 }, emptyPrize);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
            const emptyPrize = WHEEL_PRIZES.find(p => p.type === 'empty') || WHEEL_PRIZES[0];
            return this.createFallbackPrize({ type: 'empty', name: '–ü—É—Å—Ç–æ', value: 0 }, emptyPrize);
        }
    }

    findVisualPrizeForRealChance(realChance) {
        console.log(`üîç –ò—â–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–∞:`, realChance);
        
        let targetPrize = null;
        
        if (realChance.type === 'empty') {
            targetPrize = WHEEL_PRIZES.find(p => p.type === 'empty');
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø—É—Å—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç:', targetPrize);
            
        } else if (realChance.type === 'stars') {
            targetPrize = WHEEL_PRIZES.find(p => p.type === 'stars');
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ–≥–º–µ–Ω—Ç —Å–æ –∑–≤–µ–∑–¥–∞–º–∏:', targetPrize);
            
        } else if (realChance.type === 'certificate') {
            const certificatePrizes = WHEEL_PRIZES.filter(p => 
                p.type === 'certificate'
            );
            
            if (certificatePrizes.length > 0) {
                const randomIndex = Math.floor(Math.random() * certificatePrizes.length);
                targetPrize = certificatePrizes[randomIndex];
                console.log(`‚úÖ –í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ${randomIndex + 1}/${certificatePrizes.length}:`, targetPrize);
            }
        }
        
        if (!targetPrize) {
            console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è —Ç–∏–ø–∞: ${realChance.type}`);
            targetPrize = WHEEL_PRIZES.find(p => p.type !== 'empty') || WHEEL_PRIZES[0];
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å–µ–≥–º–µ–Ω—Ç:', targetPrize);
        }
        
        return targetPrize;
    }

    calculateTargetAngleForPrize(targetPrize) {
        console.log(`üìê –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≥–æ–ª –¥–ª—è –ø—Ä–∏–∑–∞:`, targetPrize);
        
        const segmentIndex = WHEEL_PRIZES.findIndex(p => p.id === targetPrize.id);
        
        if (segmentIndex === -1) {
            console.error('‚ùå –°–µ–≥–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WHEEL_PRIZES:', targetPrize);
            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:', WHEEL_PRIZES.map(p => ({id: p.id, name: p.name})));
            return 0;
        }
        
        console.log(`üìç –ù–∞–π–¥–µ–Ω —Å–µ–≥–º–µ–Ω—Ç ${segmentIndex + 1}: ${targetPrize.name}`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–ª–µ—Å–∞
        const startOffset = 0; // –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90¬∞ –≤–ø—Ä–∞–≤–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —É–≥–æ–ª –¥–æ —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        let accumulatedAngle = 0;
        for (let i = 0; i < segmentIndex; i++) {
            accumulatedAngle += WHEEL_PRIZES[i].angle || (360 / WHEEL_PRIZES.length);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —É–≥–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ (—Ü–µ–Ω—Ç—Ä)
        const currentSegmentAngle = WHEEL_PRIZES[segmentIndex].angle || (360 / WHEEL_PRIZES.length);
        const segmentCenterAngle = accumulatedAngle + (currentSegmentAngle / 2);
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–æ–ª–µ—Å–∞
        const actualSegmentAngle = segmentCenterAngle + startOffset;
        
        // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–≤–µ—Ä—Ö—É (0¬∞), –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –∫–æ–ª–µ—Å–æ —Ç–∞–∫,
        // —á—Ç–æ–±—ã –Ω—É–∂–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –æ–∫–∞–∑–∞–ª—Å—è —Å–≤–µ—Ä—Ö—É
        // –§–æ—Ä–º—É–ª–∞: –Ω—É–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ —É–≥–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–µ–¥–µ—Ç —Å–µ–≥–º–µ–Ω—Ç –∫ –ø–æ–∑–∏—Ü–∏–∏ 0¬∞
        let targetAngle = -actualSegmentAngle;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0-360
        while (targetAngle < 0) targetAngle += 360;
        while (targetAngle >= 360) targetAngle -= 360;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
        const maxDeviation = (currentSegmentAngle / 2) * 0.4;
        const deviation = (Math.random() - 0.5) * maxDeviation;
        let finalAngle = targetAngle + deviation;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É–≥–æ–ª
        while (finalAngle < 0) finalAngle += 360;
        while (finalAngle >= 360) finalAngle -= 360;
        
        console.log(`üìä –ü–æ–∑–∏—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ –Ω–∞ –∫–æ–ª–µ—Å–µ: ${actualSegmentAngle.toFixed(1)}¬∞ (—Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è -90¬∞)`);
        console.log(`üìä –ù–∞–∫–æ–ø–ª–µ–Ω–æ –¥–æ —Å–µ–≥–º–µ–Ω—Ç–∞: ${accumulatedAngle}¬∞, —à–∏—Ä–∏–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞: ${currentSegmentAngle}¬∞`);
        console.log(`üéØ –¶–µ–ª–µ–≤–æ–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞: ${finalAngle.toFixed(1)}¬∞ (–±–∞–∑–æ–≤—ã–π: ${targetAngle.toFixed(1)}¬∞, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${deviation.toFixed(1)}¬∞)`);
        
        return finalAngle;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–ù–ò–ú–ê–¶–ò–ò - –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨!
    async animateWheelToTarget(targetAngle) {
        const spins = Math.floor(Math.random() * 3) + 5; // 5-7 –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ)
        const currentRotation = this.wheelRotation || 0;
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
        // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ
        let rotationDelta = targetAngle - currentRotation;
        
        // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è, 
        // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ–±–æ—Ä–æ—Ç, —á—Ç–æ–±—ã –∫–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏–ª–æ—Å—å –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ
        if (rotationDelta <= 0) {
            rotationDelta += 360;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        const totalRotation = spins * 360 + rotationDelta;
        
        // –ù–æ–≤–æ–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        const newAbsoluteRotation = currentRotation + totalRotation;
        
        console.log(`üåÄ –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${currentRotation.toFixed(1)}¬∞`);
        console.log(`üåÄ –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ${targetAngle.toFixed(1)}¬∞`);
        console.log(`üåÄ –î–µ–ª—å—Ç–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞: ${rotationDelta.toFixed(1)}¬∞`);
        console.log(`üåÄ –ü–æ–ª–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç: ${totalRotation.toFixed(1)}¬∞ (${spins} –æ–±–æ—Ä–æ—Ç–æ–≤ + ${rotationDelta.toFixed(1)}¬∞)`);
        console.log(`üåÄ –ù–æ–≤–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: ${newAbsoluteRotation.toFixed(1)}¬∞`);
        
        const wheelSvg = document.getElementById('wheel-svg');
        if (!wheelSvg) {
            throw new Error('–≠–ª–µ–º–µ–Ω—Ç wheel-svg –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        wheelSvg.style.transition = `transform ${APP_CONFIG.animations.wheelSpinDuration}ms cubic-bezier(0.17, 0.67, 0.12, 0.99)`;
        wheelSvg.style.transform = `rotate(${newAbsoluteRotation}deg)`;
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        return new Promise(resolve => {
            setTimeout(() => {
                // –ü–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —É–≥–ª–æ–≤
                
                // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ (–±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏) —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–µ—Å–æ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
                wheelSvg.style.transition = 'none';
                wheelSvg.style.transform = `rotate(${targetAngle}deg)`;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
                this.wheelRotation = targetAngle;
                
                console.log(`‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: ${targetAngle.toFixed(1)}¬∞`);
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–º–∏—Å–∞
                setTimeout(() => {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
                    wheelSvg.style.transition = '';
                    resolve();
                }, 50);
                
            }, APP_CONFIG.animations.wheelSpinDuration);
        });
    }

    createFallbackPrize(realChance, visualPrize = null) {
        const fallbackVisual = visualPrize || WHEEL_PRIZES[0];
        
        return {
            ...fallbackVisual,
            realType: realChance.type,
            realName: realChance.name,
            realValue: realChance.value || 0,
            value: realChance.value || 0,
            isRealPrize: true,
            isFallback: true,
            debugInfo: {
                reason: 'fallback_used',
                realType: realChance.type,
                visualType: fallbackVisual?.type
            }
        };
    }

    async handlePrizeWin(prize) {
        console.log('\nüèÜ ========== –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ò–ì–†–´–®–ê ==========');
        console.log('üéÅ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏–∑:', prize);
        console.log('üêõ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', prize.debugInfo);
        
        const realType = prize.realType || prize.type;
        const isRealCertificate = realType === 'certificate';
        const isVisualCertificate = prize.type && (prize.type.startsWith('wildberries') || prize.type.startsWith('golden-apple'));

        console.log(`üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–∞:`, {
            realType: realType,
            visualType: prize.type,
            isRealCertificate: isRealCertificate,
            isVisualCertificate: isVisualCertificate,
            value: prize.value
        });
        const realValue = prize.realValue || prize.value || 0;
        const realName = prize.realName || prize.name;
        
        console.log(`üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞: "${realType}", –∑–Ω–∞—á–µ–Ω–∏–µ: ${realValue}, –∏–º—è: "${realName}"`);
        
        if (realType === 'empty') {
            console.log('üòî –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ü—É—Å—Ç–æ—Ç–∞');
            this.showResultModal({
                icon: 'üòî',
                title: '–ù–µ –ø–æ–≤–µ–∑–ª–æ!',
                description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!',
                type: 'empty'
            });
        } 
        else if (realType === 'stars') {
            console.log(`‚≠ê –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${realValue} –∑–≤–µ–∑–¥`);
            this.showResultModal({
                icon: '‚≠ê',
                title: `–ü–æ–ª—É—á–µ–Ω–æ ${realValue} –∑–≤–µ–∑–¥!`,
                description: `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${realValue} –∑–≤–µ–∑–¥`,
                type: 'stars'
            });
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –ª–æ–∫–∞–ª—å–Ω–æ, –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–∞
            // –°–µ—Ä–≤–µ—Ä —É–∂–µ –¥–æ–±–∞–≤–∏–ª –∑–≤–µ–∑–¥—ã –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ wheel_spin, –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞ –∑–≤–µ–∑–¥...');
            if (this.app.syncBalanceFromServer) {
                const syncSuccess = await this.app.syncBalanceFromServer();
                if (syncSuccess) {
                    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞ ${realValue} –∑–≤–µ–∑–¥`);
                } else {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–∞');
                    // Fallback - –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
                    this.app.gameData.stars = (this.app.gameData.stars || 0) + realValue;
                }
            } else {
                // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                console.warn('‚ö†Ô∏è syncBalanceFromServer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –ª–æ–∫–∞–ª—å–Ω–æ');
                this.app.gameData.stars = (this.app.gameData.stars || 0) + realValue;
            }
            
            console.log(`‚≠ê –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${this.app.gameData.stars} –∑–≤–µ–∑–¥`);
        } 
        else if (realType === 'certificate' || isVisualCertificate) {
            const certificateValue = prize.realValue || prize.value || 300;
            let certificateName = '';
            
            if (prize.type && prize.type.startsWith('wildberries')) {
                certificateName = `WB ${certificateValue}‚ÇΩ`;
            } else if (prize.type && prize.type.startsWith('golden-apple')) {
                certificateName = `–ó–Ø ${certificateValue}‚ÇΩ`;
            } else {
                if (prize.name.includes('WB')) {
                    certificateName = `WB ${certificateValue}‚ÇΩ`;
                } else if (prize.name.includes('–ó–Ø')) {
                    certificateName = `–ó–Ø ${certificateValue}‚ÇΩ`;
                } else {
                    certificateName = `–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ${certificateValue}‚ÇΩ`;
                }
            }
            
            console.log(`üé´ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${certificateName}`);
            this.showResultModal({
                icon: 'üé´',
                title: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!',
                description: `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${certificateName}!`,
                isWin: true,
                prize: prize
            });
            
            this.saveWinToHistory({
                type: 'certificate',
                name: certificateName,
                value: certificateValue,
                timestamp: Date.now()
            });
            
            console.log(`üèÜ –í—ã–∏–≥—Ä–∞–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ${certificateName}`);
        }
        else {
            console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–∑–∞: "${realType}", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`);
            this.showResultModal({
                icon: 'üéÅ',
                title: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!',
                description: realName || '–í—ã —á—Ç–æ-—Ç–æ –≤—ã–∏–≥—Ä–∞–ª–∏!',
                type: 'unknown'
            });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const serverPrize = {
            id: prize.id,
            type: realType,
            name: realName,
            value: realValue,
            description: prize.realDescription || prize.description || '',
            visualType: prize.type,
            visualName: prize.name
        };
        
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:`, serverPrize);
        await this.savePrizeToServer(serverPrize);

        // –£–ë–†–ê–ù–û: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –ø–µ—Ä–µ–±–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        // –ë–∞–ª–∞–Ω—Å —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–∂–¥–æ–º —Ç–∏–ø–µ –ø—Ä–∏–∑–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ

        this.updateLocalDataAfterPrize(prize);
        this.updateRecentWins();
        this.app.updateUI();
        
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –±–∞–ª–∞–Ω—Å
        // this.app.saveGameData(); // –£–±–∏—Ä–∞–µ–º –∏–ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª –±–∞–ª–∞–Ω—Å

        console.log('‚úÖ –í—ã–∏–≥—Ä—ã—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
        console.log('üèÜ ========== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –í–´–ò–ì–†–´–®–ê ==========\n');
    }

    getRealDefaultChances() {
        const defaultChances = [
            { 
                id: 'empty', 
                type: 'empty', 
                probability: 94.0, 
                name: '–ü—É—Å—Ç–æ', 
                value: 0 
            },
            { 
                id: 'stars20', 
                type: 'stars', 
                probability: 5.0, 
                name: '20 –∑–≤–µ–∑–¥', 
                value: 20 
            },
            { 
                id: 'cert300', 
                type: 'certificate', 
                probability: 1.0, 
                name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 300‚ÇΩ', 
                value: 300 
            }
        ];
        
        const total = defaultChances.reduce((sum, chance) => sum + chance.probability, 0);
        console.log(`üìä –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —à–∞–Ω—Å—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: ${total}%`);
        
        if (Math.abs(total - 100) > 0.001) {
            console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —à–∞–Ω—Å—ã!', defaultChances);
        }
        
        return defaultChances;
    }

    testSynchronization() {
        console.log('\nüß™ ========== –¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ==========');
        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤...');
        
        console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ WHEEL_PRIZES (${WHEEL_PRIZES.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤):`);
        WHEEL_PRIZES.forEach((prize, index) => {
            console.log(`  ${index + 1}. ID: ${prize.id}, –¢–∏–ø: "${prize.type}", –ò–º—è: "${prize.name}", –£–≥–æ–ª: ${prize.angle}¬∞`);
        });
        
        const testCases = [
            { type: 'empty', name: '–ü—É—Å—Ç–æ' },
            { type: 'stars', name: '20 –∑–≤–µ–∑–¥' },
            { type: 'certificate', name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç' }
        ];
        
        console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤:');
        testCases.forEach(testCase => {
            console.log(`\n--- –¢–µ—Å—Ç –¥–ª—è "${testCase.name}" (—Ç–∏–ø: ${testCase.type}) ---`);
            const visualPrize = this.findVisualPrizeForRealChance(testCase);
            
            if (visualPrize) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç:`);
                console.log(`   ID: ${visualPrize.id}, –¢–∏–ø: "${visualPrize.type}", –ò–º—è: "${visualPrize.name}"`);
                
                const segmentIndex = WHEEL_PRIZES.findIndex(p => p.id === visualPrize.id);
                if (segmentIndex !== -1) {
                    console.log(`‚úÖ –°–µ–≥–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ WHEEL_PRIZES –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º ${segmentIndex}`);
                    
                    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —É–≥–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                    const targetAngle = this.calculateTargetAngleForPrize(visualPrize);
                    console.log(`üìê –†–∞—Å—á–µ—Ç–Ω—ã–π —É–≥–æ–ª –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —ç—Ç–æ—Ç —Å–µ–≥–º–µ–Ω—Ç: ${targetAngle.toFixed(1)}¬∞`);
                } else {
                    console.error(`‚ùå –°–µ–≥–º–µ–Ω—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ WHEEL_PRIZES!`);
                }
            } else {
                console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è "${testCase.name}"`);
            }
        });
        
        console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≥–ª–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:');
        const totalAngle = WHEEL_PRIZES.reduce((sum, p) => sum + (p.angle || 0), 0);
        console.log(`–û–±—â–∞—è —Å—É–º–º–∞ —É–≥–ª–æ–≤: ${totalAngle}¬∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 360¬∞)`);
        
        if (Math.abs(totalAngle - 360) > 1) {
            console.warn('‚ö†Ô∏è –°—É–º–º–∞ —É–≥–ª–æ–≤ –Ω–µ —Ä–∞–≤–Ω–∞ 360¬∞! –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã');
        } else {
            console.log('‚úÖ –£–≥–ª—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
        }
        
        console.log('\nüé≤ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —à–∞–Ω—Å–æ–≤:');
        const realChances = this.getRealDefaultChances();
        const totalProb = realChances.reduce((sum, chance) => sum + chance.probability, 0);
        console.log(`–û–±—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${totalProb}%`);
        
        if (Math.abs(totalProb - 100) > 0.1) {
            console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π!');
        } else {
            console.log('‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–µ—Å–∞
        console.log('\nüé° –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ª–µ—Å–∞:');
        console.log(`–¢–µ–∫—É—â–∏–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞: ${this.wheelRotation}¬∞`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
        console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∫–æ–ª–µ—Å–µ (—Å–º–µ—â–µ–Ω–∏–µ 0¬∞):');
        const startOffset = 0; // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
        let currentAngle = 0;
        
        WHEEL_PRIZES.forEach((prize, index) => {
            const segmentAngle = prize.angle || (360 / WHEEL_PRIZES.length);
            const startAngle = currentAngle;
            const endAngle = currentAngle + segmentAngle;
            const centerAngle = currentAngle + segmentAngle / 2;
            
            // –†–µ–∞–ª—å–Ω—ã–µ —É–≥–ª—ã –Ω–∞ –∫–æ–ª–µ—Å–µ —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
            const actualStart = startAngle + startOffset;
            const actualEnd = endAngle + startOffset;
            const actualCenter = centerAngle + startOffset;
            
            // –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —ç—Ç–æ—Ç —Å–µ–≥–º–µ–Ω—Ç
            let targetRotation = -actualCenter;
            while (targetRotation < 0) targetRotation += 360;
            
            console.log(`${index + 1}. ${prize.name}:`);
            console.log(`   –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —É–≥–ª—ã: ${startAngle.toFixed(1)}¬∞ - ${endAngle.toFixed(1)}¬∞ (—Ü–µ–Ω—Ç—Ä: ${centerAngle.toFixed(1)}¬∞)`);
            console.log(`   –†–µ–∞–ª—å–Ω—ã–µ —É–≥–ª—ã –Ω–∞ –∫–æ–ª–µ—Å–µ: ${actualStart.toFixed(1)}¬∞ - ${actualEnd.toFixed(1)}¬∞ (—Ü–µ–Ω—Ç—Ä: ${actualCenter.toFixed(1)}¬∞)`);
            console.log(`   –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è: ${targetRotation.toFixed(1)}¬∞`);
            
            currentAngle += segmentAngle;
        });
        
        console.log('üß™ ========== –ö–û–ù–ï–¶ –¢–ï–°–¢–ê ==========\n');
    }

    showResultModal(result) {
        console.log('üé≠ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', result);
        
        const existingModals = document.querySelectorAll('.prize-result-modal');
        existingModals.forEach(modal => modal.remove());
        
        const modal = document.createElement('div');
        modal.className = 'prize-result-modal';
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        const isWinningCertificate = result.isWin && result.prize && 
                                   (result.prize.realType === 'certificate' || 
                                    result.prize.type === 'certificate');
        
        let managerButtonHtml = '';
        if (isWinningCertificate) {
            managerButtonHtml = `
                <button class="prize-result-manager" type="button" id="contact-manager-btn">
                    üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
                </button>
            `;
        }
        
        modal.innerHTML = `
            <div class="prize-result-overlay"></div>
            <div class="prize-result-content">
                <div class="prize-result-icon">${result.icon}</div>
                <h2 class="prize-result-title">${result.title}</h2>
                <p class="prize-result-description">${result.description}</p>
                ${managerButtonHtml}
                <button class="prize-result-close" type="button">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        setTimeout(() => {
            modal.classList.add('show');
        }, 50);
        
        const closeBtn = modal.querySelector('.prize-result-close');
        const overlay = modal.querySelector('.prize-result-overlay');
        const managerBtn = modal.querySelector('#contact-manager-btn');
        
        const closeModal = () => {
            modal.classList.remove('show');
            setTimeout(() => {
                if (document.body.contains(modal)) {
                    modal.remove();
                }
            }, 300);
        };
        
        closeBtn.addEventListener('click', closeModal);
        overlay.addEventListener('click', closeModal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        if (managerBtn && isWinningCertificate) {
            managerBtn.addEventListener('click', async (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                console.log('üìû –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º');
                
                try {
                    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–µ –∏–∑ –ë–î
                    const prizeInfo = await this.getPrizeFromDatabase(result.prize);
                    const message = this.generatePrizeMessage(prizeInfo);
                    
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
                    this.openManagerChat(message);
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    closeModal();
                    
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:', error);
                    this.app.showStatusMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', 'error');
                }
            });
        }
        
        setTimeout(closeModal, 5000);
        
        if (this.app.tg && this.app.tg.HapticFeedback) {
            if (result.type === 'empty') {
                this.app.tg.HapticFeedback.notificationOccurred('error');
            } else {
                this.app.tg.HapticFeedback.notificationOccurred('success');
            }
        }
    }

    updateLocalDataAfterPrize(prize) {
        console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–∏–∑–∞:', prize);
        
        this.app.gameData.totalSpins = (this.app.gameData.totalSpins || 0) + 1;
        
        if (prize.type !== 'empty' && prize.value > 0) {
            this.app.gameData.prizesWon = (this.app.gameData.prizesWon || 0) + 1;
            
            if (!this.app.gameData.prizes) {
                this.app.gameData.prizes = [];
            }
            
            this.app.gameData.prizes.push({
                ...prize,
                timestamp: Date.now(),
                claimed: prize.type.includes('stars')
            });
        }
        
        if (!this.app.gameData.recentWins) {
            this.app.gameData.recentWins = [];
        }
        
        this.app.gameData.recentWins.unshift({
            prize: prize,
            timestamp: Date.now()
        });
        
        if (this.app.gameData.recentWins.length > 10) {
            this.app.gameData.recentWins = this.app.gameData.recentWins.slice(0, 10);
        }
        
        console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    async savePrizeToServer(prize) {
        console.log('üéÅ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', prize);
        
        if (!window.telegramIntegration?.sendToServer) {
            console.error('‚ùå telegramIntegration –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }
        
        if (!window.telegramIntegration.user?.id) {
            console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
            return false;
        }
        
        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            let displayName = prize.name;
            
            // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if (prize.type === 'certificate' || prize.visualType?.includes('wildberries') || prize.visualType?.includes('golden-apple')) {
                const value = Number(prize.value) || 300;
                
                if (prize.visualName?.includes('WB') || prize.visualType?.includes('wildberries')) {
                    displayName = `WB ${value}‚ÇΩ`;
                } else if (prize.visualName?.includes('–ó–Ø') || prize.visualType?.includes('golden-apple')) {
                    displayName = `–ó–Ø ${value}‚ÇΩ`;
                } else {
                    displayName = `–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ${value}‚ÇΩ`;
                }
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userName = this.app.tg?.initDataUnsafe?.user?.first_name || 
                           window.telegramIntegration.user?.first_name || 
                           '–ò–≥—Ä–æ–∫';
            
            const spinData = {
                spinType: 'normal',
                prize: {
                    id: prize.id || Math.floor(Math.random() * 1000000),
                    name: displayName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
                    type: prize.type || 'empty',
                    value: Number(prize.value) || 0,
                    probability: prize.probability || 0
                },
                timestamp: new Date().toISOString(),
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–±–µ–∑ ID)
                userName: userName
            };
            
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', spinData);
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userName);
            
            const response = await window.telegramIntegration.sendToServer('wheel_spin', spinData);
            
            console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
            
            if (response && response.success === true) {
                console.log('‚úÖ –ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                
                // –ï—Å–ª–∏ —ç—Ç–æ —Ü–µ–Ω–Ω—ã–π –ø—Ä–∏–∑, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                if (prize.type === 'certificate' && prize.value >= 300) {
                    console.log('üéä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä—É–ø–Ω–æ–º –≤—ã–∏–≥—Ä—ã—à–µ');
                }
                
                return true;
            } else {
                console.error('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', response);
                
                if (response?.error) {
                    console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', response.error);
                    if (response.details) {
                        console.error('üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', response.details);
                    }
                    
                    if (response.error.includes('Invalid') || response.error.includes('validation')) {
                        this.app.showStatusMessage('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'warning', 4000);
                    } else {
                        this.app.showStatusMessage(`‚ùå ${response.error}`, 'error', 4000);
                    }
                } else {
                    this.app.showStatusMessage('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'error', 3000);
                }
                
                return false;
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
            
            if (error.message?.includes('429')) {
                this.app.showStatusMessage('‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.', 'warning', 4000);
            } else if (error.message?.includes('400')) {
                this.app.showStatusMessage('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞', 'warning', 4000);
            } else if (error.message?.includes('500')) {
                this.app.showStatusMessage('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'error', 3000);
            } else {
                this.app.showStatusMessage('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'error', 3000);
            }
            
            return false;
        }
    }

    saveWinToHistory(winData) {
        if (!this.app.gameData.winHistory) {
            this.app.gameData.winHistory = [];
        }
        
        this.app.gameData.winHistory.unshift(winData);
        
        if (this.app.gameData.winHistory.length > 50) {
            this.app.gameData.winHistory = this.app.gameData.winHistory.slice(0, 50);
        }
        
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤—ã–∏–≥—Ä—ã—à –≤ –∏—Å—Ç–æ—Ä–∏—é:', winData);
    }

    updateSpinButtons() {
        const spinStarsBtn = document.getElementById('spin-button-stars');
        const spinFriendBtn = document.getElementById('spin-button-friend');

        if (spinStarsBtn) {
            const canSpinStars = !this.isSpinning && this.app.gameData.stars >= APP_CONFIG.wheel.starCost;
            spinStarsBtn.disabled = !canSpinStars;
            spinStarsBtn.classList.toggle('disabled', !canSpinStars);
            
            if (this.isSpinning) {
                spinStarsBtn.innerHTML = `<i class="fas fa-spinner fa-spin"></i><span>–ö—Ä—É—Ç–∏—Ç—Å—è...</span>`;
            } else {
                spinStarsBtn.innerHTML = `<i class="fas fa-star"></i><span>–ó–∞ 20 ‚≠ê</span>`;
            }
        }

        if (spinFriendBtn) {
            const referralsCount = this.app.gameData.referrals || 0;
            const friendSpinsUsed = this.app.gameData.friendSpinsUsed || 0;
            const availableSpins = Math.max(0, referralsCount - friendSpinsUsed);
            
            const canInteract = !this.isSpinning;
            spinFriendBtn.disabled = !canInteract;
            spinFriendBtn.classList.toggle('disabled', !canInteract);
            
            if (this.isSpinning) {
                spinFriendBtn.innerHTML = `<i class="fas fa-spinner fa-spin"></i><span>–ö—Ä—É—Ç–∏—Ç—Å—è...</span>`;
            } else if (referralsCount === 0) {
                spinFriendBtn.innerHTML = `<i class="fas fa-share"></i><span>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞</span>`;
            } else if (availableSpins === 0) {
                spinFriendBtn.innerHTML = `<i class="fas fa-heart"></i><span>–ü—Ä–∏–≥–ª–∞—Å–∏ –µ—â–µ</span>`;
            } else {
                spinFriendBtn.innerHTML = `<i class="fas fa-heart"></i><span>–ó–∞ –¥—Ä—É–≥–∞ (${availableSpins})</span>`;
            }
        }
    }

    updateRecentWins() {
        const container = document.getElementById('recent-wins-list');
        if (!container) return;

        const recentWins = this.app.gameData.recentWins || [];
        
        if (recentWins.length === 0) {
            container.innerHTML = '<div class="recent-win-item empty">–í—ã–∏–≥—Ä—ã—à–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</div>';
            return;
        }

        container.innerHTML = recentWins.map(win => `
            <div class="recent-win-item">
                <span>${win.prize.icon || 'üéÅ'}</span>
                <div class="win-description">${win.prize.name}</div>
                <div class="win-time">${this.formatTime(win.timestamp)}</div>
            </div>
        `).join('');
    }

    formatTime(timestamp) {
        const date = new Date(timestamp);
        const now = new Date();
        const diff = now - date;
        
        if (diff < 60000) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (diff < 3600000) return `${Math.floor(diff / 60000)} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        if (diff < 86400000) return `${Math.floor(diff / 3600000)} —á –Ω–∞–∑–∞–¥`;
        return `${Math.floor(diff / 86400000)} –¥–Ω –Ω–∞–∑–∞–¥`;
    }

    openMegaRoulette() {
        if (this.app.navigation) {
            this.app.navigation.navigateTo('mega-roulette');
        } else {
            this.app.showStatusMessage('–ú–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'info');
        }
    }

    refreshEventListeners() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞...');
        this.setupEventListeners();
    }

    destroy() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞...');
        this.removeEventListeners();
    }

    showReferralLink() {
        const userId = this.app.tg?.initDataUnsafe?.user?.id || 'demo';
        const botUsername = 'kosmetichka_lottery_bot';
        const referralLink = `https://t.me/${botUsername}?start=ref_${userId}`;
        
        const modal = document.createElement('div');
        modal.className = 'referral-modal';
        modal.innerHTML = `
            <div class="referral-modal-content">
                <div class="referral-header">
                    <h3>üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫—É!</h3>
                    <button class="close-modal" type="button">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="referral-body">
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏!</p>
                    <div class="referral-link-container">
                        <input type="text" id="referral-link" value="${referralLink}" readonly>
                        <button class="copy-btn" type="button" id="copy-referral-btn" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                    <div class="referral-info">
                        <p>üí´ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–∞!</p>
                    </div>
                    <button class="share-btn" type="button" id="share-referral-btn">
                        <i class="fas fa-share"></i>
                        <span>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram</span>
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        modal.querySelector('.close-modal').addEventListener('click', () => {
            modal.remove();
        });
        
        modal.querySelector('#copy-referral-btn').addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log('üîó –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
            this.copyReferralLink(referralLink);
        });
        
        modal.querySelector('#share-referral-btn').addEventListener('click', () => {
            const shareText = 'üé∞ –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Kosmetichka Lottery Bot - –∫—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –ø—Ä–∏–∑—ã! üíÑ‚ú®';
            const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(shareText)}`;
            
            if (this.app.tg && this.app.tg.openTelegramLink) {
                this.app.tg.openTelegramLink(shareUrl);
            } else {
                window.open(shareUrl, '_blank');
            }
        });
        
        this.copyReferralLink(referralLink);
    }
    
    copyReferralLink(link) {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(link).then(() => {
                this.app.showStatusMessage('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
            }).catch(() => {
                this.fallbackCopyTextToClipboard(link);
            });
        } else {
            this.fallbackCopyTextToClipboard(link);
        }
    }
    
    fallbackCopyTextToClipboard(text) {
        const textArea = document.createElement("textarea");
        textArea.value = text;
        textArea.style.top = "0";
        textArea.style.left = "0";
        textArea.style.position = "fixed";
        
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            this.app.showStatusMessage('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        } catch (err) {
            this.app.showStatusMessage('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', 'error');
        }
        
        document.body.removeChild(textArea);
    }

    openSupport() {
        console.log('üéß –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞');
        
        if (this.app.tg?.openTelegramLink) {
            this.app.tg.openTelegramLink('https://t.me/kosmetichkasupport');
            this.app.showStatusMessage('–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É...', 'info');
        } else if (window.open) {
            window.open('https://t.me/kosmetichkasupport', '_blank');
        } else {
            this.app.showStatusMessage('–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @kosmetichkasupport', 'info');
        }
    }

    debugWheelSynchronization() {
        console.log('\nüß™ ========== –û–¢–õ–ê–î–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ==========');
        
        console.log(`üìã WHEEL_PRIZES (${WHEEL_PRIZES.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤):`);
        const typeCount = {};
        let totalAngle = 0;
        
        WHEEL_PRIZES.forEach((prize, index) => {
            console.log(`  ${index + 1}. ID: ${prize.id}, –¢–∏–ø: "${prize.type}", –£–≥–æ–ª: ${prize.angle}¬∞, –ò–º—è: "${prize.name}"`);
            typeCount[prize.type] = (typeCount[prize.type] || 0) + 1;
            totalAngle += prize.angle || 0;
        });
        
        console.log('üìä –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤:', typeCount);
        console.log(`üìê –û–±—â–∏–π —É–≥–æ–ª: ${totalAngle}¬∞ (–Ω–æ—Ä–º–∞: 360¬∞)`);
        
        this.testAPIConnection();
        
        console.log('üß™ ========== –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ==========\n');
    }

    async testAPIConnection() {
        try {
            console.log('üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...');
            const response = await fetch('/api/wheel-settings/normal');
            console.log(`üì° API —Å—Ç–∞—Ç—É—Å: ${response.status}`);
            
            if (response.ok) {
                const data = await response.json();
                console.log('üìã API –¥–∞–Ω–Ω—ã–µ:', data);
            }
        } catch (error) {
            console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:', error);
        }
    }

    debugWheelSync() {
        console.log('\nüß™ ========== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ö–û–õ–ï–°–ê ==========');
        
        console.log(`üìã WHEEL_PRIZES (${WHEEL_PRIZES.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤):`);
        WHEEL_PRIZES.forEach((prize, index) => {
            console.log(`  ${index + 1}. ID: ${prize.id}, –¢–∏–ø: "${prize.type}", –ò–º—è: "${prize.name}", –£–≥–æ–ª: ${prize.angle}¬∞`);
        });
        
        const totalAngle = WHEEL_PRIZES.reduce((sum, p) => sum + (p.angle || 0), 0);
        console.log(`üìê –û–±—â–∏–π —É–≥–æ–ª: ${totalAngle}¬∞ ${totalAngle === 360 ? '‚úÖ' : '‚ùå'}`);
        
        console.log('\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Ç–∏–ø–æ–≤:');
        const testCases = [
            { type: 'empty', name: '–ü—É—Å—Ç–æ' },
            { type: 'stars', name: '20 –∑–≤–µ–∑–¥' },
            { type: 'certificate', name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç' }
        ];
        
        testCases.forEach(testCase => {
            console.log(`\n--- –¢–µ—Å—Ç –¥–ª—è "${testCase.name}" (${testCase.type}) ---`);
            const visualPrize = this.findVisualPrizeForRealChance(testCase);
            
            if (visualPrize) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω: ${visualPrize.name} (${visualPrize.type})`);
                
                const index = WHEEL_PRIZES.findIndex(p => p.id === visualPrize.id);
                console.log(`üìç –ò–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ: ${index >= 0 ? index : '–ù–ï –ù–ê–ô–î–ï–ù ‚ùå'}`);
            } else {
                console.error(`‚ùå –ù–ï –ù–ê–ô–î–ï–ù –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç!`);
            }
        });
        
        console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...');
        this.testAPI();
        
        console.log('\nüß™ ========== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ==========\n');
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    async syncStarsWithServer() {
        try {
            if (!window.telegramIntegration?.sendToServer) {
                console.error('‚ùå telegramIntegration –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
                return false;
            }
            
            const syncData = {
                stars: this.app.gameData.stars,
                timestamp: new Date().toISOString()
            };
            
            console.log(`üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞: ${this.app.gameData.stars} –∑–≤–µ–∑–¥`);
            
            const response = await window.telegramIntegration.sendToServer('update_stars', syncData);
            
            if (response?.success) {
                console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–µ—Ä–≤–µ—Ä–æ–º`);
                return true;
            }
            
            return false;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
            return false;
        }
    }

    async testAPI() {
        try {
            const response = await fetch('/api/wheel-settings/normal');
            console.log(`üì° API —Å—Ç–∞—Ç—É—Å: ${response.status} ${response.ok ? '‚úÖ' : '‚ùå'}`);
            
            if (response.ok) {
                const data = await response.json();
                console.log('üìã API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:', data);
                
                if (data.prizes) {
                    const totalProb = data.prizes.reduce((sum, p) => sum + p.probability, 0);
                    console.log(`üé≤ –°—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π: ${totalProb}% ${Math.abs(totalProb - 100) < 0.1 ? '‚úÖ' : '‚ùå'}`);
                }
            }
        } catch (error) {
            console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:', error.message);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–∑–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    async getPrizeFromDatabase(prize) {
        try {
            console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–µ –∏–∑ –ë–î:', prize);
            
            if (!window.telegramIntegration?.sendToServer) {
                console.warn('‚ö†Ô∏è telegramIntegration –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                return prize; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑ –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∏
            }
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            const response = await window.telegramIntegration.sendToServer('verify_prize', {
                prizeId: prize.id,
                userId: this.app.tg?.initDataUnsafe?.user?.id,
                timestamp: Date.now()
            });
            
            if (response?.success && response.prizeData) {
                console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–∑–µ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –ë–î:', response.prizeData);
                return response.prizeData;
            } else {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                return prize;
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–∑–µ:', error);
            return prize; // Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–∑–µ
    generatePrizeMessage(prizeInfo) {
        const userName = this.app.tg?.initDataUnsafe?.user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const userId = this.app.tg?.initDataUnsafe?.user?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
        const currentTime = new Date().toLocaleString('ru-RU');
        
        let prizeName = prizeInfo.realName || prizeInfo.name || '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç';
        let prizeValue = prizeInfo.realValue || prizeInfo.value || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (prizeName.includes('WB')) {
            prizeName = `–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç Wildberries –Ω–∞ ${prizeValue}‚ÇΩ`;
        } else if (prizeName.includes('–ó–Ø')) {
            prizeName = `–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ –Ω–∞ ${prizeValue}‚ÇΩ`;
        }
        
        const message = `üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –≤—ã–∏–≥—Ä–∞–ª ${prizeName} –≤ –ª–æ—Ç–µ—Ä–µ–µ Kosmetichka!

üë§ –ò–º—è: ${userName}
üÜî ID: ${userId}
üéÅ –ü—Ä–∏–∑: ${prizeName}
‚è∞ –í—Ä–µ–º—è –≤—ã–∏–≥—Ä—ã—à–∞: ${currentTime}

–ö–∞–∫ –º–Ω–µ –ø–æ–ª—É—á–∏—Ç—å –º–æ–π –ø—Ä–∏–∑? üòä`;

        console.log('üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', message);
        return message;
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    openManagerChat(message) {
        try {
            const managerUsername = 'kosmetichkasupport';
            const encodedMessage = encodeURIComponent(message);
            const chatUrl = `https://t.me/${managerUsername}?text=${encodedMessage}`;
            
            console.log(`üìû –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @${managerUsername}`);
            console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp API –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏
            if (this.app.tg && this.app.tg.openTelegramLink) {
                this.app.tg.openTelegramLink(chatUrl);
                this.app.showStatusMessage('–û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º...', 'info');
            } else if (this.app.tg && this.app.tg.openLink) {
                this.app.tg.openLink(chatUrl);
                this.app.showStatusMessage('–û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º...', 'info');
            } else {
                // Fallback –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
                window.open(chatUrl, '_blank');
                this.app.showStatusMessage('–û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º...', 'info');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞:', error);
            this.app.showStatusMessage('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', 'error');
        }
    }
}
