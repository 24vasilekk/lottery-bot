// screens/main.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —Ä–∞–±–æ—á–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏

import { WHEEL_PRIZES, APP_CONFIG } from '../config.js';

export class MainScreen {
    constructor(app) {
        this.app = app;
        this.isSpinning = false;
        this.wheelRotation = 0;
        this.initialized = false;
    }

    render() {
        return `
            <div id="main-screen" class="screen active">
                <div class="header">
                    <div class="user-info">
                        <div id="profile-pic" class="profile-pic" tabindex="0" role="button" aria-label="–ü—Ä–æ—Ñ–∏–ª—å">
                            ${this.app.tg?.initDataUnsafe?.user?.first_name?.charAt(0) || 'üë§'}
                        </div>
                        <div class="user-details">
                            <div class="user-name">${this.app.tg?.initDataUnsafe?.user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</div>
                            <div class="user-stars">
                                <span id="star-count">${this.app.gameData.stars}</span> ‚≠ê
                                <button id="deposit-btn" class="deposit-quick-btn" onclick="navigateToDeposit()" title="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <button id="mega-roulette-btn" class="mega-btn" aria-label="–ú–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∞">
                        üëë –ú–ï–ì–ê
                    </button>
                </div>

                <div class="wheel-container">
                    <div class="wheel" id="wheel">
                        <div class="wheel-pointer"></div>
                        <svg id="wheel-svg" width="400" height="400" viewBox="0 0 400 400">
                            <g id="wheel-segments"></g>
                        </svg>
                        <div class="wheel-center">SPIN</div>
                    </div>

                    <div class="spin-controls">
                        <div class="spin-buttons">
                            <button id="spin-button-stars" class="spin-btn primary" type="button">
                                <i class="fas fa-star"></i>
                                <span>–ó–∞ 20 ‚≠ê</span>
                            </button>
                            <button id="spin-button-friend" class="spin-btn secondary" type="button">
                                <i class="fas fa-heart"></i>
                                <span id="friend-button-text">–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞ –¥—Ä—É–≥–∞</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="recent-wins">
                    <span class="recent-wins-title">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏</span>
                    <div class="recent-wins-list" id="recent-wins-list">
                        <!-- Recent wins will be shown here -->
                    </div>
                </div>
            </div>
        `;
    }

    init() {
        console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞...');
        
        try {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DOM
            setTimeout(() => {
                this.generateWheelSVG();
                this.setupEventListeners();
                this.updateRecentWins();
                this.updateSpinButtons();
                this.initialized = true;
                console.log('‚úÖ –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }, 100);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞:', error);
        }
    }

    setupEventListeners() {
        console.log('üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        this.removeEventListeners();
        
        // –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        const spinStarsBtn = document.getElementById('spin-button-stars');
        const spinFriendBtn = document.getElementById('spin-button-friend');
        
        if (spinStarsBtn) {
            this.starsBtnHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                if (!this.isSpinning && !spinStarsBtn.disabled) {
                    this.spinWheel('stars');
                }
            };
            spinStarsBtn.addEventListener('click', this.starsBtnHandler);
            spinStarsBtn.addEventListener('touchend', this.starsBtnHandler);
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–æ–±–∞–≤–ª–µ–Ω');
        } else {
            console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –∑–≤–µ–∑–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        if (spinFriendBtn) {
            this.friendBtnHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                if (!this.isSpinning && !spinFriendBtn.disabled) {
                    this.spinWheel('friend');
                }
            };
            spinFriendBtn.addEventListener('click', this.friendBtnHandler);
            spinFriendBtn.addEventListener('touchend', this.friendBtnHandler);
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥—Ä—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω');
        } else {
            console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –¥—Ä—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –ö–Ω–æ–ø–∫–∞ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏
        const megaBtn = document.getElementById('mega-roulette-btn');
        if (megaBtn) {
            this.megaBtnHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.openMegaRoulette();
            };
            megaBtn.addEventListener('click', this.megaBtnHandler);
            megaBtn.addEventListener('touchend', this.megaBtnHandler);
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–≥–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω');
        }
        
        // –ü—Ä–æ—Ñ–∏–ª—å
        const profilePic = document.getElementById('profile-pic');
        if (profilePic) {
            this.profileHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.app.navigation.navigateTo('profile');
            };
            profilePic.addEventListener('click', this.profileHandler);
            profilePic.addEventListener('touchend', this.profileHandler);
            profilePic.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.profileHandler(e);
                }
            });
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–±–∞–≤–ª–µ–Ω');
        }

        console.log('‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    removeEventListeners() {
        console.log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        const spinStarsBtn = document.getElementById('spin-button-stars');
        const spinFriendBtn = document.getElementById('spin-button-friend');
        const megaBtn = document.getElementById('mega-roulette-btn');
        const profilePic = document.getElementById('profile-pic');
        
        if (spinStarsBtn && this.starsBtnHandler) {
            spinStarsBtn.removeEventListener('click', this.starsBtnHandler);
            spinStarsBtn.removeEventListener('touchend', this.starsBtnHandler);
        }
        
        if (spinFriendBtn && this.friendBtnHandler) {
            spinFriendBtn.removeEventListener('click', this.friendBtnHandler);
            spinFriendBtn.removeEventListener('touchend', this.friendBtnHandler);
        }
        
        if (megaBtn && this.megaBtnHandler) {
            megaBtn.removeEventListener('click', this.megaBtnHandler);
            megaBtn.removeEventListener('touchend', this.megaBtnHandler);
        }
        
        if (profilePic && this.profileHandler) {
            profilePic.removeEventListener('click', this.profileHandler);
            profilePic.removeEventListener('touchend', this.profileHandler);
            profilePic.removeEventListener('keydown', this.profileHandler);
        }
    }

    generateWheelSVG() {
        const container = document.getElementById('wheel-segments');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ä—É–ª–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const radius = 180;
        const centerX = 200;
        const centerY = 200;
        const anglePerSegment = (2 * Math.PI) / WHEEL_PRIZES.length;

        // –ö—Ä–∞—Å–∏–≤—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ—Ñ–∏–ª—è
        const segmentColors = [
            'linear-gradient(135deg, #ff6b9d 0%, #c44569 100%)', // –†–æ–∑–æ–≤–æ-–º–∞–ª–∏–Ω–æ–≤—ã–π
            'linear-gradient(135deg, #764ba2 0%, #667eea 100%)', // –§–∏–æ–ª–µ—Ç–æ–≤–æ-—Å–∏–Ω–∏–π  
            'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)', // –†–æ–∑–æ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
            'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)', // –°–∏–Ω–µ-–≥–æ–ª—É–±–æ–π
            'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)', // –ó–µ–ª–µ–Ω–æ-–º—è—Ç–Ω—ã–π
            'linear-gradient(135deg, #fa709a 0%, #fee140 100%)', // –†–æ–∑–æ–≤–æ-–∂–µ–ª—Ç—ã–π
            'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)', // –ú—è—Ç–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
            'linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%)', // –ö–æ—Ä–∞–ª–ª–æ–≤—ã–π
            'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', // –°–∏–Ω–∏–π-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            'linear-gradient(135deg, #f6d365 0%, #fda085 100%)', // –ñ–µ–ª—Ç–æ-–ø–µ—Ä—Å–∏–∫–æ–≤—ã–π
            'linear-gradient(135deg, #96fbc4 0%, #f9f586 100%)', // –ó–µ–ª–µ–Ω–æ-–∂–µ–ª—Ç—ã–π
            'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)'  // –ö—Ä–µ–º–æ–≤–æ-–ø–µ—Ä—Å–∏–∫–æ–≤—ã–π
        ];

        let svgContent = '';
        
        // –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
        let defsContent = '<defs>';
        segmentColors.forEach((gradient, index) => {
            const gradientMatch = gradient.match(/linear-gradient\(135deg,\s*([^,]+)\s*0%,\s*([^)]+)\s*100%\)/);
            if (gradientMatch) {
                const [, color1, color2] = gradientMatch;
                defsContent += `
                    <linearGradient id="gradient${index}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:${color1.trim()};stop-opacity:1" />
                        <stop offset="100%" style="stop-color:${color2.trim()};stop-opacity:1" />
                    </linearGradient>
                `;
            }
        });
        defsContent += '</defs>';

        WHEEL_PRIZES.forEach((prize, index) => {
            const startAngle = index * anglePerSegment - Math.PI / 2;
            const endAngle = (index + 1) * anglePerSegment - Math.PI / 2;

            const x1 = centerX + radius * Math.cos(startAngle);
            const y1 = centerY + radius * Math.sin(startAngle);
            const x2 = centerX + radius * Math.cos(endAngle);
            const y2 = centerY + radius * Math.sin(endAngle);

            const largeArc = anglePerSegment > Math.PI ? 1 : 0;

            const path = `M ${centerX} ${centerY} L ${x1} ${y1} A ${radius} ${radius} 0 ${largeArc} 1 ${x2} ${y2} Z`;

            // –¢–µ–∫—Å—Ç –∏–∫–æ–Ω–∫–∏
            const textAngle = (startAngle + endAngle) / 2;
            const textRadius = radius * 0.7;
            const textX = centerX + textRadius * Math.cos(textAngle);
            const textY = centerY + textRadius * Math.sin(textAngle);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
            const gradientIndex = index % segmentColors.length;

            svgContent += `
                <path 
                    d="${path}" 
                    fill="url(#gradient${gradientIndex})" 
                    stroke="rgba(255,255,255,0.3)" 
                    stroke-width="2"
                    class="wheel-segment-path"
                    data-prize-id="${prize.id}"
                    filter="drop-shadow(0 4px 8px rgba(0,0,0,0.3))"
                />
                <text 
                    x="${textX}" 
                    y="${textY}" 
                    text-anchor="middle" 
                    dominant-baseline="middle" 
                    font-size="24" 
                    fill="white"
                    font-weight="bold"
                    class="segment-icon"
                    filter="drop-shadow(0 2px 4px rgba(0,0,0,0.5))"
                >${prize.icon}</text>
            `;
        });

        container.innerHTML = defsContent + svgContent;
        console.log('‚úÖ –ö—Ä–∞—Å–∏–≤–∞—è SVG —Ä—É–ª–µ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
    }

    async spinWheel(type) {
        if (this.isSpinning) {
            console.log('‚è≥ –†—É–ª–µ—Ç–∫–∞ —É–∂–µ –∫—Ä—É—Ç–∏—Ç—Å—è');
            return;
        }

        console.log(`üé∞ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Ä—É–ª–µ—Ç–∫–∏: ${type}`);
        this.lastSpinType = type; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø—Ä–æ–∫—Ä—É—Ç–∫–∏

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        if (type === 'stars' && this.app.gameData.stars < APP_CONFIG.wheel.starCost) {
            this.app.showStatusMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏!', 'error');
            console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥');
            return;
        }

        if (type === 'friend') {
            const referralsCount = this.app.gameData.referrals || 0;
            const friendSpinsUsed = this.app.gameData.friendSpinsUsed || 0;
            
            if (referralsCount === 0) {
                this.showReferralLink();
                return;
            }
            
            if (friendSpinsUsed >= referralsCount) {
                this.showReferralLink();
                return;
            }
        }

        this.isSpinning = true;
        this.updateSpinButtons();

        // –°–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        if (type === 'stars') {
            this.app.gameData.stars -= APP_CONFIG.wheel.starCost;
            console.log(`üí∞ –°–ø–∏—Å–∞–Ω–æ ${APP_CONFIG.wheel.starCost} –∑–≤–µ–∑–¥. –û—Å—Ç–∞–ª–æ—Å—å: ${this.app.gameData.stars}`);
        } else if (type === 'friend') {
            this.app.gameData.friendSpinsUsed = (this.app.gameData.friendSpinsUsed || 0) + 1;
            console.log(`‚ù§Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞ –¥—Ä—É–≥–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${this.app.gameData.friendSpinsUsed}`);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        this.app.updateUI();

        try {
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ –ø—Ä–∏–∑–∞
            const winningPrize = this.selectRandomPrize();
            const prizeIndex = WHEEL_PRIZES.findIndex(p => p.id === winningPrize.id);
            
            console.log(`üéÅ –í—ã–ø–∞–ª –ø—Ä–∏–∑: ${winningPrize.name} (–∏–Ω–¥–µ–∫—Å: ${prizeIndex})`);
            
            // –†–∞—Å—á–µ—Ç —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
            const segmentAngle = 360 / WHEEL_PRIZES.length;
            const targetAngle = prizeIndex * segmentAngle + (segmentAngle / 2);
            const spins = Math.floor(Math.random() * 3) + APP_CONFIG.wheel.minSpins;
            const finalRotation = spins * 360 + (360 - targetAngle);

            console.log(`üåÄ –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ ${finalRotation} –≥—Ä–∞–¥—É—Å–æ–≤ (${spins} –æ–±–æ—Ä–æ—Ç–æ–≤ + ${360 - targetAngle})`);

            // –ê–Ω–∏–º–∞—Ü–∏—è SVG —Ä—É–ª–µ—Ç–∫–∏
            const wheelSvg = document.getElementById('wheel-svg');
            
            this.wheelRotation += finalRotation;
            const transform = `rotate(${this.wheelRotation}deg)`;
            const transition = `transform ${APP_CONFIG.animations.wheelSpinDuration}ms cubic-bezier(0.17, 0.67, 0.12, 0.99)`;
            
            if (wheelSvg) {
                wheelSvg.style.transform = transform;
                wheelSvg.style.transition = transition;
            }

            // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            await new Promise(resolve => setTimeout(resolve, APP_CONFIG.animations.wheelSpinDuration));

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
            await this.handlePrizeWin(winningPrize);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ä—É–ª–µ—Ç–∫–∏:', error);
            this.app.showStatusMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ —Ä—É–ª–µ—Ç–∫–∏', 'error');
        } finally {
            this.isSpinning = false;
            this.updateSpinButtons();
            console.log('‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
    }

    selectRandomPrize() {
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        const prizePool = [];
        
        WHEEL_PRIZES.forEach(prize => {
            const weight = Math.round(prize.probability * 100);
            for (let i = 0; i < weight; i++) {
                prizePool.push(prize);
            }
        });

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑
        const randomIndex = Math.floor(Math.random() * prizePool.length);
        const selectedPrize = prizePool[randomIndex];
        
        console.log(`üé≤ –í—ã–±—Ä–∞–Ω –ø—Ä–∏–∑: ${selectedPrize.name} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${selectedPrize.probability}%)`);
        
        return selectedPrize;
    }

    async handlePrizeWin(prize) {
        console.log(`üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞: ${prize.name}`);

        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        const serverSaved = await this.savePrizeToServer(prize);
        
        if (!serverSaved) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            this.app.showStatusMessage('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–∑–∞', 'error', 3000);
            return;
        }

        // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.updateLocalDataAfterPrize(prize);

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateRecentWins();
        this.app.updateUI();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
        this.app.saveGameData();

        console.log('‚úÖ –í—ã–∏–≥—Ä—ã—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    }

    updateLocalDataAfterPrize(prize) {
        console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–∏–∑–∞:', prize);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.app.gameData.totalSpins = (this.app.gameData.totalSpins || 0) + 1;
        
        if (prize.type !== 'empty' && prize.value > 0) {
            this.app.gameData.prizesWon = (this.app.gameData.prizesWon || 0) + 1;
            
            // –ï—Å–ª–∏ –ø—Ä–∏–∑ - –∑–≤–µ–∑–¥—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –±–∞–ª–∞–Ω—Å—É
            if (prize.type.includes('stars')) {
                this.app.gameData.stars = (this.app.gameData.stars || 0) + prize.value;
                this.app.gameData.totalStarsEarned = (this.app.gameData.totalStarsEarned || 0) + prize.value;
                console.log(`‚ú® –î–æ–±–∞–≤–ª–µ–Ω–æ ${prize.value} –∑–≤–µ–∑–¥. –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${this.app.gameData.stars}`);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é
            if (!this.app.gameData.prizes) {
                this.app.gameData.prizes = [];
            }
            
            this.app.gameData.prizes.push({
                ...prize,
                timestamp: Date.now(),
                claimed: prize.type.includes('stars') // –ó–≤–µ–∑–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Å—á–∏—Ç–∞–Ω—ã
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏
        if (!this.app.gameData.recentWins) {
            this.app.gameData.recentWins = [];
        }
        
        this.app.gameData.recentWins.unshift({
            prize: prize,
            timestamp: Date.now()
        });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π
        if (this.app.gameData.recentWins.length > 10) {
            this.app.gameData.recentWins = this.app.gameData.recentWins.slice(0, 10);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        this.showPrizeResult(prize);
        
        console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    showPrizeResult(prize) {
        console.log('üéâ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–∑–∞:', prize);
        
        if (prize.type === 'empty' || prize.value === 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ
            this.app.showStatusMessage('üòî –í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', 'info', 4000);
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        const resultModal = document.createElement('div');
        resultModal.className = 'prize-result-modal';
        
        const isStars = prize.type.includes('stars');
        const resultContent = isStars ? 
            `<div class="prize-result-content">
                <div class="prize-icon stars">${prize.icon}</div>
                <h2>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h2>
                <h3>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${prize.value} –∑–≤–µ–∑–¥!</h3>
                <p>–ó–≤–µ–∑–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å</p>
                <button class="prize-result-close">–û—Ç–ª–∏—á–Ω–æ!</button>
            </div>` :
            `<div class="prize-result-content">
                <div class="prize-icon certificate">${prize.icon}</div>
                <h2>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h2>
                <h3>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏:</h3>
                <div class="prize-name">${prize.name}</div>
                <p>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞</p>
                <button class="prize-result-close">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>`;
        
        resultModal.innerHTML = resultContent;
        document.body.appendChild(resultModal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = resultModal.querySelector('.prize-result-close');
        closeBtn.addEventListener('click', () => {
            resultModal.remove();
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (document.body.contains(resultModal)) {
                resultModal.remove();
            }
        }, 8000);
        
        // –í–∏–±—Ä–∞—Ü–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (this.app.tg && this.app.tg.HapticFeedback) {
            this.app.tg.HapticFeedback.notificationOccurred('success');
        }
    }

    // –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é savePrizeToServer –≤ public/js/screens/main.js:

    async savePrizeToServer(prize) {
        console.log('üéÅ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', prize);
        
        if (!window.telegramIntegration?.sendToServer) {
            console.error('‚ùå telegramIntegration –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }
        
        if (!window.telegramIntegration.user?.id) {
            console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
            return false;
        }
        
        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            const spinData = {
                spinType: 'normal', // –§–ò–ö–°–ò–†–û–í–ê–ù–ù–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ this.lastSpinType
                prize: {
                    id: prize.id || Math.floor(Math.random() * 1000000), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –Ω–µ—Ç
                    name: prize.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–∑',
                    type: prize.type || 'empty',
                    value: Number(prize.value) || 0, // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
                    probability: prize.probability || 0
                },
                timestamp: new Date().toISOString()
            };
            
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', spinData);
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', window.telegramIntegration.user);
            
            const response = await window.telegramIntegration.sendToServer('wheel_spin', spinData);
            
            console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
            
            if (response && response.success === true) {
                console.log('‚úÖ –ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                return true;
            } else {
                console.error('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', response);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                if (response?.error) {
                    console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', response.error);
                    if (response.details) {
                        console.error('üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', response.details);
                    }
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if (response.error.includes('Invalid') || response.error.includes('validation')) {
                        this.app.showStatusMessage('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'warning', 4000);
                    } else {
                        this.app.showStatusMessage(`‚ùå ${response.error}`, 'error', 4000);
                    }
                } else {
                    this.app.showStatusMessage('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'error', 3000);
                }
                
                return false;
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (error.message?.includes('429')) {
                this.app.showStatusMessage('‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.', 'warning', 4000);
            } else if (error.message?.includes('400')) {
                this.app.showStatusMessage('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞', 'warning', 4000);
            } else if (error.message?.includes('500')) {
                this.app.showStatusMessage('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'error', 3000);
            } else {
                this.app.showStatusMessage('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'error', 3000);
            }
            
            return false;
        }
    }

    // –î–û–ë–ê–í–¨–¢–ï —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:
    async diagnosePrizeData(prize) {
        console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–∞:');
        console.log('  Prize object:', prize);
        console.log('  Prize type:', typeof prize);
        console.log('  Prize.id:', prize?.id, typeof prize?.id);
        console.log('  Prize.name:', prize?.name, typeof prize?.name);
        console.log('  Prize.type:', prize?.type, typeof prize?.type);
        console.log('  Prize.value:', prize?.value, typeof prize?.value);
        
        console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram Integration:');
        console.log('  telegramIntegration exists:', !!window.telegramIntegration);
        console.log('  sendToServer exists:', !!window.telegramIntegration?.sendToServer);
        console.log('  User exists:', !!window.telegramIntegration?.user);
        console.log('  User ID:', window.telegramIntegration?.user?.id);
        console.log('  User data:', window.telegramIntegration?.user);
        
        return true;
    }

    updateSpinButtons() {
        const spinStarsBtn = document.getElementById('spin-button-stars');
        const spinFriendBtn = document.getElementById('spin-button-friend');

        if (spinStarsBtn) {
            const canSpinStars = !this.isSpinning && this.app.gameData.stars >= APP_CONFIG.wheel.starCost;
            spinStarsBtn.disabled = !canSpinStars;
            spinStarsBtn.classList.toggle('disabled', !canSpinStars);
            
            if (this.isSpinning) {
                spinStarsBtn.innerHTML = `<i class="fas fa-spinner fa-spin"></i><span>–ö—Ä—É—Ç–∏—Ç—Å—è...</span>`;
            } else {
                spinStarsBtn.innerHTML = `<i class="fas fa-star"></i><span>–ó–∞ 20 ‚≠ê</span>`;
            }
        }

        if (spinFriendBtn) {
            const referralsCount = this.app.gameData.referrals || 0;
            const friendSpinsUsed = this.app.gameData.friendSpinsUsed || 0;
            const availableSpins = Math.max(0, referralsCount - friendSpinsUsed);
            
            // –ö–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –ª–∏–±–æ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏, –ª–∏–±–æ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            const canInteract = !this.isSpinning;
            spinFriendBtn.disabled = !canInteract;
            spinFriendBtn.classList.toggle('disabled', !canInteract);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            if (this.isSpinning) {
                spinFriendBtn.innerHTML = `<i class="fas fa-spinner fa-spin"></i><span>–ö—Ä—É—Ç–∏—Ç—Å—è...</span>`;
            } else if (referralsCount === 0) {
                spinFriendBtn.innerHTML = `<i class="fas fa-share"></i><span>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞</span>`;
            } else if (availableSpins === 0) {
                spinFriendBtn.innerHTML = `<i class="fas fa-heart"></i><span>–ü—Ä–∏–≥–ª–∞—Å–∏ –µ—â–µ</span>`;
            } else {
                spinFriendBtn.innerHTML = `<i class="fas fa-heart"></i><span>–ó–∞ –¥—Ä—É–≥–∞ (${availableSpins})</span>`;
            }
        }
    }

    updateRecentWins() {
        const container = document.getElementById('recent-wins-list');
        if (!container) return;

        const recentWins = this.app.gameData.recentWins || [];
        
        if (recentWins.length === 0) {
            container.innerHTML = '<div class="recent-win-item empty">–í—ã–∏–≥—Ä—ã—à–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</div>';
            return;
        }

        container.innerHTML = recentWins.map(win => `
            <div class="recent-win-item">
                <span>${win.prize.icon}</span>
                <div class="win-description">${win.prize.name}</div>
                <div class="win-time">${this.formatTime(win.timestamp)}</div>
            </div>
        `).join('');
    }

    formatTime(timestamp) {
        const date = new Date(timestamp);
        const now = new Date();
        const diff = now - date;
        
        if (diff < 60000) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (diff < 3600000) return `${Math.floor(diff / 60000)} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        if (diff < 86400000) return `${Math.floor(diff / 3600000)} —á –Ω–∞–∑–∞–¥`;
        return `${Math.floor(diff / 86400000)} –¥–Ω –Ω–∞–∑–∞–¥`;
    }

    openMegaRoulette() {
        if (this.app.navigation) {
            this.app.navigation.navigateTo('mega-roulette');
        } else {
            this.app.showStatusMessage('–ú–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'info');
        }
    }

    refreshEventListeners() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞...');
        this.setupEventListeners();
    }

    destroy() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞...');
        this.removeEventListeners();
    }

    showReferralLink() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        const userId = this.app.tg?.initDataUnsafe?.user?.id || 'demo';
        const botUsername = 'kosmetichka_lottery_bot'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ telegram-bot-server.js
        const referralLink = `https://t.me/${botUsername}?start=ref_${userId}`;
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'referral-modal';
        modal.innerHTML = `
            <div class="referral-modal-content">
                <div class="referral-header">
                    <h3>üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫—É!</h3>
                    <button class="close-modal" type="button">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="referral-body">
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏!</p>
                    <div class="referral-link-container">
                        <input type="text" id="referral-link" value="${referralLink}" readonly>
                        <button class="copy-btn" type="button" id="copy-referral-btn" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                    <div class="referral-info">
                        <p>üí´ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–∞!</p>
                    </div>
                    <button class="share-btn" type="button" id="share-referral-btn">
                        <i class="fas fa-share"></i>
                        <span>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram</span>
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        modal.querySelector('.close-modal').addEventListener('click', () => {
            modal.remove();
        });
        
        modal.querySelector('#copy-referral-btn').addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log('üîó –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
            this.copyReferralLink(referralLink);
        });
        
        modal.querySelector('#share-referral-btn').addEventListener('click', () => {
            const shareText = 'üé∞ –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Kosmetichka Lottery Bot - –∫—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –ø—Ä–∏–∑—ã! üíÑ‚ú®';
            const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(shareText)}`;
            
            if (this.app.tg && this.app.tg.openTelegramLink) {
                this.app.tg.openTelegramLink(shareUrl);
            } else {
                window.open(shareUrl, '_blank');
            }
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        this.copyReferralLink(referralLink);
    }
    
    copyReferralLink(link) {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(link).then(() => {
                this.app.showStatusMessage('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
            }).catch(() => {
                this.fallbackCopyTextToClipboard(link);
            });
        } else {
            this.fallbackCopyTextToClipboard(link);
        }
    }
    
    fallbackCopyTextToClipboard(text) {
        const textArea = document.createElement("textarea");
        textArea.value = text;
        textArea.style.top = "0";
        textArea.style.left = "0";
        textArea.style.position = "fixed";
        
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            this.app.showStatusMessage('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        } catch (err) {
            this.app.showStatusMessage('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', 'error');
        }
        
        document.body.removeChild(textArea);
    }
}
