// screens/main.js - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –æ—à–∏–±–æ–∫

import { WHEEL_PRIZES, APP_CONFIG } from '../config.js';

export class MainScreen {
    constructor(app) {
        this.app = app;
        this.isSpinning = false;
        this.wheelRotation = 0;
        this.initialized = false;
        this.lastSpinType = null; // –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    }

    render() {
        return `
            <div id="main-screen" class="screen active">
                <div class="header">
                    <div class="user-info">
                        <div id="profile-pic" class="profile-pic" tabindex="0" role="button" aria-label="–ü—Ä–æ—Ñ–∏–ª—å">
                            ${this.app.tg?.initDataUnsafe?.user?.first_name?.charAt(0) || 'üë§'}
                        </div>
                        <div class="user-details">
                            <div class="user-name">${this.app.tg?.initDataUnsafe?.user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</div>
                            <div class="user-stars">
                                <span id="star-count">${this.app.gameData.stars}</span> ‚≠ê
                                <button id="deposit-btn" class="deposit-quick-btn" onclick="navigateToDeposit()" title="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <button id="mega-roulette-btn" class="mega-btn" aria-label="–ú–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∞">
                        üëë –ú–ï–ì–ê
                    </button>
                </div>

                <div class="wheel-container">
                    <div class="wheel" id="wheel">
                        <div class="wheel-pointer"></div>
                        <svg id="wheel-svg" width="400" height="400" viewBox="0 0 400 400">
                            <g id="wheel-segments"></g>
                        </svg>
                        <div class="wheel-center">SPIN</div>
                    </div>

                    <div class="spin-controls">
                        <div class="spin-buttons">
                            <button id="spin-button-stars" class="spin-btn primary" type="button">
                                <i class="fas fa-star"></i>
                                <span>–ó–∞ 20 ‚≠ê</span>
                            </button>
                            <button id="spin-button-friend" class="spin-btn secondary" type="button">
                                <i class="fas fa-heart"></i>
                                <span id="friend-button-text">–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞ –¥—Ä—É–≥–∞</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="recent-wins">
                    <span class="recent-wins-title">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏</span>
                    <div class="recent-wins-list" id="recent-wins-list">
                        <!-- Recent wins will be shown here -->
                    </div>
                </div>

            </div>
        `;
    }

    init() {
        console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞...');
        
        try {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DOM
            setTimeout(() => {
                this.generateWheelSVG();
                this.setupEventListeners();
                this.updateRecentWins();
                this.updateSpinButtons();
                this.testSynchronization(); // –î–û–ë–ê–í–õ–ï–ù–û: —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
                this.initialized = true;
                console.log('‚úÖ –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }, 100);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞:', error);
        }
    }

    setupEventListeners() {
        console.log('üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        this.removeEventListeners();
        
        // –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        const spinStarsBtn = document.getElementById('spin-button-stars');
        const spinFriendBtn = document.getElementById('spin-button-friend');
        
        if (spinStarsBtn) {
            this.starsBtnHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                if (!this.isSpinning && !spinStarsBtn.disabled) {
                    this.spinWheel('stars');
                }
            };
            spinStarsBtn.addEventListener('click', this.starsBtnHandler);
            spinStarsBtn.addEventListener('touchend', this.starsBtnHandler);
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–æ–±–∞–≤–ª–µ–Ω');
        } else {
            console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –∑–≤–µ–∑–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        if (spinFriendBtn) {
            this.friendBtnHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                if (!this.isSpinning && !spinFriendBtn.disabled) {
                    this.spinWheel('friend');
                }
            };
            spinFriendBtn.addEventListener('click', this.friendBtnHandler);
            spinFriendBtn.addEventListener('touchend', this.friendBtnHandler);
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥—Ä—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω');
        } else {
            console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –¥—Ä—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –ö–Ω–æ–ø–∫–∞ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏
        const megaBtn = document.getElementById('mega-roulette-btn');
        if (megaBtn) {
            this.megaBtnHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.openMegaRoulette();
            };
            megaBtn.addEventListener('click', this.megaBtnHandler);
            megaBtn.addEventListener('touchend', this.megaBtnHandler);
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–≥–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω');
        }
        
        // –ü—Ä–æ—Ñ–∏–ª—å
        const profilePic = document.getElementById('profile-pic');
        if (profilePic) {
            this.profileHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.app.navigation.navigateTo('profile');
            };
            profilePic.addEventListener('click', this.profileHandler);
            profilePic.addEventListener('touchend', this.profileHandler);
            profilePic.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.profileHandler(e);
                }
            });
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–±–∞–≤–ª–µ–Ω');
        }

        console.log('‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    removeEventListeners() {
        console.log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        const spinStarsBtn = document.getElementById('spin-button-stars');
        const spinFriendBtn = document.getElementById('spin-button-friend');
        const megaBtn = document.getElementById('mega-roulette-btn');
        const profilePic = document.getElementById('profile-pic');
        
        if (spinStarsBtn && this.starsBtnHandler) {
            spinStarsBtn.removeEventListener('click', this.starsBtnHandler);
            spinStarsBtn.removeEventListener('touchend', this.starsBtnHandler);
        }
        
        if (spinFriendBtn && this.friendBtnHandler) {
            spinFriendBtn.removeEventListener('click', this.friendBtnHandler);
            spinFriendBtn.removeEventListener('touchend', this.friendBtnHandler);
        }
        
        if (megaBtn && this.megaBtnHandler) {
            megaBtn.removeEventListener('click', this.megaBtnHandler);
            megaBtn.removeEventListener('touchend', this.megaBtnHandler);
        }
        
        if (profilePic && this.profileHandler) {
            profilePic.removeEventListener('click', this.profileHandler);
            profilePic.removeEventListener('touchend', this.profileHandler);
            profilePic.removeEventListener('keydown', this.profileHandler);
        }
    }

    generateWheelSVG() {
        const container = document.getElementById('wheel-segments');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ä—É–ª–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const radius = 180;
        const centerX = 200;
        const centerY = 200;

        // –ö—Ä–∞—Å–∏–≤—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏–∑–∞
        const gradients = {
            empty: 'linear-gradient(135deg, #1a1a1a 0%, #000000 100%)',
            stars: 'linear-gradient(135deg, #FFD700 0%, #FFA500 100%)',
            'golden-apple': [
                'linear-gradient(135deg, #9ACD32 0%, #8FBC8F 100%)', // 300‚ÇΩ - —Å–∞–ª–∞—Ç–æ–≤—ã–π
                'linear-gradient(135deg, #8FBC8F 0%, #7CFC00 100%)', // 500‚ÇΩ - —Ç–µ–º–Ω–æ-—Å–∞–ª–∞—Ç–æ–≤—ã–π  
                'linear-gradient(135deg, #7CFC00 0%, #ADFF2F 100%)', // 1000‚ÇΩ - —è—Ä–∫–æ-—Å–∞–ª–∞—Ç–æ–≤—ã–π
                'linear-gradient(135deg, #ADFF2F 0%, #32CD32 100%)', // 2000‚ÇΩ - –∑–µ–ª–µ–Ω–æ-–∂–µ–ª—Ç—ã–π
                'linear-gradient(135deg, #32CD32 0%, #228B22 100%)'  // 5000‚ÇΩ - —è—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π
            ],
            'wildberries': [
                'linear-gradient(135deg, #8E44AD 0%, #9B59B6 100%)', // 500‚ÇΩ
                'linear-gradient(135deg, #9B59B6 0%, #6C3483 100%)', // 1000‚ÇΩ
                'linear-gradient(135deg, #6C3483 0%, #512E5F 100%)', // 2000‚ÇΩ
                'linear-gradient(135deg, #512E5F 0%, #3E1B40 100%)'  // 3000‚ÇΩ
            ]
        };

        let svgContent = '';
        
        // –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
        let defsContent = '<defs>';
        
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        defsContent += `
            <linearGradient id="emptyGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#1a1a1a;stop-opacity:1" />
                <stop offset="100%" style="stop-color:#000000;stop-opacity:1" />
            </linearGradient>
            <pattern id="emptyPattern" patternUnits="userSpaceOnUse" width="20" height="20">
                <rect width="20" height="20" fill="url(#emptyGradient)"/>
                <path d="M0,20 L20,0" stroke="rgba(255,255,255,0.1)" stroke-width="1"/>
            </pattern>
        `;
        
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –∑–≤–µ–∑–¥
        defsContent += `
            <linearGradient id="starsGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#FFD700;stop-opacity:1" />
                <stop offset="100%" style="stop-color:#FFA500;stop-opacity:1" />
            </linearGradient>
        `;
        
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–ª—è –ó–æ–ª–æ—Ç–æ–≥–æ —è–±–ª–æ–∫–∞ (–°–ê–õ–ê–¢–û–í–û-–ó–ï–õ–ï–ù–´–ï)
        gradients['golden-apple'].forEach((gradient, index) => {
            const gradientMatch = gradient.match(/linear-gradient\(135deg,\s*([^,]+)\s*0%,\s*([^)]+)\s*100%\)/);
            if (gradientMatch) {
                const [, color1, color2] = gradientMatch;
                defsContent += `
                    <linearGradient id="appleGradient${index}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:${color1.trim()};stop-opacity:1" />
                        <stop offset="100%" style="stop-color:${color2.trim()};stop-opacity:1" />
                    </linearGradient>
                `;
            }
        });
        
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–ª—è Wildberries
        gradients['wildberries'].forEach((gradient, index) => {
            const gradientMatch = gradient.match(/linear-gradient\(135deg,\s*([^,]+)\s*0%,\s*([^)]+)\s*100%\)/);
            if (gradientMatch) {
                const [, color1, color2] = gradientMatch;
                defsContent += `
                    <linearGradient id="wbGradient${index}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:${color1.trim()};stop-opacity:1" />
                        <stop offset="100%" style="stop-color:${color2.trim()};stop-opacity:1" />
                    </linearGradient>
                `;
            }
        });
        
        defsContent += '</defs>';

        // –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        let currentAngle = -90; // –ù–∞—á–∏–Ω–∞–µ–º —Å–≤–µ—Ä—Ö—É
        
        WHEEL_PRIZES.forEach((prize, index) => {
            const segmentAngle = prize.angle || (360 / WHEEL_PRIZES.length);
            const startAngle = currentAngle * Math.PI / 180;
            const endAngle = (currentAngle + segmentAngle) * Math.PI / 180;

            const x1 = centerX + radius * Math.cos(startAngle);
            const y1 = centerY + radius * Math.sin(startAngle);
            const x2 = centerX + radius * Math.cos(endAngle);
            const y2 = centerY + radius * Math.sin(endAngle);

            const largeArc = segmentAngle > 180 ? 1 : 0;

            const path = `M ${centerX} ${centerY} L ${x1} ${y1} A ${radius} ${radius} 0 ${largeArc} 1 ${x2} ${y2} Z`;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
            let fillUrl;
            if (prize.type === 'empty') {
                fillUrl = 'url(#emptyPattern)';
            } else if (prize.type.startsWith('stars')) {
                fillUrl = 'url(#starsGradient)';
            } else if (prize.type.startsWith('golden-apple')) {
                const appleIndex = ['golden-apple-300', 'golden-apple-500', 'golden-apple-1000', 'golden-apple-2000', 'golden-apple-5000'].indexOf(prize.type);
                fillUrl = `url(#appleGradient${appleIndex})`;
            } else if (prize.type.startsWith('wildberries')) {
                const wbIndex = ['wildberries-500', 'wildberries-1000', 'wildberries-2000', 'wildberries-3000'].indexOf(prize.type);
                fillUrl = `url(#wbGradient${wbIndex})`;
            }

            // –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
            svgContent += `
                <path 
                    d="${path}" 
                    fill="${fillUrl}" 
                    stroke="rgba(255,255,255,0.2)" 
                    stroke-width="1"
                    class="wheel-segment-path"
                    data-prize-id="${prize.id}"
                    style="filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3))"
                />
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å topText –∏–ª–∏ centerText
            if (prize.topText || prize.centerText) {
                const middleAngle = (startAngle + endAngle) / 2;
                const middleAngleDeg = middleAngle * 180 / Math.PI;

                // –í–ï–†–•–ù–ò–ô –¢–ï–ö–°–¢ (–ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ –ª–∏–Ω–∏—è–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è - —Ä–∞–¥–∏–∞–ª—å–Ω–æ)
                if (prize.topText) {
                    const topRadius = radius * 0.85; // –ü–û–î–ù–Ø–¢–û –í–´–®–ï - –±–ª–∏–∂–µ –∫ –∫—Ä–∞—é
                    const topX = centerX + topRadius * Math.cos(middleAngle);
                    const topY = centerY + topRadius * Math.sin(middleAngle);
                    
                    // –ü–æ–≤–æ—Ä–æ—Ç —Ç–µ–∫—Å—Ç–∞ —Ä–∞–¥–∏–∞–ª—å–Ω–æ (–ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ –ª–∏–Ω–∏—è–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è)
                    const topRotation = middleAngleDeg + 90; // +90 —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç —à–µ–ª –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –Ω–∞—Ä—É–∂—É
                    
                    // –ò–ù–¢–ï–†–ï–°–ù–´–ï –¶–í–ï–¢–ê –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    let topTextColor = 'white';
                    if (prize.type.startsWith('stars')) {
                        topTextColor = '#FFFACD'; // –õ–∏–º–æ–Ω–Ω–æ-–∫—Ä–µ–º–æ–≤—ã–π –¥–ª—è –∑–≤–µ–∑–¥
                    } else if (prize.type.startsWith('golden-apple')) {
                        topTextColor = '#F0FFF0'; // –ú–µ–¥–æ–≤–∞—è —Ä–æ—Å–∞ –¥–ª—è –ó–Ø (—Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π)
                    } else if (prize.type.startsWith('wildberries')) {
                        topTextColor = '#F0E6FF'; // –°–≤–µ—Ç–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è WB
                    }
                    
                    svgContent += `
                        <text 
                            x="${topX}" 
                            y="${topY}" 
                            text-anchor="middle" 
                            dominant-baseline="middle" 
                            font-size="${segmentAngle > 60 ? '16' : '14'}" 
                            font-weight="bold"
                            fill="${topTextColor}"
                            class="segment-top-text"
                            style="filter: drop-shadow(0 2px 4px rgba(0,0,0,0.8)); font-family: 'Arial', sans-serif; user-select: none;"
                            transform="rotate(${topRotation} ${topX} ${topY})"
                        >${prize.topText}</text>
                    `;
                }

                // –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –¢–ï–ö–°–¢ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ª–∏–Ω–∏—è–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è - —Ç–∞–Ω–≥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ)
                if (prize.centerText) {
                    const centerRadius = radius * 0.6; // –ü–æ —Ü–µ–Ω—Ç—Ä—É —Å–µ–≥–º–µ–Ω—Ç–∞
                    const centerX_pos = centerX + centerRadius * Math.cos(middleAngle);
                    const centerY_pos = centerY + centerRadius * Math.sin(middleAngle);
                    
                    // –ü–æ–≤–æ—Ä–æ—Ç —Ç–µ–∫—Å—Ç–∞ —Ç–∞–Ω–≥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ª–∏–Ω–∏—è–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è)
                    // –î–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —É–≥–æ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
                    let centerRotation = middleAngleDeg;
                    if (middleAngleDeg > 90 && middleAngleDeg < 270) {
                        centerRotation += 180; // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª –≤–≤–µ—Ä—Ö –Ω–æ–≥–∞–º–∏
                    }
                    
                    // –ò–ù–¢–ï–†–ï–°–ù–´–ï –¶–í–ï–¢–ê –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    let centerTextColor = 'white';
                    if (prize.type.startsWith('stars')) {
                        centerTextColor = '#FFF8DC'; // –ö—É–∫—É—Ä—É–∑–Ω—ã–π —à–µ–ª–∫ –¥–ª—è –∑–≤–µ–∑–¥
                    } else if (prize.type.startsWith('golden-apple')) {
                        centerTextColor = '#F5FFFA'; // –ú—è—Ç–Ω–æ-–∫—Ä–µ–º–æ–≤—ã–π –¥–ª—è –ó–Ø
                    } else if (prize.type.startsWith('wildberries')) {
                        centerTextColor = '#E6E6FA'; // –õ–∞–≤–∞–Ω–¥–∞ –¥–ª—è WB
                    }
                    
                    svgContent += `
                        <text 
                            x="${centerX_pos}" 
                            y="${centerY_pos}" 
                            text-anchor="middle" 
                            dominant-baseline="middle" 
                            font-size="${segmentAngle > 60 ? '14' : segmentAngle > 30 ? '12' : '10'}" 
                            font-weight="bold"
                            fill="${centerTextColor}"
                            class="segment-center-text"
                            style="filter: drop-shadow(0 1px 3px rgba(0,0,0,0.8)); font-family: 'Arial', sans-serif; user-select: none;"
                            transform="rotate(${centerRotation} ${centerX_pos} ${centerY_pos})"
                        >${prize.centerText}</text>
                    `;
                }
            }

            currentAngle += segmentAngle;
        });

        container.innerHTML = defsContent + svgContent;
        console.log('‚úÖ –ß–∏—Å—Ç–æ–µ –∫–æ–ª–µ—Å–æ –±–µ–∑ –∏–∫–æ–Ω–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ');
    }

    // ============================================================================
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–û–ö–†–£–¢–ö–ò –†–£–õ–ï–¢–ö–ò –° –ü–û–õ–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö
    // ============================================================================
    async spinWheel(type) {
        if (this.isSpinning) {
            console.log('‚è≥ –†—É–ª–µ—Ç–∫–∞ —É–∂–µ –∫—Ä—É—Ç–∏—Ç—Å—è');
            return;
        }

        console.log('\nüé∞ ========== –ù–ê–ß–ê–õ–û –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –ü–†–û–ö–†–£–¢–ö–ò ==========');
        console.log(`üéÆ –¢–∏–ø: ${type}`);
        this.lastSpinType = type;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        try {
            if (type === 'stars' && this.app.gameData.stars < APP_CONFIG.wheel.starCost) {
                this.app.showStatusMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏!', 'error');
                return;
            }

            if (type === 'friend') {
                const referralsCount = this.app.gameData.referrals || 0;
                const friendSpinsUsed = this.app.gameData.friendSpinsUsed || 0;
                
                if (referralsCount === 0 || friendSpinsUsed >= referralsCount) {
                    this.showReferralLink();
                    return;
                }
            }

            this.isSpinning = true;
            this.updateSpinButtons();

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞
            const originalStars = this.app.gameData.stars;
            const originalFriendSpins = this.app.gameData.friendSpinsUsed || 0;

            // –°–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            if (type === 'stars') {
                const success = await this.app.spendStars(APP_CONFIG.wheel.starCost);
                if (!success) {
                    this.isSpinning = false;
                    this.updateSpinButtons();
                    this.app.showStatusMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏!', 'error');
                    return;
                }
                console.log(`üí∞ –°–ø–∏—Å–∞–Ω–æ ${APP_CONFIG.wheel.starCost} –∑–≤–µ–∑–¥`);
            } else if (type === 'friend') {
                this.app.gameData.friendSpinsUsed = (this.app.gameData.friendSpinsUsed || 0) + 1;
                console.log(`‚ù§Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞ –¥—Ä—É–≥–∞`);
                this.app.updateUI();
            }

            // –®–ê–ì 1: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑ (—É–∂–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π - –≤–∏–∑—É–∞–ª—å–Ω—ã–π + —Ä–µ–∞–ª—å–Ω—ã–π)
            console.log('\nüìã –®–ê–ì 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞...');
            const winningPrize = await this.selectRandomPrize();
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–∑ –Ω–∞–π–¥–µ–Ω
            if (!winningPrize) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –ø—Ä–∏–∑');
            }
            
            // –®–ê–ì 2: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≥–æ–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —ç—Ç–æ–º –ø—Ä–∏–∑–µ
            console.log('\nüìê –®–ê–ì 2: –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —É–≥–ª–∞...');
            const targetAngle = this.calculateTargetAngleForPrize(winningPrize);
            
            // –®–ê–ì 3: –ê–Ω–∏–º–∏—Ä—É–µ–º —Ä—É–ª–µ—Ç–∫—É
            console.log('\nüåÄ –®–ê–ì 3: –ê–Ω–∏–º–∞—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏...');
            await this.animateWheelToTarget(targetAngle);
            
            // –®–ê–ì 4: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
            console.log('\nüèÜ –®–ê–ì 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞...');
            console.log(`üëÅÔ∏è  –ü–û–ö–ê–ó–ê–ù–û: ${winningPrize.name}`);
            console.log(`üí∞ –ü–û–õ–£–ß–ï–ù–û: ${winningPrize.realName || winningPrize.name} (${winningPrize.value})`);
            
            await this.handlePrizeWin(winningPrize);

            console.log('üéä ========== –ü–†–û–ö–†–£–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ==========\n');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏:', error);
            this.app.showStatusMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ —Ä—É–ª–µ—Ç–∫–∏', 'error');
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (type === 'stars') {
                this.app.gameData.stars = originalStars; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–≤–µ–∑–¥—ã
                console.log('üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∑–≤–µ–∑–¥—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
            } else if (type === 'friend') {
                this.app.gameData.friendSpinsUsed = originalFriendSpins; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
                console.log('‚ù§Ô∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞ –¥—Ä—É–≥–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
            }
            this.app.updateUI();
            this.app.saveGameData();
        } finally {
            this.isSpinning = false;
            this.updateSpinButtons();
        }
    }

    // ============================================================================
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–†–ò–ó–û–í
    // ============================================================================
    async selectRandomPrize() {
        try {
            console.log('üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑ –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º —à–∞–Ω—Å–∞–º –∏–∑ –ë–î...');
            
            // –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï —à–∞–Ω—Å—ã –∏–∑ –ë–î
            const response = await fetch('/api/wheel-settings/normal');
            let realChances = [];
            
            if (response.ok) {
                const settings = await response.json();
                if (settings.prizes && settings.prizes.length > 0) {
                    realChances = settings.prizes;
                    console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã —à–∞–Ω—Å—ã –∏–∑ –ë–î:', realChances);
                } else {
                    realChances = this.getRealDefaultChances();
                    console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —à–∞–Ω—Å—ã');
                }
            } else {
                realChances = this.getRealDefaultChances();
                console.log('üìä API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ');
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 5: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
            const random = Math.random() * 100;
            let cumulative = 0;
            
            console.log(`üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: ${random.toFixed(2)}%`);
            
            for (const realChance of realChances) {
                cumulative += realChance.probability;
                console.log(`üìà ${realChance.name}: ${cumulative.toFixed(2)}%`);
                
                if (random < cumulative) {
                    console.log(`‚úÖ –í–´–ü–ê–õ –†–ï–ê–õ–¨–ù–´–ô –ü–†–ò–ó: ${realChance.name} (${realChance.type})`);
                    
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 6: –ù–∞—Ö–æ–¥–∏–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    const visualPrize = this.findVisualPrizeForRealChance(realChance);
                    
                    if (!visualPrize) {
                        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑ –¥–ª—è:', realChance);
                        return WHEEL_PRIZES.find(p => p.type === 'empty') || WHEEL_PRIZES[0];
                    }
                    
                    console.log(`üé® –ù–∞–π–¥–µ–Ω –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑:`, visualPrize);
                    
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 7: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    const enhancedPrize = {
                        ...visualPrize, // –í—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ (id, name, type, color, angle –∏ —Ç.–¥.)
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        realType: realChance.type,
                        realName: realChance.name,
                        realValue: realChance.value || 0,
                        realDescription: realChance.description,
                        
                        // –í–ê–ñ–ù–û: –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º value –Ω–∞ –†–ï–ê–õ–¨–ù–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ!
                        value: realChance.value || 0
                    };
                    
                    console.log(`üîó –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏–∑:`, enhancedPrize);
                    console.log(`üëÅÔ∏è  –í–ò–ó–£–ê–õ–¨–ù–û: ${enhancedPrize.name} (${enhancedPrize.type})`);
                    console.log(`üí∞ –†–ï–ê–õ–¨–ù–û: ${enhancedPrize.realName} (${enhancedPrize.realType}, ${enhancedPrize.value})`);
                    
                    return enhancedPrize;
                }
            }
            
            // Fallback - –ø—É—Å—Ç–æ—Ç–∞
            console.log('‚ö†Ô∏è Fallback –Ω–∞ –ø—É—Å—Ç–æ—Ç—É');
            return WHEEL_PRIZES.find(p => p.type === 'empty') || WHEEL_PRIZES[0];
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
            return WHEEL_PRIZES.find(p => p.type === 'empty') || WHEEL_PRIZES[0];
        }
    }

    // ============================================================================
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –í–ò–ó–£–ê–õ–¨–ù–û–ì–û –ü–†–ò–ó–ê
    // ============================================================================
    findVisualPrizeForRealChance(realChance) {
        console.log(`üîç –ò—â–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–∞:`, realChance);
        
        if (realChance.type === 'empty') {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç
            const emptyPrize = WHEEL_PRIZES.find(p => p.type === 'empty');
            console.log('üéØ –ù–∞–π–¥–µ–Ω –ø—É—Å—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç:', emptyPrize);
            return emptyPrize;
        } 
        else if (realChance.type === 'stars') {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç —Å–æ –∑–≤–µ–∑–¥–∞–º–∏
            const starsPrize = WHEEL_PRIZES.find(p => p.type === 'stars-20');
            console.log('‚≠ê –ù–∞–π–¥–µ–Ω —Å–µ–≥–º–µ–Ω—Ç –∑–≤–µ–∑–¥:', starsPrize);
            return starsPrize;
        } 
        else if (realChance.type === 'certificate') {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 8: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –°–õ–£–ß–ê–ô–ù–´–ô —Å–µ–≥–º–µ–Ω—Ç-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–ª—é–±–æ–π –∏–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö)
            const certificateSegments = WHEEL_PRIZES.filter(p => {
                return p.type.includes('apple') || 
                       p.type.includes('wildberries') || 
                       p.name.includes('‚ÇΩ') ||
                       p.name.includes('—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç') ||
                       p.name.includes('–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç');
            });
            
            console.log('üèÜ –ù–∞–π–¥–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:', certificateSegments.length);
            
            if (certificateSegments.length > 0) {
                const randomIndex = Math.floor(Math.random() * certificateSegments.length);
                const selectedCert = certificateSegments[randomIndex];
                console.log('üé´ –í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:', selectedCert);
                return selectedCert;
            }
        }
        
        // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
        console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è —Ç–∏–ø–∞: ${realChance.type}`);
        return WHEEL_PRIZES[0];
    }

    calculateTargetAngleForPrize(targetPrize) {
        console.log(`üìê –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≥–æ–ª –¥–ª—è –ø—Ä–∏–∑–∞:`, targetPrize);
        
        const segmentIndex = WHEEL_PRIZES.findIndex(p => p.id === targetPrize.id);
        
        if (segmentIndex === -1) {
            console.error('‚ùå –°–µ–≥–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WHEEL_PRIZES:', targetPrize);
            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:', WHEEL_PRIZES.map(p => ({id: p.id, name: p.name})));
            return 0;
        }
        
        console.log(`üìç –ù–∞–π–¥–µ–Ω —Å–µ–≥–º–µ–Ω—Ç ${segmentIndex + 1}: ${targetPrize.name}`);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —É–≥–æ–ª –¥–æ —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        let accumulatedAngle = 0;
        for (let i = 0; i < segmentIndex; i++) {
            accumulatedAngle += WHEEL_PRIZES[i].angle || (360 / WHEEL_PRIZES.length);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —É–≥–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ (—Ü–µ–Ω—Ç—Ä)
        const currentSegmentAngle = WHEEL_PRIZES[segmentIndex].angle || (360 / WHEEL_PRIZES.length);
        const segmentCenterAngle = accumulatedAngle + (currentSegmentAngle / 2);
        
        // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–≤–µ—Ä—Ö—É (0¬∞), –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ä—É–ª–µ—Ç–∫—É
        const targetAngle = 360 - segmentCenterAngle;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
        const maxDeviation = (currentSegmentAngle / 2) * 0.4;
        const deviation = (Math.random() - 0.5) * maxDeviation;
        const finalAngle = targetAngle + deviation;
        
        console.log(`üìä –ù–∞–∫–æ–ø–ª–µ–Ω–æ: ${accumulatedAngle}¬∞, —Å–µ–≥–º–µ–Ω—Ç: ${currentSegmentAngle}¬∞`);
        console.log(`üéØ –¶–µ–ª–µ–≤–æ–π —É–≥–æ–ª: ${finalAngle.toFixed(1)}¬∞ (–±–∞–∑–æ–≤—ã–π: ${targetAngle.toFixed(1)}¬∞, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${deviation.toFixed(1)}¬∞)`);
        
        return finalAngle;
    }

    async animateWheelToTarget(targetAngle) {
        const spins = Math.floor(Math.random() * 3) + 5; // 5-7 –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
        const finalRotation = spins * 360 + targetAngle;
        
        this.wheelRotation = (this.wheelRotation || 0) + finalRotation;
        
        const wheelSvg = document.getElementById('wheel-svg');
        if (!wheelSvg) {
            throw new Error('–≠–ª–µ–º–µ–Ω—Ç wheel-svg –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        wheelSvg.style.transition = `transform ${APP_CONFIG.animations.wheelSpinDuration}ms cubic-bezier(0.17, 0.67, 0.12, 0.99)`;
        wheelSvg.style.transform = `rotate(${this.wheelRotation}deg)`;
        
        console.log(`üåÄ –ê–Ω–∏–º–∞—Ü–∏—è: –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ ${finalRotation}¬∞ (–∏—Ç–æ–≥–æ: ${this.wheelRotation}¬∞)`);
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        return new Promise(resolve => {
            setTimeout(resolve, APP_CONFIG.animations.wheelSpinDuration);
        });
    }

    // ============================================================================
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ò–ì–†–´–®–ï–ô
    // ============================================================================
    async handlePrizeWin(prize) {
        console.log(`üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞:`, prize);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö
        const realType = prize.realType || prize.type;
        const realValue = prize.value; // –£–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ selectRandomPrize
        const realName = prize.realName || prize.name;
        
        console.log(`üí∞ –†–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø: ${realType}, –∑–Ω–∞—á–µ–Ω–∏–µ: ${realValue}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –†–ï–ê–õ–¨–ù–´–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if (realType === 'empty') {
            this.showResultModal({
                icon: 'üòî',
                title: '–ù–µ –ø–æ–≤–µ–∑–ª–æ!',
                description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!',
                type: 'empty'
            });
        } 
        else if (realType === 'stars') {
            this.showResultModal({
                icon: '‚≠ê',
                title: `–ü–æ–ª—É—á–µ–Ω–æ ${realValue} –∑–≤–µ–∑–¥!`,
                description: `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${realValue} –∑–≤–µ–∑–¥`,
                type: 'stars'
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –ª–æ–∫–∞–ª—å–Ω–æ
            this.app.gameData.stars = (this.app.gameData.stars || 0) + realValue;
            console.log(`‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ ${realValue} –∑–≤–µ–∑–¥, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${this.app.gameData.stars}`);
        } 
        else if (realType === 'certificate') {
            this.showResultModal({
                icon: 'üèÜ',
                title: '–í—ã–∏–≥—Ä–∞–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!',
                description: realName,
                type: 'certificate'
            });
            console.log(`üèÜ –í—ã–∏–≥—Ä–∞–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ${realName}`);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –†–ï–ê–õ–¨–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏
        const serverPrize = {
            type: realType,
            name: realName,
            value: realValue,
            description: prize.realDescription || prize.description
        };
        
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä:`, serverPrize);
        await this.savePrizeToServer(serverPrize);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateLocalDataAfterPrize(prize);
        this.updateRecentWins();
        this.app.updateUI();
        this.app.saveGameData();

        console.log('‚úÖ –í—ã–∏–≥—Ä—ã—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    }

    // ============================================================================
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –î–ï–§–û–õ–¢–ù–´–ï –®–ê–ù–°–´
    // ============================================================================
    getRealDefaultChances() {
        return [
            { 
                id: 'empty', 
                type: 'empty', 
                probability: 94, // 94% - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
                name: '–ü—É—Å—Ç–æ (—á–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª)', 
                value: 0,
                description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!'
            },
            { 
                id: 'stars20', 
                type: 'stars', 
                probability: 5, // 5% - —Ä–µ–¥–∫–∏–µ –∑–≤–µ–∑–¥—ã
                name: '20 –∑–≤–µ–∑–¥', 
                value: 20,
                description: '–ü–æ–ª—É—á–µ–Ω–æ 20 –∑–≤–µ–∑–¥'
            },
            { 
                id: 'cert300', 
                type: 'certificate', 
                probability: 1, // 1% - –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
                name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 300‚ÇΩ –ó–Ø', 
                value: 300,
                description: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 300 —Ä—É–±–ª–µ–π –≤ –ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ'
            }
        ];
    }

    // ============================================================================
    // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–¢–õ–ê–î–ö–ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
    // ============================================================================
    testSynchronization() {
        console.log('üß™ –¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –í–ò–ó–£–ê–õ–¨–ù–´–• –ò –†–ï–ê–õ–¨–ù–´–• –®–ê–ù–°–û–í');
        console.log('==================================================');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –ø—Ä–∏–∑–∞
        const testCases = [
            { type: 'empty', name: '–ü—É—Å—Ç–æ' },
            { type: 'stars', name: '20 –∑–≤–µ–∑–¥' },
            { type: 'certificate', name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç' }
        ];
        
        testCases.forEach(testCase => {
            console.log(`\nüîç –¢–µ—Å—Ç –¥–ª—è ${testCase.name}:`);
            const visualPrize = this.findVisualPrizeForRealChance(testCase);
            
            if (visualPrize) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç: ${visualPrize.name} (ID: ${visualPrize.id})`);
                
                const segmentIndex = WHEEL_PRIZES.findIndex(p => p.id === visualPrize.id);
                if (segmentIndex !== -1) {
                    console.log(`‚úÖ –°–µ–≥–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ WHEEL_PRIZES –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º ${segmentIndex}`);
                } else {
                    console.error(`‚ùå –°–µ–≥–º–µ–Ω—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ WHEEL_PRIZES!`);
                }
            } else {
                console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è ${testCase.name}`);
            }
        });
        
        console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≥–ª–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:');
        const totalAngle = WHEEL_PRIZES.reduce((sum, p) => sum + (p.angle || 0), 0);
        console.log(`–û–±—â–∞—è —Å—É–º–º–∞ —É–≥–ª–æ–≤: ${totalAngle}¬∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 360¬∞)`);
        
        if (Math.abs(totalAngle - 360) > 1) {
            console.warn('‚ö†Ô∏è –°—É–º–º–∞ —É–≥–ª–æ–≤ –Ω–µ —Ä–∞–≤–Ω–∞ 360¬∞! –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
        } else {
            console.log('‚úÖ –£–≥–ª—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
        }
    }

    // ============================================================================
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê
    // ============================================================================
    showResultModal(result) {
        console.log('üé≠ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', result);
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        const existingModals = document.querySelectorAll('.prize-result-modal');
        existingModals.forEach(modal => modal.remove());
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'prize-result-modal';
        modal.innerHTML = `
            <div class="prize-result-overlay"></div>
            <div class="prize-result-content">
                <div class="prize-result-icon">${result.icon}</div>
                <h2 class="prize-result-title">${result.title}</h2>
                <p class="prize-result-description">${result.description}</p>
                <button class="prize-result-close" type="button">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            modal.classList.add('show');
        }, 50);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = modal.querySelector('.prize-result-close');
        const overlay = modal.querySelector('.prize-result-overlay');
        
        const closeModal = () => {
            modal.classList.remove('show');
            setTimeout(() => {
                if (document.body.contains(modal)) {
                    modal.remove();
                }
            }, 300);
        };
        
        closeBtn.addEventListener('click', closeModal);
        overlay.addEventListener('click', closeModal);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(closeModal, 5000);
        
        // –í–∏–±—Ä–∞—Ü–∏—è
        if (this.app.tg && this.app.tg.HapticFeedback) {
            if (result.type === 'empty') {
                this.app.tg.HapticFeedback.notificationOccurred('error');
            } else {
                this.app.tg.HapticFeedback.notificationOccurred('success');
            }
        }
    }

    updateLocalDataAfterPrize(prize) {
        console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–∏–∑–∞:', prize);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.app.gameData.totalSpins = (this.app.gameData.totalSpins || 0) + 1;
        
        if (prize.type !== 'empty' && prize.value > 0) {
            this.app.gameData.prizesWon = (this.app.gameData.prizesWon || 0) + 1;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é
            if (!this.app.gameData.prizes) {
                this.app.gameData.prizes = [];
            }
            
            this.app.gameData.prizes.push({
                ...prize,
                timestamp: Date.now(),
                claimed: prize.type.includes('stars') // –ó–≤–µ–∑–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Å—á–∏—Ç–∞–Ω—ã
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏
        if (!this.app.gameData.recentWins) {
            this.app.gameData.recentWins = [];
        }
        
        this.app.gameData.recentWins.unshift({
            prize: prize,
            timestamp: Date.now()
        });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π
        if (this.app.gameData.recentWins.length > 10) {
            this.app.gameData.recentWins = this.app.gameData.recentWins.slice(0, 10);
        }
        
        console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è savePrizeToServer
    async savePrizeToServer(prize) {
        console.log('üéÅ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', prize);
        
        if (!window.telegramIntegration?.sendToServer) {
            console.error('‚ùå telegramIntegration –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }
        
        if (!window.telegramIntegration.user?.id) {
            console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
            return false;
        }
        
        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            const spinData = {
                spinType: 'normal', // –§–ò–ö–°–ò–†–û–í–ê–ù–ù–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ
                prize: {
                    id: prize.id || Math.floor(Math.random() * 1000000), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –Ω–µ—Ç
                    name: prize.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–∑',
                    type: prize.type || 'empty',
                    value: Number(prize.value) || 0, // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
                    probability: prize.probability || 0
                },
                timestamp: new Date().toISOString()
            };
            
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', spinData);
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', window.telegramIntegration.user);
            
            const response = await window.telegramIntegration.sendToServer('wheel_spin', spinData);
            
            console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
            
            if (response && response.success === true) {
                console.log('‚úÖ –ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                return true;
            } else {
                console.error('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', response);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                if (response?.error) {
                    console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', response.error);
                    if (response.details) {
                        console.error('üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', response.details);
                    }
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if (response.error.includes('Invalid') || response.error.includes('validation')) {
                        this.app.showStatusMessage('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'warning', 4000);
                    } else {
                        this.app.showStatusMessage(`‚ùå ${response.error}`, 'error', 4000);
                    }
                } else {
                    this.app.showStatusMessage('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'error', 3000);
                }
                
                return false;
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (error.message?.includes('429')) {
                this.app.showStatusMessage('‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.', 'warning', 4000);
            } else if (error.message?.includes('400')) {
                this.app.showStatusMessage('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞', 'warning', 4000);
            } else if (error.message?.includes('500')) {
                this.app.showStatusMessage('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'error', 3000);
            } else {
                this.app.showStatusMessage('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'error', 3000);
            }
            
            return false;
        }
    }

    updateSpinButtons() {
        const spinStarsBtn = document.getElementById('spin-button-stars');
        const spinFriendBtn = document.getElementById('spin-button-friend');

        if (spinStarsBtn) {
            const canSpinStars = !this.isSpinning && this.app.gameData.stars >= APP_CONFIG.wheel.starCost;
            spinStarsBtn.disabled = !canSpinStars;
            spinStarsBtn.classList.toggle('disabled', !canSpinStars);
            
            if (this.isSpinning) {
                spinStarsBtn.innerHTML = `<i class="fas fa-spinner fa-spin"></i><span>–ö—Ä—É—Ç–∏—Ç—Å—è...</span>`;
            } else {
                spinStarsBtn.innerHTML = `<i class="fas fa-star"></i><span>–ó–∞ 20 ‚≠ê</span>`;
            }
        }

        if (spinFriendBtn) {
            const referralsCount = this.app.gameData.referrals || 0;
            const friendSpinsUsed = this.app.gameData.friendSpinsUsed || 0;
            const availableSpins = Math.max(0, referralsCount - friendSpinsUsed);
            
            // –ö–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –ª–∏–±–æ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏, –ª–∏–±–æ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            const canInteract = !this.isSpinning;
            spinFriendBtn.disabled = !canInteract;
            spinFriendBtn.classList.toggle('disabled', !canInteract);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            if (this.isSpinning) {
                spinFriendBtn.innerHTML = `<i class="fas fa-spinner fa-spin"></i><span>–ö—Ä—É—Ç–∏—Ç—Å—è...</span>`;
            } else if (referralsCount === 0) {
                spinFriendBtn.innerHTML = `<i class="fas fa-share"></i><span>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞</span>`;
            } else if (availableSpins === 0) {
                spinFriendBtn.innerHTML = `<i class="fas fa-heart"></i><span>–ü—Ä–∏–≥–ª–∞—Å–∏ –µ—â–µ</span>`;
            } else {
                spinFriendBtn.innerHTML = `<i class="fas fa-heart"></i><span>–ó–∞ –¥—Ä—É–≥–∞ (${availableSpins})</span>`;
            }
        }
    }

    updateRecentWins() {
        const container = document.getElementById('recent-wins-list');
        if (!container) return;

        const recentWins = this.app.gameData.recentWins || [];
        
        if (recentWins.length === 0) {
            container.innerHTML = '<div class="recent-win-item empty">–í—ã–∏–≥—Ä—ã—à–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</div>';
            return;
        }

        container.innerHTML = recentWins.map(win => `
            <div class="recent-win-item">
                <span>${win.prize.icon || 'üéÅ'}</span>
                <div class="win-description">${win.prize.name}</div>
                <div class="win-time">${this.formatTime(win.timestamp)}</div>
            </div>
        `).join('');
    }

    formatTime(timestamp) {
        const date = new Date(timestamp);
        const now = new Date();
        const diff = now - date;
        
        if (diff < 60000) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (diff < 3600000) return `${Math.floor(diff / 60000)} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        if (diff < 86400000) return `${Math.floor(diff / 3600000)} —á –Ω–∞–∑–∞–¥`;
        return `${Math.floor(diff / 86400000)} –¥–Ω –Ω–∞–∑–∞–¥`;
    }

    openMegaRoulette() {
        if (this.app.navigation) {
            this.app.navigation.navigateTo('mega-roulette');
        } else {
            this.app.showStatusMessage('–ú–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'info');
        }
    }

    refreshEventListeners() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞...');
        this.setupEventListeners();
    }

    destroy() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞...');
        this.removeEventListeners();
    }

    showReferralLink() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        const userId = this.app.tg?.initDataUnsafe?.user?.id || 'demo';
        const botUsername = 'kosmetichka_lottery_bot'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ telegram-bot-server.js
        const referralLink = `https://t.me/${botUsername}?start=ref_${userId}`;
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'referral-modal';
        modal.innerHTML = `
            <div class="referral-modal-content">
                <div class="referral-header">
                    <h3>üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫—É!</h3>
                    <button class="close-modal" type="button">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="referral-body">
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏!</p>
                    <div class="referral-link-container">
                        <input type="text" id="referral-link" value="${referralLink}" readonly>
                        <button class="copy-btn" type="button" id="copy-referral-btn" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                    <div class="referral-info">
                        <p>üí´ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–∞!</p>
                    </div>
                    <button class="share-btn" type="button" id="share-referral-btn">
                        <i class="fas fa-share"></i>
                        <span>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram</span>
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        modal.querySelector('.close-modal').addEventListener('click', () => {
            modal.remove();
        });
        
        modal.querySelector('#copy-referral-btn').addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log('üîó –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
            this.copyReferralLink(referralLink);
        });
        
        modal.querySelector('#share-referral-btn').addEventListener('click', () => {
            const shareText = 'üé∞ –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Kosmetichka Lottery Bot - –∫—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –ø—Ä–∏–∑—ã! üíÑ‚ú®';
            const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(shareText)}`;
            
            if (this.app.tg && this.app.tg.openTelegramLink) {
                this.app.tg.openTelegramLink(shareUrl);
            } else {
                window.open(shareUrl, '_blank');
            }
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        this.copyReferralLink(referralLink);
    }
    
    copyReferralLink(link) {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(link).then(() => {
                this.app.showStatusMessage('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
            }).catch(() => {
                this.fallbackCopyTextToClipboard(link);
            });
        } else {
            this.fallbackCopyTextToClipboard(link);
        }
    }
    
    fallbackCopyTextToClipboard(text) {
        const textArea = document.createElement("textarea");
        textArea.value = text;
        textArea.style.top = "0";
        textArea.style.left = "0";
        textArea.style.position = "fixed";
        
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            this.app.showStatusMessage('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        } catch (err) {
            this.app.showStatusMessage('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', 'error');
        }
        
        document.body.removeChild(textArea);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    openSupport() {
        console.log('üéß –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞');
        
        if (this.app.tg?.openTelegramLink) {
            this.app.tg.openTelegramLink('https://t.me/kosmetichkasupport');
            this.app.showStatusMessage('–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É...', 'info');
        } else if (window.open) {
            // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            window.open('https://t.me/kosmetichkasupport', '_blank');
        } else {
            this.app.showStatusMessage('–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @kosmetichkasupport', 'info');
        }
    }
}
