// public/js/screens/profile.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –†–ê–ë–û–ß–ò–ú –õ–ò–î–ï–†–ë–û–†–î–û–ú

export class ProfileScreen {
    constructor(app) {
        this.app = app;
        this.currentTab = 'profile-info';
        this.currentLeaderboardType = 'global';
        
        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        window.profileScreen = this;
    }

    render() {
        const gameData = this.app.gameData;
        
        return `
            <div id="profile-screen" class="screen">
                <div class="screen-header">
                    <h2>–ü—Ä–æ—Ñ–∏–ª—å</h2>
                </div>
                
                <!-- –í–∫–ª–∞–¥–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è -->
                <div class="profile-tabs">
                    <button class="profile-tab active" data-tab="profile-info">
                        <i class="fas fa-user"></i>
                        –ü—Ä–æ—Ñ–∏–ª—å
                    </button>
                    <button class="profile-tab" data-tab="leaderboard">
                        <i class="fas fa-trophy"></i>
                        –õ–∏–¥–µ—Ä–±–æ—Ä–¥
                    </button>
                </div>
                
                <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å" -->
                <div class="tab-content active" id="profile-info">
                    <div class="profile-header">
                        <div class="profile-avatar">
                            ${this.renderUserAvatar()}
                        </div>
                        <div class="profile-info">
                            <h3 class="profile-name">${this.getUserDisplayName()}</h3>
                            <div class="profile-telegram-id">ID: ${this.getTelegramId()}</div>
                            <!-- –£–±—Ä–∞–ª–∏ –±–ª–æ–∫ profile-stats —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–≤–µ–∑–¥ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ -->
                        </div>
                    </div>

                    <div class="profile-content">
                        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                        <div class="section">
                            <div class="section-title">
                                <i class="fas fa-chart-bar"></i>
                                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            </div>
                            <div class="stats-grid" id="profile-stats-grid">
                                <div class="stats-card">
                                    <div class="stats-card-icon">‚≠ê</div>
                                    <div class="stats-card-value">${gameData.totalStarsEarned || gameData.stars}</div>
                                    <div class="stats-card-label">–ó–≤–µ–∑–¥</div>
                                </div>
                                <div class="stats-card">
                                    <div class="stats-card-icon">üë•</div>
                                    <div class="stats-card-value">${gameData.referrals || 0}</div>
                                    <div class="stats-card-label">–†–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
                                </div>
                                <!-- –£–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–∞–º–∏ –∏ –ø—Ä–∏–∑–∞–º–∏ -->
                            </div>
                        </div>

                        <!-- –†–µ—Ñ–µ—Ä–∞–ª—ã -->
                        <div class="section">
                            <div class="section-title">
                                <i class="fas fa-users"></i>
                                –†–µ—Ñ–µ—Ä–∞–ª—ã
                            </div>
                            <div class="referrals-section" id="referrals-section">
                                ${this.renderReferralsSection()}
                            </div>
                        </div>

                        <!-- –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∑–æ–≤ -->
                        <div class="section">
                            <div class="section-title">
                                <i class="fas fa-gift"></i>
                                –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∑–æ–≤
                            </div>
                            <div class="prizes-section" id="prizes-section">
                                <div class="empty-state">
                                    <div class="empty-icon">üéÅ</div>
                                    <div class="empty-text">–ü–æ–∫–∞ —á—Ç–æ –ø—Ä–∏–∑–æ–≤ –Ω–µ—Ç</div>
                                    <div class="empty-subtitle">–ö—Ä—É—Ç–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ "–õ–∏–¥–µ—Ä–±–æ—Ä–¥" -->
                <div class="tab-content" id="leaderboard">
                    <div class="leaderboard-tabs">
                        <button class="leaderboard-tab active" data-type="global">
                            <i class="fas fa-globe"></i>
                            –ì–ª–æ–±–∞–ª—å–Ω—ã–π
                        </button>
                        <button class="leaderboard-tab" data-type="referrals">
                            <i class="fas fa-users"></i>
                            –†–µ—Ñ–µ—Ä–∞–ª—ã
                        </button>
                    </div>
                    
                    <div class="current-position" id="current-position">
                        <!-- –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                    
                    <div class="leaderboard-list" id="leaderboard-list">
                        <div class="loading-state">
                            <i class="fas fa-spinner fa-spin"></i>
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...</p>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    init() {
        console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProfileScreen...');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupTabEventListeners();
        this.setupLeaderboardTabs();
        this.setupReferralHandlers();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        this.loadProfileData();
        
        console.log('‚úÖ ProfileScreen –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupTabEventListeners() {
        document.querySelectorAll('.profile-tab').forEach(tab => {
            tab.addEventListener('click', () => {
                const targetTab = tab.dataset.tab;
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                document.querySelectorAll('.profile-tab').forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.remove('active');
                });
                document.getElementById(targetTab).classList.add('active');
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–∏
                if (targetTab === 'leaderboard') {
                    this.loadLeaderboard();
                }
                
                this.currentTab = targetTab;
            });
        });
    }

    setupLeaderboardTabs() {
        document.querySelectorAll('.leaderboard-tab').forEach(button => {
            button.addEventListener('click', () => {
                const type = button.dataset.type;
                
                console.log(`üèÜ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –Ω–∞ —Ç–∏–ø: ${type}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                document.querySelectorAll('.leaderboard-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                button.classList.add('active');
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                this.loadLeaderboardData(type);
            });
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
    async loadProfileData() {
        const userId = this.getTelegramId();
        
        if (!userId || userId === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
            console.error('User ID not found');
            return;
        }
        
        try {
            const response = await fetch(`/api/user/${userId}`);
            if (!response.ok) throw new Error('Failed to load user data');
            
            const userData = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            this.app.gameData = {
                ...this.app.gameData,
                ...userData,
                stars: userData.stars || this.app.gameData.stars,
                totalStarsEarned: userData.total_stars_earned || userData.stats?.totalStarsEarned,
                totalSpins: userData.stats?.totalSpins || 0,
                prizesWon: userData.stats?.prizesWon || 0,
                referrals: userData.stats?.referrals || 0
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            this.updateProfileStats(userData);
            
        } catch (error) {
            console.error('Error loading profile data:', error);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    updateProfileStats(userData) {
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', userData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        const statsGrid = document.getElementById('profile-stats-grid');
        if (statsGrid) {
            statsGrid.innerHTML = `
                <div class="stats-card">
                    <div class="stats-card-icon">‚≠ê</div>
                    <div class="stats-card-value">${userData.stars || this.app.gameData.stars || 0}</div>
                    <div class="stats-card-label">–ó–≤–µ–∑–¥</div>
                </div>
                <div class="stats-card">
                    <div class="stats-card-icon">üë•</div>
                    <div class="stats-card-value">${userData.stats?.referrals || userData.referrals || 0}</div>
                    <div class="stats-card-label">–†–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
                </div>
            `;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (this.app.updateUI) {
            this.app.updateUI();
        }
        
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    async loadLeaderboard() {
        console.log('üèÜ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await this.loadLeaderboardData('global');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userId = this.getTelegramId();
        if (userId && userId !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
            await this.loadUserPosition(userId);
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    async loadLeaderboardData(type) {
        console.log(`üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ç–∏–ø–∞: ${type}`);
        this.currentLeaderboardType = type;
        
        const leaderboardList = document.getElementById('leaderboard-list');
        if (!leaderboardList) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        leaderboardList.innerHTML = `
            <div class="loading-state">
                <i class="fas fa-spinner fa-spin"></i>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...</p>
            </div>
        `;
        
        try {
            const endpoint = type === 'referrals' 
                ? '/api/leaderboard/referrals' 
                : '/api/leaderboard/global';
                
            const response = await fetch(endpoint);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ (${type}):`, data);
            
            this.renderLeaderboard(data, type);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ (${type}):`, error);
            leaderboardList.innerHTML = `
                <div class="error-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞</p>
                    <button onclick="window.profileScreen.loadLeaderboardData('${type}')" class="retry-btn">
                        –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
                    </button>
                </div>
            `;
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –†–µ–Ω–¥–µ—Ä –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    renderLeaderboard(data, type) {
        const leaderboardList = document.getElementById('leaderboard-list');
        if (!leaderboardList) return;
        
        console.log('üé® –†–µ–Ω–¥–µ—Ä –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', { type, data });
        
        if (!data || !Array.isArray(data) || data.length === 0) {
            leaderboardList.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üèÜ</div>
                    <div class="empty-text">–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç</div>
                    <div class="empty-subtitle">–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!</div>
                </div>
            `;
            return;
        }
        
        const leaderboardHTML = data.map((player, index) => {
            const position = index + 1;
            const emoji = this.getPositionEmoji(position);
            const displayName = this.getPlayerDisplayName(player);
            const scoreValue = type === 'referrals' 
                ? (player.referrals_count || 0)
                : (player.total_stars_earned || player.stars || 0);
            const scoreLabel = type === 'referrals' ? 'üë•' : '‚≠ê';
            
            return `
                <div class="leaderboard-item ${this.isCurrentUser(player) ? 'current-user' : ''}">
                    <div class="player-rank ${position <= 3 ? 'top-rank' : ''}">${emoji}</div>
                    <div class="player-info">
                        <div class="player-name">${displayName}</div>
                        <div class="player-id">ID: ${player.telegram_id}</div>
                    </div>
                    <div class="player-score">${scoreLabel} ${scoreValue}</div>
                </div>
            `;
        }).join('');
        
        leaderboardList.innerHTML = leaderboardHTML;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async loadUserPosition(userId) {
        try {
            const endpoint = this.currentLeaderboardType === 'referrals' 
                ? `/api/leaderboard/referrals/position/${userId}`
                : `/api/leaderboard/global/position/${userId}`;
                
            const response = await fetch(endpoint);
            
            if (response.ok) {
                const positionData = await response.json();
                this.renderUserPosition(positionData);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }

    // –†–µ–Ω–¥–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    renderUserPosition(data) {
        const currentPositionEl = document.getElementById('current-position');
        if (!currentPositionEl) return;
        
        if (data && data.position) {
            const { position, score } = data;
            const scoreLabel = this.currentLeaderboardType === 'referrals' ? '—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤' : '–∑–≤–µ–∑–¥';
            const emoji = this.getPositionEmoji(position);
            
            currentPositionEl.innerHTML = `
                <div class="user-position-card">
                    <div class="position-info">
                        <div class="position-rank">${emoji}</div>
                        <div class="position-text">
                            <div class="position-number">${position > 100 ? '100+' : `#${position}`}</div>
                            <div class="position-details">${scoreLabel}: ${score}</div>
                        </div>
                    </div>
                </div>
            `;
        } else {
            currentPositionEl.innerHTML = `
                <div class="user-position-card">
                    <div class="position-info">
                        <div class="position-rank">‚Äî</div>
                        <div class="position-text">
                            <div class="position-number">–ù–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</div>
                            <div class="position-details">–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å!</div>
                        </div>
                    </div>
                </div>
            `;
        }
    }

    renderReferralsSection() {
        const gameData = this.app.gameData;
        const referralsCount = gameData.referrals || 0;
        const starsFromReferrals = referralsCount * 100;
        
        return `
            <div class="referrals-stats">
                <!-- –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ -->
                <div class="referrals-overview">
                    <div class="referral-stat-card">
                        <div class="referral-stat-value">${referralsCount}</div>
                        <div class="referral-stat-label">üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π</div>
                    </div>
                    <div class="referral-stat-card">
                        <div class="referral-stat-value">${starsFromReferrals}</div>
                        <div class="referral-stat-label">‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –∑–≤–µ–∑–¥</div>
                    </div>
                </div>
                
                <!-- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ -->
                <div class="referral-link-container">
                    <label>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</label>
                    <div class="referral-link">
                        <input type="text" id="referral-link" value="https://t.me/kosmetichka_lottery_bot?start=ref_${this.getTelegramId()}" readonly>
                        <button onclick="window.profileScreen.copyReferralLink()" class="copy-btn">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                </div>
                
                <!-- –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ -->
                <div class="referral-actions">
                    <button id="share-referral" class="share-btn">
                        <i class="fas fa-share"></i>
                        –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π
                    </button>
                </div>
                
                <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö -->
                <div class="referral-info">
                    <div class="referral-description">
                        <h4>üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h4>
                        <ul>
                            <li>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ</li>
                            <li>–ü–æ–ª—É—á–∏—Ç–µ 100 –∑–≤–µ–∑–¥ —Å—Ä–∞–∑—É –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</li>
                            <li>–î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å 2 –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã</li>
                            <li>–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 20 –∑–≤–µ–∑–¥ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞</li>
                        </ul>
                    </div>
                </div>
            </div>
        `;
    }

    setupReferralHandlers() {
        setTimeout(() => {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
            const shareBtn = document.getElementById('share-referral');
            if (shareBtn) {
                shareBtn.addEventListener('click', () => {
                    this.shareReferralLink();
                });
            }
        }, 100);
    }

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    copyReferralLink() {
        const linkInput = document.getElementById('referral-link');
        if (linkInput) {
            linkInput.select();
            linkInput.setSelectionRange(0, 99999); // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            
            try {
                document.execCommand('copy');
                this.app.showNotification('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                this.app.showNotification('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
            }
        }
    }

    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
    shareReferralLink() {
        const userId = this.getTelegramId();
        const referralLink = `https://t.me/kosmetichka_lottery_bot?start=ref_${userId}`;
        const shareText = `üéÅ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Kosmetichka Lottery!\n\nüí´ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –ø—Ä–∏–∑—ã!\n‚≠ê –ü–æ–ª—É—á–∏ –±–æ–Ω—É—Å–Ω—ã–µ –∑–≤–µ–∑–¥—ã –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n${referralLink}`;
        
        if (this.app.tg && this.app.tg.shareMessage) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Web App API
            this.app.tg.shareMessage(shareText);
        } else if (navigator.share) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Share API
            navigator.share({
                title: 'Kosmetichka Lottery',
                text: shareText,
                url: referralLink
            }).catch(err => console.log('–û—à–∏–±–∫–∞ —à–∞—Ä–∏–Ω–≥–∞:', err));
        } else {
            // Fallback - –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            navigator.clipboard.writeText(shareText).then(() => {
                this.app.showNotification('‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', 'success');
            }).catch(() => {
                this.app.showNotification('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
            });
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getTelegramId() {
        const telegramUser = this.app.tg?.initDataUnsafe?.user || 
                            window.Telegram?.WebApp?.initDataUnsafe?.user;
        
        return telegramUser?.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    getUserDisplayName() {
        const telegramUser = this.app.tg?.initDataUnsafe?.user || 
                            window.Telegram?.WebApp?.initDataUnsafe?.user;
        
        if (telegramUser?.username) {
            return `@${telegramUser.username}`;
        } else if (telegramUser?.first_name) {
            return telegramUser.first_name;
        }
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }

    getPlayerDisplayName(player) {
        if (player.username) {
            return `@${player.username}`;
        } else if (player.first_name) {
            return player.first_name;
        } else {
            return `User${player.telegram_id.toString().slice(-4)}`;
        }
    }

    getPositionEmoji(position) {
        switch (position) {
            case 1: return 'ü•á';
            case 2: return 'ü•à';
            case 3: return 'ü•â';
            default: return `#${position}`;
        }
    }

    isCurrentUser(player) {
        const currentUserId = this.getTelegramId();
        return currentUserId && currentUserId.toString() === player.telegram_id.toString();
    }

    renderUserAvatar() {
        const user = this.app.tg?.initDataUnsafe?.user;
        
        if (user?.photo_url) {
            return `<img src="${user.photo_url}" alt="–ê–≤–∞—Ç–∞—Ä ${user.first_name}" 
                         style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;"
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                    <div class="avatar-fallback" style="display: none; width: 100%; height: 100%; 
                         display: flex; align-items: center; justify-content: center; 
                         font-size: 36px; font-weight: bold;">
                        ${user.first_name?.charAt(0).toUpperCase() || 'üë§'}
                    </div>`;
        } else if (user?.first_name) {
            return user.first_name.charAt(0).toUpperCase();
        }
        
        return 'üë§';
    }

    destroy() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è...');
        // –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        const tabs = document.querySelectorAll('.profile-tab');
        tabs.forEach(tab => {
            tab.replaceWith(tab.cloneNode(true));
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ onclick - –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
