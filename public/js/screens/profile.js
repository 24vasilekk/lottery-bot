// public/js/screens/profile.js - –ò–ó–ú–ï–ù–Å–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –î–û–°–¢–ò–ñ–ï–ù–ò–ô, –ù–ê–°–¢–†–û–ï–ö, –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò –û –ü–†–ò–õ–û–ñ–ï–ù–ò–ò

export class ProfileScreen {
    constructor(app) {
        this.app = app;
    }

    render() {
        const gameData = this.app.gameData;
        
        return `
            <div id="profile-screen" class="screen">
                <div class="profile-header">
                    <div class="profile-avatar">
                        ${this.app.tg?.initDataUnsafe?.user?.first_name?.charAt(0) || 'üë§'}
                    </div>
                    <div class="profile-info">
                        <h2 class="profile-name">${this.app.tg?.initDataUnsafe?.user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h2>
                        <div class="profile-stats">
                            <div class="stat-item">
                                <div class="stat-value">${gameData.stars}</div>
                                <div class="stat-label">‚≠ê –ó–≤–µ–∑–¥—ã</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value">${gameData.totalSpins || 0}</div>
                                <div class="stat-label">üéØ –ü—Ä–æ–∫—Ä—É—Ç–∫–∏</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value">${gameData.prizes?.length || gameData.prizesWon || 0}</div>
                                <div class="stat-label">üéÅ –ü—Ä–∏–∑—ã</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="profile-content">
                    <!-- –û–°–ù–û–í–ù–ê–Ø –°–ï–ö–¶–ò–Ø: –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∑–æ–≤ -->
                    <div class="section">
                        <h3 class="section-title">üéÅ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∑–æ–≤</h3>
                        <div class="prize-history">
                            ${this.renderPrizeHistory()}
                        </div>
                    </div>

                    <!-- –û–°–ù–û–í–ù–ê–Ø –°–ï–ö–¶–ò–Ø: –†–µ—Ñ–µ—Ä–∞–ª—ã -->
                    <div class="section">
                        <h3 class="section-title">üë• –†–µ—Ñ–µ—Ä–∞–ª—ã</h3>
                        <div class="referral-section">
                            <div class="referral-info">
                                <div class="referral-count">
                                    <span class="count-number">${gameData.referrals || 0}</span>
                                    <span class="count-label">–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π</span>
                                </div>
                                <div class="referral-earnings">
                                    <span class="earnings-number">${(gameData.referrals || 0) * 50}</span>
                                    <span class="earnings-label">‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</span>
                                </div>
                            </div>
                            
                            <div class="referral-action">
                                <button id="share-referral" class="share-btn">
                                    <i class="fas fa-share"></i>
                                    –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞
                                </button>
                                <p class="referral-bonus">+50 ‚≠ê –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞</p>
                            </div>
                            
                            <div class="referral-levels">
                                <h4>üèÜ –£—Ä–æ–≤–Ω–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</h4>
                                <div class="level-progress">
                                    ${this.renderReferralLevels()}
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- –û–°–ù–û–í–ù–ê–Ø –°–ï–ö–¶–ò–Ø: –õ–∏–¥–µ—Ä–±–æ—Ä–¥ -->
                    <div class="section">
                        <h3 class="section-title">üèÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥</h3>
                        <div class="leaderboard-tabs">
                            <button class="leaderboard-tab active" data-type="spins">–ü–æ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞–º</button>
                            <button class="leaderboard-tab" data-type="prizes">–ü–æ –ø—Ä–∏–∑–∞–º</button>
                        </div>
                        <div class="leaderboard-content">
                            ${this.renderLeaderboard()}
                        </div>
                    </div>

                    <!-- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –û–¢–°–¢–£–ü –î–õ–Ø –ü–û–õ–ù–û–ô –ü–†–û–ö–†–£–¢–ö–ò -->
                    <div style="height: 60px;"></div>
                </div>
            </div>
        `;
    }

    init() {
        console.log('üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è...');
        this.setupEventListeners();
        console.log('‚úÖ –≠–∫—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"
        const shareBtn = document.getElementById('share-referral');
        if (shareBtn) {
            shareBtn.addEventListener('click', () => {
                this.shareReferralLink();
            });
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        const leaderboardTabs = document.querySelectorAll('.leaderboard-tab');
        leaderboardTabs.forEach(tab => {
            tab.addEventListener('click', (e) => {
                const type = e.target.dataset.type;
                this.switchLeaderboard(type);
            });
        });
    }

    renderPrizeHistory() {
        const prizes = this.app.gameData.recentWins || this.app.gameData.prizes || [];
        
        if (prizes.length === 0) {
            return `
                <div class="empty-history">
                    <i class="fas fa-gift"></i>
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π</p>
                    <span>–ö—Ä—É—Ç–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!</span>
                </div>
            `;
        }

        return prizes.slice(0, 10).map(prize => {
            const prizeIcon = this.getPrizeIcon(prize.type || prize.name);
            const prizeValue = prize.value ? `+${prize.value} ‚≠ê` : '';
            const date = prize.timestamp ? this.formatDate(prize.timestamp) : '–ù–µ–¥–∞–≤–Ω–æ';
            
            return `
                <div class="prize-history-item">
                    <div class="prize-icon">${prizeIcon}</div>
                    <div class="prize-info">
                        <div class="prize-name">${prize.name || prize.type}</div>
                        <div class="prize-date">${date}</div>
                    </div>
                    <div class="prize-value">${prizeValue}</div>
                </div>
            `;
        }).join('');
    }

    renderReferralLevels() {
        const referrals = this.app.gameData.referrals || 0;
        const levels = [
            { count: 1, reward: 50, icon: 'ü•â' },
            { count: 5, reward: 300, icon: 'ü•à' },
            { count: 10, reward: 700, icon: 'ü•á' },
            { count: 20, reward: 1500, icon: 'üíé' },
            { count: 40, reward: 3500, icon: 'üëë' }
        ];

        return levels.map(level => {
            const isUnlocked = referrals >= level.count;
            const progress = Math.min((referrals / level.count) * 100, 100);
            
            return `
                <div class="referral-level ${isUnlocked ? 'unlocked' : 'locked'}">
                    <div class="level-icon">${level.icon}</div>
                    <div class="level-info">
                        <div class="level-name">${level.count} –¥—Ä—É–∑–µ–π</div>
                        <div class="level-reward">+${level.reward} ‚≠ê –±–æ–Ω—É—Å</div>
                        <div class="level-progress">
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${progress}%"></div>
                            </div>
                            <span class="progress-text">${referrals}/${level.count}</span>
                        </div>
                    </div>
                    ${isUnlocked ? '<div class="level-check">‚úÖ</div>' : ''}
                </div>
            `;
        }).join('');
    }

    renderLeaderboard() {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ —Å —Å–µ—Ä–≤–µ—Ä–∞
        const mockLeaderboard = [
            { name: '–ê–Ω–Ω–∞ –ö.', spins: 247, prizes: 18, avatar: 'üë©' },
            { name: '–ú–∞—Ä–∏—è –î.', spins: 198, prizes: 15, avatar: 'üë±‚Äç‚ôÄÔ∏è' },
            { name: '–ï–ª–µ–Ω–∞ –°.', spins: 176, prizes: 12, avatar: 'üë©‚Äçü¶∞' },
            { name: '–í—ã', spins: this.app.gameData.totalSpins || 0, prizes: this.app.gameData.prizesWon || 0, avatar: 'üë§', isUser: true }
        ];

        return mockLeaderboard.map((user, index) => {
            return `
                <div class="leaderboard-item ${user.isUser ? 'user-item' : ''}">
                    <div class="leader-rank">${index + 1}</div>
                    <div class="leader-avatar">${user.avatar}</div>
                    <div class="leader-info">
                        <div class="leader-name">${user.name}</div>
                        <div class="leader-stats">
                            <span>üéØ ${user.spins}</span>
                            <span>üéÅ ${user.prizes}</span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    switchLeaderboard(type) {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞–º–∏ –ø–æ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞–º –∏ –ø—Ä–∏–∑–∞–º
        document.querySelectorAll('.leaderboard-tab').forEach(tab => {
            tab.classList.toggle('active', tab.dataset.type === type);
        });
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤
        console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –Ω–∞ —Ç–∏–ø: ${type}`);
    }

    shareReferralLink() {
        const userId = this.app.tg?.initDataUnsafe?.user?.id || 'user';
        const botUsername = 'kosmetichka_lottery_bot'; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞
        const referralLink = `https://t.me/${botUsername}?start=${userId}`;
        
        const shareText = `üéÅ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Kosmetichka Lottery!\n\n–ü–æ–ª—É—á–∏ 50 –∑–≤–µ–∑–¥ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–∑—ã! üíÑ‚ú®\n\n${referralLink}`;
        
        if (this.app.tg) {
            this.app.tg.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(shareText)}`);
        } else {
            navigator.clipboard.writeText(referralLink).then(() => {
                this.app.showStatusMessage('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
            }).catch(() => {
                this.app.showStatusMessage('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', 'error');
            });
        }
    }

    getPrizeIcon(prizeType) {
        const icons = {
            'stars': '‚≠ê',
            'certificate': 'üéÅ',
            'golden_apple': 'üçé',
            'dolce_deals': 'üõçÔ∏è',
            'beauty_set': 'üíÑ',
            'jewelry': 'üíé',
            'empty': 'üåü'
        };
        
        return icons[prizeType] || 'üéÅ';
    }

    formatDate(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit', 
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    destroy() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è...');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    }
}