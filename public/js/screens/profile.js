// public/js/screens/profile.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –†–ê–ë–û–ß–ò–ú –õ–ò–î–ï–†–ë–û–†–î–û–ú

export class ProfileScreen {
    constructor(app) {
        this.app = app;
        this.currentTab = 'profile-info';
        this.currentLeaderboardType = 'global';
        
        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        window.profileScreen = this;
    }

    render() {
        const gameData = this.app.gameData;
        
        return `
            <div id="profile-screen" class="screen">
                <div class="screen-header">
                    <h2>–ü—Ä–æ—Ñ–∏–ª—å</h2>
                </div>
                
                <!-- –í–∫–ª–∞–¥–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è -->
                <div class="profile-tabs">
                    <button class="profile-tab active" data-tab="profile-info">
                        <i class="fas fa-user"></i>
                        –ü—Ä–æ—Ñ–∏–ª—å
                    </button>
                    <button class="profile-tab" data-tab="leaderboard">
                        <i class="fas fa-trophy"></i>
                        –õ–∏–¥–µ—Ä–±–æ—Ä–¥
                    </button>
                </div>
                
                <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å" -->
                <div class="tab-content active" id="profile-info">
                    <div class="profile-header">
                        <div class="profile-avatar">
                            ${this.renderUserAvatar()}
                        </div>
                        <div class="profile-info">
                            <h3 class="profile-name">${this.getUserDisplayName()}</h3>
                            <div class="profile-telegram-id">ID: ${this.getTelegramId()}</div>
                            <div class="profile-stats">
                                <div class="stat-item">
                                    <div class="stat-value">${gameData.stars}</div>
                                    <div class="stat-label">‚≠ê –ó–≤–µ–∑–¥—ã</div>
                                </div>
                                <div class="stat-item">
                                    <div class="stat-value">${gameData.referrals || 0}</div>
                                    <div class="stat-label">üë• –†–µ—Ñ–µ—Ä–∞–ª—ã</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="profile-content">
                        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                        <div class="section">
                            <div class="section-title">
                                <i class="fas fa-chart-bar"></i>
                                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            </div>
                            <div class="stats-grid" id="profile-stats-grid">
                                <div class="stats-card">
                                    <div class="stats-card-icon">‚≠ê</div>
                                    <div class="stats-card-value">${gameData.totalStarsEarned || gameData.stars}</div>
                                    <div class="stats-card-label">–ó–≤–µ–∑–¥</div>
                                </div>
                                <div class="stats-card">
                                    <div class="stats-card-icon">üé∞</div>
                                    <div class="stats-card-value">${gameData.totalSpins || 0}</div>
                                    <div class="stats-card-label">–ü—Ä–æ–∫—Ä—É—Ç–æ–∫</div>
                                </div>
                                <div class="stats-card">
                                    <div class="stats-card-icon">üéÅ</div>
                                    <div class="stats-card-value">${gameData.prizesWon || 0}</div>
                                    <div class="stats-card-label">–ü—Ä–∏–∑–æ–≤</div>
                                </div>
                                <div class="stats-card">
                                    <div class="stats-card-icon">üë•</div>
                                    <div class="stats-card-value">${gameData.referrals || 0}</div>
                                    <div class="stats-card-label">–†–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
                                </div>
                            </div>
                        </div>

                        <!-- –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∑–æ–≤ -->
                        <div class="section">
                            <div class="section-title">
                                <i class="fas fa-gift"></i>
                                –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∑–æ–≤
                            </div>
                            <div class="prize-history" id="prize-history">
                                ${this.renderPrizesHistory()}
                            </div>
                        </div>

                        <!-- –†–µ—Ñ–µ—Ä–∞–ª—ã -->
                        <div class="section">
                            <div class="section-title">
                                <i class="fas fa-users"></i>
                                –†–µ—Ñ–µ—Ä–∞–ª—ã
                            </div>
                            <div class="referrals-section" id="referrals-section">
                                ${this.renderReferralsSection()}
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ "–õ–∏–¥–µ—Ä–±–æ—Ä–¥" -->
                <div class="tab-content" id="leaderboard">
                    <div class="leaderboard-container">
                        <div class="leaderboard-header">
                            <h3>
                                <i class="fas fa-trophy"></i>
                                –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
                            </h3>
                            <p>–õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</p>
                        </div>
                        
                        <div class="leaderboard-controls">
                            <button class="leaderboard-tab active" data-type="global">
                                <i class="fas fa-globe"></i> –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø
                            </button>
                            <button class="leaderboard-tab" data-type="referrals">
                                <i class="fas fa-users"></i> –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
                            </button>
                        </div>
                        
                        <div class="leaderboard-content" id="leaderboard-content">
                            <div class="loading">
                                <i class="fas fa-spinner fa-spin"></i>
                                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...</p>
                            </div>
                        </div>
                        
                        <!-- –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -->
                        <div class="current-user-rank" id="current-user-rank">
                            <!-- –†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω -->
                        </div>
                    </div>
                </div>

                <!-- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –û–¢–°–¢–£–ü –î–õ–Ø –ü–û–õ–ù–û–ô –ü–†–û–ö–†–£–¢–ö–ò -->
                <div style="height: 80px;"></div>
            </div>
        `;
    }

    init() {
        console.log('üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è...');
        this.setupEventListeners();
        this.loadProfileData();
        console.log('‚úÖ –≠–∫—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        this.initProfileTabs();
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
        this.initLeaderboardTabs();
        
        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"
        const shareBtn = document.getElementById('share-referral');
        if (shareBtn) {
            shareBtn.addEventListener('click', () => {
                this.shareReferralLink();
            });
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
    initProfileTabs() {
        const tabs = document.querySelectorAll('.profile-tab');
        const contents = document.querySelectorAll('.tab-content');
        
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const targetTab = tab.dataset.tab;
                
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                tabs.forEach(t => t.classList.remove('active'));
                contents.forEach(c => c.classList.remove('active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
                tab.classList.add('active');
                document.getElementById(targetTab).classList.add('active');
                
                this.currentTab = targetTab;
                
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
                if (targetTab === 'leaderboard') {
                    console.log('üèÜ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
                    this.loadLeaderboard();
                }
            });
        });
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    initLeaderboardTabs() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π, —Ç–∞–∫ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã
        document.addEventListener('click', (e) => {
            if (e.target.closest('.leaderboard-tab')) {
                const button = e.target.closest('.leaderboard-tab');
                const type = button.dataset.type;
                
                console.log(`üèÜ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –Ω–∞ —Ç–∏–ø: ${type}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                document.querySelectorAll('.leaderboard-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                button.classList.add('active');
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                this.loadLeaderboardData(type);
            }
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
    async loadProfileData() {
        const userId = this.getTelegramId();
        
        if (!userId || userId === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
            console.error('User ID not found');
            return;
        }
        
        try {
            const response = await fetch(`/api/user/${userId}`);
            if (!response.ok) throw new Error('Failed to load user data');
            
            const userData = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            this.app.gameData = {
                ...this.app.gameData,
                ...userData,
                stars: userData.stars || this.app.gameData.stars,
                totalStarsEarned: userData.total_stars_earned || userData.stats?.totalStarsEarned,
                totalSpins: userData.stats?.totalSpins || 0,
                prizesWon: userData.stats?.prizesWon || 0,
                referrals: userData.stats?.referrals || 0
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            this.updateProfileStats(userData);
            
        } catch (error) {
            console.error('Error loading profile data:', error);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    updateProfileStats(userData) {
        const statsGrid = document.getElementById('profile-stats-grid');
        if (!statsGrid) return;
        
        statsGrid.innerHTML = `
            <div class="stats-card">
                <div class="stats-card-icon">‚≠ê</div>
                <div class="stats-card-value">${userData.stats?.stars || userData.stars || 0}</div>
                <div class="stats-card-label">–ó–≤–µ–∑–¥</div>
            </div>
            <div class="stats-card">
                <div class="stats-card-icon">üé∞</div>
                <div class="stats-card-value">${userData.stats?.totalSpins || 0}</div>
                <div class="stats-card-label">–ü—Ä–æ–∫—Ä—É—Ç–æ–∫</div>
            </div>
            <div class="stats-card">
                <div class="stats-card-icon">üéÅ</div>
                <div class="stats-card-value">${userData.stats?.prizesWon || 0}</div>
                <div class="stats-card-label">–ü—Ä–∏–∑–æ–≤</div>
            </div>
            <div class="stats-card">
                <div class="stats-card-icon">üë•</div>
                <div class="stats-card-value">${userData.stats?.referrals || 0}</div>
                <div class="stats-card-label">–†–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
            </div>
        `;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    async loadLeaderboard() {
        console.log('üèÜ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await this.loadLeaderboardData('global');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userId = this.getTelegramId();
        if (userId && userId !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
            await this.loadUserRank(userId);
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    async loadLeaderboardData(type = 'global') {
        console.log(`üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ç–∏–ø–∞: ${type}`);
        
        const contentContainer = document.getElementById('leaderboard-content');
        const userId = this.getTelegramId();
        
        if (!contentContainer) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø
        this.currentLeaderboardType = type;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        contentContainer.innerHTML = `
            <div class="loading">
                <i class="fas fa-spinner fa-spin"></i>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
            </div>
        `;

        try {
            let endpoint;
            let limitParam = '?limit=20';
            
            if (type === 'referrals' && userId && userId !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
                endpoint = `/api/referrals-leaderboard/${userId}${limitParam}`;
            } else {
                endpoint = `/api/leaderboard-referrals${limitParam}`;
            }
            
            console.log(`üîó –ó–∞–ø—Ä–æ—Å –∫: ${endpoint}`);
            
            const response = await fetch(endpoint);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            const leaderboard = data.leaderboard || [];
            
            console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: ${leaderboard.length}`);

            if (leaderboard.length === 0) {
                const emptyMessage = type === 'referrals' ? 
                    '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π' : 
                    '–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞';
                    
                contentContainer.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-users" style="font-size: 48px; margin-bottom: 15px; opacity: 0.3;"></i>
                        <p>${emptyMessage}</p>
                        ${type === 'referrals' ? '<p>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å!</p>' : '<p>–ë—É–¥—å –ø–µ—Ä–≤—ã–º!</p>'}
                    </div>
                `;
                return;
            }

            let leaderboardHTML = '<div class="leaderboard-list">';
            
            leaderboard.forEach((player, index) => {
                const position = index + 1;
                const medal = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : `${position}.`;
                const referralsCount = player.referrals_count || 0;
                const isCurrentUser = player.user_id?.toString() === userId?.toString();
                
                leaderboardHTML += `
                    <div class="leaderboard-item ${position <= 3 ? 'top-player' : ''} ${isCurrentUser ? 'user-item' : ''}">
                        <div class="player-rank">${medal}</div>
                        <div class="player-info">
                            <div class="player-name">
                                ${player.first_name || '–ò–≥—Ä–æ–∫'}
                                ${isCurrentUser ? '<span class="user-badge">–í—ã</span>' : ''}
                            </div>
                            <div class="player-stats">${referralsCount} üë• —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
                        </div>
                        <div class="player-score">${referralsCount}</div>
                    </div>
                `;
            });
            
            leaderboardHTML += '</div>';
            contentContainer.innerHTML = leaderboardHTML;
            
            console.log('‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
            contentContainer.innerHTML = `
                <div class="error-state">
                    <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 15px; color: #ff6b6b;"></i>
                    <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞</p>
                    <p style="font-size: 14px; opacity: 0.7;">${error.message}</p>
                    <button onclick="window.profileScreen.loadLeaderboardData('${type}')" class="retry-btn">
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            `;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async loadUserRank(userId) {
        try {
            console.log(`üë§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
            
            const response = await fetch(`/api/user-referral-rank/${userId}`);
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–Ω–≥–∞');
            
            const data = await response.json();
            const rankContainer = document.getElementById('current-user-rank');
            
            if (rankContainer && data.rank) {
                rankContainer.innerHTML = `
                    <div class="user-rank-card">
                        <div class="rank-info">
                            <div class="rank-position">–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: #${data.rank.position}</div>
                            <div class="rank-referrals">${data.rank.referrals_count || 0} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
                        </div>
                        <div class="rank-icon">
                            <i class="fas fa-medal"></i>
                        </div>
                    </div>
                `;
                console.log('‚úÖ –†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            const rankContainer = document.getElementById('current-user-rank');
            if (rankContainer) {
                rankContainer.innerHTML = `
                    <div class="user-rank-card">
                        <div class="rank-info">
                            <div class="rank-position">–ü–æ–∑–∏—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞</div>
                            <div class="rank-referrals">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</div>
                        </div>
                    </div>
                `;
            }
        }
    }

    renderReferralsSection() {
        const gameData = this.app.gameData;
        const referralsCount = gameData.referrals || 0;
        const starsFromReferrals = referralsCount * 100;
        
        return `
            <div class="referrals-stats">
                <!-- –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ -->
                <div class="referrals-overview">
                    <div class="referral-stat-card">
                        <div class="referral-stat-value">${referralsCount}</div>
                        <div class="referral-stat-label">üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π</div>
                    </div>
                    <div class="referral-stat-card">
                        <div class="referral-stat-value">${starsFromReferrals}</div>
                        <div class="referral-stat-label">‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –∑–≤–µ–∑–¥</div>
                    </div>
                </div>
                
                <!-- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ -->
                <div class="referral-link-container">
                    <label>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</label>
                    <div class="referral-link">
                        <input type="text" id="referral-link" value="https://t.me/kosmetichka_lottery_bot?start=ref_${this.getTelegramId()}" readonly>
                        <button onclick="window.profileScreen.copyReferralLink()" class="copy-btn">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                </div>
                
                <!-- –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ -->
                <div class="referral-actions">
                    <button id="share-referral" class="share-btn">
                        <i class="fas fa-share"></i>
                        –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π
                    </button>
                </div>
                
                <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö -->
                <div class="referral-info">
                    <div class="referral-description">
                        <h4>üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h4>
                        <ul>
                            <li>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ</li>
                            <li>–î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å 2 –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã</li>
                            <li>–í—ã –ø–æ–ª—É—á–∏—Ç–µ 20 –∑–≤–µ–∑–¥ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞</li>
                            <li>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 100 –∑–≤–µ–∑–¥ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ</li>
                        </ul>
                    </div>
                </div>
            </div>
        `;
    }

    copyReferralLink() {
        const linkInput = document.getElementById('referral-link');
        if (linkInput) {
            linkInput.select();
            linkInput.setSelectionRange(0, 99999);
            
            try {
                if (navigator.clipboard) {
                    navigator.clipboard.writeText(linkInput.value).then(() => {
                        this.showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! üìã', 'success');
                    });
                } else {
                    document.execCommand('copy');
                    this.showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! üìã', 'success');
                }
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                this.showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é', 'error');
            }
        }
    }

    shareReferralLink() {
        const userId = this.getTelegramId();
        const referralLink = `https://t.me/kosmetichka_lottery_bot?start=ref_${userId}`;
        const message = `üé∞ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Kosmetichka Lottery!\n\nüíé –ò–≥—Ä–∞–π –≤ —Ä—É–ª–µ—Ç–∫—É –∫—Ä–∞—Å–æ—Ç—ã\nüéÅ –í—ã–∏–≥—Ä—ã–≤–∞–π –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–∑—ã\nüë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã\n\n${referralLink}`;
        
        if (this.app.tg?.isVersionAtLeast?.('6.1')) {
            this.app.tg.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(message)}`);
        } else {
            this.copyReferralLink();
        }
    }

    showNotification(message, type = 'success') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingNotification = document.querySelector('.notification');
        if (existingNotification) {
            existingNotification.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(notification);
        
        // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (notification.parentNode) {
                notification.style.animation = 'slideOutNotification 0.3s ease-in';
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }
        }, 3000);
    }

    renderPrizesHistory() {
        const gameData = this.app.gameData;
        const allPrizes = gameData.prizes || [];

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (–∏—Å–∫–ª—é—á–∞–µ–º –∑–≤–µ–∑–¥—ã –∏ –ø—É—Å—Ç—ã–µ –ø—Ä–∏–∑—ã)
        const certificatePrizes = allPrizes.filter(prize => {
            const prizeType = prize.type || '';
            return prizeType.startsWith('golden-apple-') || prizeType === 'dolce-deals';
        });

        if (certificatePrizes.length === 0) {
            return `
                <div class="empty-history">
                    <i class="fas fa-gift"></i>
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∑–æ–≤</p>
                    <span>–ö—Ä—É—Ç–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!</span>
                </div>
            `;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–∑—ã –ø–æ –¥–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞) –∏ –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 10
        const sortedPrizes = [...certificatePrizes]
            .sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0))
            .slice(0, 10);

        return sortedPrizes.map(prize => `
            <div class="prize-history-item">
                <div class="prize-icon">${this.getPrizeIcon(prize)}</div>
                <div class="prize-info">
                    <div class="prize-name">${prize.name}</div>
                    <div class="prize-date">${this.formatDate(prize.timestamp || Date.now())}</div>
                </div>
                ${prize.value ? `<div class="prize-value">${prize.value}</div>` : ''}
            </div>
        `).join('');
    }

    getPrizeIcon(prize) {
        const prizeIcons = {
            'golden-apple-3000': 'üçé',
            'golden-apple-2000': 'üçé',
            'golden-apple-1500': 'üçé',
            'golden-apple-1000': 'üçé',
            'golden-apple-500': 'üçé',
            'dolce-deals': 'üöö',
            'stars': '‚≠ê',
            'empty': '‚ùå'
        };
        
        for (const [key, icon] of Object.entries(prizeIcons)) {
            if (prize.type?.includes(key)) {
                return icon;
            }
        }
        
        return 'üéÅ';
    }

    getUserDisplayName() {
        const telegramUser = this.app.tg?.initDataUnsafe?.user || 
                            window.Telegram?.WebApp?.initDataUnsafe?.user;
        
        if (telegramUser?.username) {
            return `@${telegramUser.username}`;
        } else if (telegramUser?.first_name) {
            return telegramUser.first_name;
        }
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }

    getTelegramId() {
        const telegramUser = this.app.tg?.initDataUnsafe?.user || 
                            window.Telegram?.WebApp?.initDataUnsafe?.user;
        
        return telegramUser?.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    formatDate(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit', 
            year: 'numeric'
        });
    }

    renderUserAvatar() {
        const user = this.app.tg?.initDataUnsafe?.user;
        
        if (user?.photo_url) {
            return `<img src="${user.photo_url}" alt="–ê–≤–∞—Ç–∞—Ä ${user.first_name}" 
                         style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;"
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                    <div class="avatar-fallback" style="display: none; width: 100%; height: 100%; 
                         display: flex; align-items: center; justify-content: center; 
                         font-size: 36px; font-weight: bold;">
                        ${user.first_name?.charAt(0).toUpperCase() || 'üë§'}
                    </div>`;
        } else if (user?.first_name) {
            return user.first_name.charAt(0).toUpperCase();
        }
        
        return 'üë§';
    }

    destroy() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è...');
        // –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        const tabs = document.querySelectorAll('.profile-tab');
        tabs.forEach(tab => {
            tab.replaceWith(tab.cloneNode(true));
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ onclick - –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
