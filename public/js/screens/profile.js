// public/js/screens/profile.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –£–ü–†–û–©–ï–ù–ù–´–ú –õ–ò–î–ï–†–ë–û–†–î–û–ú

export class ProfileScreen {
    constructor(app) {
        this.app = app;
        this.currentTab = 'profile-info';
        
        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        window.profileScreen = this;
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
        console.log('üë§ ProfileScreen –∑–∞–≥—Ä—É–∂–µ–Ω! –í–µ—Ä—Å–∏—è —Å —Ñ–∏–∫—Å–æ–º spins API –∏ fallback - v2.13');
    }

    // === –ü–û–õ–ù–´–ô –ú–ï–¢–û–î render() –î–õ–Ø profile.js ===

    render() {
        const gameData = this.app.gameData;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É
        const htmlContent = `
            <div id="profile-screen" class="screen">
                <div class="screen-header">
                    <h2>–ü—Ä–æ—Ñ–∏–ª—å</h2>
                </div>
                
                <!-- –í–∫–ª–∞–¥–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è -->
                <div class="profile-tabs">
                    <button class="profile-tab active" data-tab="profile-info">
                        <i class="fas fa-user"></i>
                        –ü—Ä–æ—Ñ–∏–ª—å
                    </button>
                    <button class="profile-tab" data-tab="leaderboard">
                        <i class="fas fa-trophy"></i>
                        –õ–∏–¥–µ—Ä–±–æ—Ä–¥
                    </button>
                </div>
                
                <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å" -->
                <div class="tab-content active" id="profile-info">
                    <div class="profile-header">
                        <div class="profile-avatar">
                            ${this.renderUserAvatar()}
                        </div>
                        <div class="profile-info">
                            <h3 class="profile-name">${this.getUserDisplayName()}</h3>
                            <div class="profile-nickname">${this.getUserNickname()}</div>
                            <div class="profile-telegram-id">ID: ${this.getTelegramId()}</div>
                        </div>
                    </div>

                    <div class="profile-content">
                        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                        <div class="section">
                            <div class="section-title">
                                <i class="fas fa-chart-bar"></i>
                                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            </div>
                            <div class="stats-grid" id="profile-stats-grid">
                                <div class="stats-card">
                                    <div class="stats-card-icon">‚≠ê</div>
                                    <div class="stats-card-value">${gameData.stars || 0}</div>
                                    <div class="stats-card-label">–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</div>
                                </div>
                                <div class="stats-card">
                                    <div class="stats-card-icon">üë•</div>
                                    <div class="stats-card-value">${gameData.referrals || 0}</div>
                                    <div class="stats-card-label">–†–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
                                </div>
                            </div>
                        </div>

                        <!-- –†–µ—Ñ–µ—Ä–∞–ª—ã -->
                        <div class="section">
                            <div class="section-title">
                                <i class="fas fa-users"></i>
                                –†–µ—Ñ–µ—Ä–∞–ª—ã
                            </div>
                            <div class="referrals-section" id="referrals-section">
                                ${this.renderReferralsSection()}
                            </div>
                        </div>

                        <!-- –ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã -->
                        <div class="section">
                            <div class="section-title">
                                <i class="fas fa-link"></i>
                                –ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã
                            </div>
                            <div class="resources-section">
                                <div class="resource-item" onclick="window.profileScreen.openChannel()">
                                    <div class="resource-icon">üì¢</div>
                                    <div class="resource-info">
                                        <div class="resource-name">–ù–∞—à –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞</div>
                                        <div class="resource-description">–ù–æ–≤–æ—Å—Ç–∏, —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</div>
                                    </div>
                                    <div class="resource-arrow">
                                        <i class="fas fa-external-link-alt"></i>
                                    </div>
                                </div>
                                <div class="resource-item" onclick="window.profileScreen.openSupport()">
                                    <div class="resource-icon">üéß</div>
                                    <div class="resource-info">
                                        <div class="resource-name">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</div>
                                        <div class="resource-description">–ü–æ–º–æ—â—å —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø—Ä–∏–∑–æ–≤</div>
                                    </div>
                                    <div class="resource-arrow">
                                        <i class="fas fa-external-link-alt"></i>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                
                <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ "–õ–∏–¥–µ—Ä–±–æ—Ä–¥" -->
                <div class="tab-content" id="leaderboard">
                   <div class="leaderboard-header">
                        <div class="leaderboard-avatar">
                            üèÜ
                        </div>
                        <div class="leaderboard-info">
                            <h3>–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤</h3>
                            <p>–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º</p>
                        </div>
                    </div>
                    
                    <!-- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –º–µ—Ç—Ä–∏–∫ -->
                    <div class="profile-tabs leaderboard-metrics">
                        <button class="profile-tab active" data-metric="referrals">
                            <i class="fas fa-users"></i>
                            –î—Ä—É–∑—å—è
                        </button>
                        <button class="profile-tab" data-metric="spins">
                            <i class="fas fa-sync-alt"></i>
                            –°–ø–∏–Ω—ã
                        </button>
                    </div>
                    
                    <div class="current-position" id="current-position">
                        <!-- –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                    
                    <div class="leaderboard-list" id="leaderboard-list">
                        <div class="loading-state">
                            <i class="fas fa-spinner fa-spin"></i>
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...</p>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ù–û–ü–ö–£ –û–¢–õ–ê–î–ö–ò –ü–û–°–õ–ï –†–ï–ù–î–ï–†–ê
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è HTML –≤ DOM
        setTimeout(() => {
            this.setupDebugControls();
        }, 100);
        
        return htmlContent;
    }

    // –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
    setupDebugControls() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        if (window.DEBUG_MODE) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            const existingButton = document.querySelector('.debug-refresh-btn');
            if (existingButton) {
                existingButton.remove();
            }
            
            const refreshButton = document.createElement('button');
            refreshButton.textContent = 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã';
            refreshButton.className = 'debug-refresh-btn';
            refreshButton.onclick = () => this.forceRefreshReferrals();
            refreshButton.style.cssText = `
                position: fixed;
                top: 10px;
                right: 10px;
                z-index: 1000;
                padding: 8px 12px;
                background: #ff6b9d;
                color: white;
                border: none;
                border-radius: 8px;
                font-size: 12px;
                cursor: pointer;
                box-shadow: 0 4px 12px rgba(255, 107, 157, 0.4);
                transition: all 0.3s ease;
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç
            refreshButton.onmouseover = () => {
                refreshButton.style.background = '#e55a8a';
                refreshButton.style.transform = 'translateY(-2px)';
                refreshButton.style.boxShadow = '0 6px 20px rgba(255, 107, 157, 0.6)';
            };
            
            refreshButton.onmouseout = () => {
                refreshButton.style.background = '#ff6b9d';
                refreshButton.style.transform = 'translateY(0)';
                refreshButton.style.boxShadow = '0 4px 12px rgba(255, 107, 157, 0.4)';
            };
            
            document.body.appendChild(refreshButton);
            console.log('üîß –ö–Ω–æ–ø–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        }
        
        // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ URL
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('debug') === 'true' || localStorage.getItem('debug_mode') === 'true') {
            window.DEBUG_MODE = true;
            console.log('üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω');
            
            // –ï—Å–ª–∏ DEBUG_MODE –Ω–µ –±—ã–ª –≤–∫–ª—é—á–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º setupDebugControls –µ—â–µ —Ä–∞–∑
            if (!document.querySelector('.debug-refresh-btn')) {
                this.setupDebugControls();
            }
        }
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
    enableDebugMode() {
        window.DEBUG_MODE = true;
        localStorage.setItem('debug_mode', 'true');
        this.setupDebugControls();
        console.log('üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω –≤—Ä—É—á–Ω—É—é');
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
    disableDebugMode() {
        window.DEBUG_MODE = false;
        localStorage.removeItem('debug_mode');
        const debugButton = document.querySelector('.debug-refresh-btn');
        if (debugButton) {
            debugButton.remove();
        }
        console.log('üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω');
    }

    init() {
        console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProfileScreen...');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupTabEventListeners();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        this.loadProfileData();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        setTimeout(() => {
            this.updateReferralLink();
        }, 100);
        
        console.log('‚úÖ ProfileScreen –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupTabEventListeners() {
        document.querySelectorAll('.profile-tab').forEach(tab => {
            tab.addEventListener('click', () => {
                const targetTab = tab.dataset.tab;
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                document.querySelectorAll('.profile-tab').forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.remove('active');
                });
                const targetElement = document.getElementById(targetTab);
                if (targetElement) {
                    targetElement.classList.add('active');
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–∏
                if (targetTab === 'leaderboard') {
                    this.setupLeaderboardControls();
                    this.loadLeaderboard('referrals'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—ã
                }
                
                this.currentTab = targetTab;
            });
        });
    }

    setupLeaderboardControls() {
        document.querySelectorAll('.leaderboard-metrics .profile-tab').forEach(control => {
            control.addEventListener('click', () => {
                const metric = control.dataset.metric;
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                document.querySelectorAll('.leaderboard-metrics .profile-tab').forEach(c => c.classList.remove('active'));
                control.classList.add('active');
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
                this.loadLeaderboard(metric);
            });
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–¥—Ä—É–≥"
    getFriendsWord(count) {
        const lastDigit = count % 10;
        const lastTwoDigits = count % 100;
        
        // –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è 11, 12, 13, 14
        if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
            return '–¥—Ä—É–∑–µ–π';
        }
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        if (lastDigit === 1) {
            return '–¥—Ä—É–≥';
        } else if (lastDigit >= 2 && lastDigit <= 4) {
            return '–¥—Ä—É–≥–∞';
        } else {
            return '–¥—Ä—É–∑–µ–π';
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥—Ä—É–∑–µ–π
    formatFriendsCount(count) {
        return `${count} ${this.getFriendsWord(count)}`;
    }

    // 1. –ó–ê–ú–ï–ù–ò–¢–ï –º–µ—Ç–æ–¥ loadProfileData() –Ω–∞ —ç—Ç–æ—Ç:
    async loadProfileData() {
        const userId = this.getTelegramId();
        
        if (!userId || userId === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        
        console.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        
        try {
            // –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            try {
                await fetch('/api/sync-referrals', { method: 'POST' });
                console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
            } catch (syncError) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', syncError);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const response = await fetch(`/api/user/${userId}`);
            if (!response.ok) throw new Error('Failed to load user data');
            
            const userData = await response.json();
            
            if (userData.error) {
                throw new Error(userData.error);
            }
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', userData);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º gameData —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            this.app.gameData = {
                ...this.app.gameData,
                stars: userData.stars || 0,
                referrals: userData.referrals || userData.stats?.referrals || 0, // –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                totalSpins: userData.total_spins || userData.stats?.totalSpins || 0,
                prizesWon: userData.prizes_won || userData.stats?.prizesWon || 0,
                totalStarsEarned: userData.total_stars_earned || userData.stats?.totalStarsEarned || 0,
                username: userData.username,
                firstName: userData.first_name,
                availableFriendSpins: userData.available_friend_spins || 0
            };
            
            console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ gameData:', {
                stars: this.app.gameData.stars,
                referrals: this.app.gameData.referrals,
                totalStarsEarned: this.app.gameData.totalStarsEarned
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            this.updateProfileStats(userData);
            this.updateReferralsSection();
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if (this.app.updateInterface) {
                this.app.updateInterface();
            }
            
            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', error);
        }
    }
    

    // 8. –ò–°–ü–†–ê–í–¨–¢–ï –º–µ—Ç–æ–¥ updateReferralsSection():
    updateReferralsSection() {
        const referralsContainer = document.getElementById('referrals-section');
        if (referralsContainer) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ gameData
            const referralsCount = this.app.gameData.referrals || 0;
            
            console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${referralsCount}`);
            
            referralsContainer.innerHTML = this.renderReferralsSection();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            this.updateReferralLink();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    // –ó–ê–ú–ï–ù–ò–¢–ï –º–µ—Ç–æ–¥ updateProfileStats() –≤ —Ñ–∞–π–ª–µ public/js/screens/profile.js

    updateProfileStats(userData) {
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏:', userData);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const currentStats = {
            stars: userData.stars,
            referrals: userData.referrals // –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î
        };
        
        console.log('üìä –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', currentStats);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.app.gameData.stars = currentStats.stars;
        this.app.gameData.referrals = currentStats.referrals;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ "–¥—Ä—É–≥"
        const friendsLabel = this.getFriendsWord(currentStats.referrals);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - –¢–û–õ–¨–ö–û 2 –ö–ê–†–¢–û–ß–ö–ò –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –û–ö–û–ù–ß–ê–ù–ò–Ø–ú–ò
        const statsGrid = document.getElementById('profile-stats-grid');
        if (statsGrid) {
            statsGrid.innerHTML = `
                <div class="stats-card">
                    <div class="stats-card-icon">‚≠ê</div>
                    <div class="stats-card-value">${currentStats.stars}</div>
                    <div class="stats-card-label">–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</div>
                </div>
                <div class="stats-card">
                    <div class="stats-card-icon">üë•</div>
                    <div class="stats-card-value">${currentStats.referrals}</div>
                    <div class="stats-card-label">${friendsLabel}</div>
                </div>
            `;
            
            console.log('‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å —Å –±–∞–ª–∞–Ω—Å–æ–º
        const balanceElement = document.querySelector('.app-header .user-balance');
        if (balanceElement) {
            balanceElement.textContent = `‚≠ê ${currentStats.stars}`;
        }
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    updateReferralLink() {
        const linkInput = document.getElementById('referral-link');
        if (linkInput) {
            const userId = this.getTelegramId();
            const correctLink = `https://t.me/kosmetichkalottery_bot?start=ref_${userId}`;
            linkInput.value = correctLink;
            console.log('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', correctLink);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUserProfileIfNeeded() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
            const tgUser = this.app.tg?.initDataUnsafe?.user;
            if (!tgUser) {
                console.log('‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                return;
            }
            
            const userId = tgUser.id;
            console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è ${userId}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
            const response = await fetch(`/api/user/${userId}`);
            if (!response.ok) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã');
                return;
            }
            
            const userData = await response.json();
            
            // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            const user_data = userData.user_data || userData;
            
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            const needsUpdate = (
                user_data.first_name !== tgUser.first_name ||
                user_data.username !== (tgUser.username || '') ||
                user_data.last_name !== (tgUser.last_name || '')
            );
            
            if (needsUpdate) {
                console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
                    old: {
                        first_name: user_data.first_name,
                        username: user_data.username,
                        last_name: user_data.last_name
                    },
                    new: {
                        first_name: tgUser.first_name,
                        username: tgUser.username || '',
                        last_name: tgUser.last_name || ''
                    }
                });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                const updateResponse = await fetch(`/api/user/${userId}/profile`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        first_name: tgUser.first_name || '',
                        username: tgUser.username || '',
                        last_name: tgUser.last_name || ''
                    })
                });
                
                if (updateResponse.ok) {
                    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
                } else {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
                }
            } else {
                console.log('‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç—É–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        }
    }


    // –ü–û–õ–ù–û–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
    async loadLeaderboard(metric = 'referrals') {
        console.log(`üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–µ: ${metric}`);
        
        try {
            // 1. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await this.updateUserProfileIfNeeded();
            
            // 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
            if (metric === 'referrals') {
                await fetch('/api/sync-referrals', { method: 'POST' });
            }
            
            // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
            await this.loadLeaderboardData(metric);
            
            // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userId = this.getTelegramId();
            if (userId && userId !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
                await this.loadUserPosition(userId, metric);
            }
            
            console.log(`‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ ${metric} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ ${metric}:`, error);
        }
    }

    // 3. –î–û–ë–ê–í–¨–¢–ï –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö API:
    async debugLeaderboardData() {
        try {
            console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...');
            
            const response = await fetch('/api/leaderboard-referrals?limit=5');
            const data = await response.json();
            
            console.log('üìä –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API:', data);
            
            if (data.leaderboard && data.leaderboard.length > 0) {
                data.leaderboard.forEach((user, index) => {
                    console.log(`üë§ –ò–≥—Ä–æ–∫ ${index + 1}:`, {
                        telegram_id: user.telegram_id,
                        first_name: user.first_name,
                        username: user.username,
                        referrals_count: user.referrals_count,
                        displayName: this.getPlayerDisplayName(user)
                    });
                });
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
        }
    }

    // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–µ
    async loadLeaderboardData(metric = 'referrals') {
        console.log(`üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–µ: ${metric}`);
        
        const leaderboardList = document.getElementById('leaderboard-list');
        if (!leaderboardList) {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç leaderboard-list –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        leaderboardList.innerHTML = `
            <div class="leaderboard-loading">
                <div class="loading-spinner"></div>
                <div>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞...</div>
            </div>
        `;
        
        try {
            let endpoint;
            let valueField;
            let labelText;
            let icon;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
            switch (metric) {
                case 'referrals':
                    endpoint = '/api/leaderboard-referrals?limit=15';
                    valueField = 'referrals_count';
                    labelText = (count) => this.formatFriendsCount(count);
                    icon = 'üë•';
                    break;
                case 'spins':
                    endpoint = '/api/leaderboard/spins?limit=15';
                    valueField = 'total_spins';
                    labelText = (count) => `${count} —Å–ø–∏–Ω–æ–≤`;
                    icon = 'üé∞';
                    break;
                default:
                    endpoint = '/api/leaderboard-referrals?limit=15';
                    valueField = 'referrals_count';
                    labelText = (count) => this.formatFriendsCount(count);
                    icon = 'üë•';
            }

            const response = await fetch(endpoint);
            const data = await response.json();
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            if (!data.leaderboard || data.leaderboard.length === 0) {
                console.log(`‚ö†Ô∏è –ü—É—Å—Ç–æ–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ ${metric}, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏–π
                const allUsersEndpoint = metric === 'spins' 
                    ? '/api/leaderboard/spins?limit=15&includeZeros=true'
                    : '/api/leaderboard-referrals?limit=15&includeZeros=true';
                
                try {
                    const allUsersResponse = await fetch(allUsersEndpoint);
                    const allUsersData = await allUsersResponse.json();
                    
                    console.log(`üìä Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${metric}:`, allUsersData);
                    
                    if (allUsersData.leaderboard && allUsersData.leaderboard.length > 0) {
                        data.leaderboard = allUsersData.leaderboard;
                    } else {
                        leaderboardList.innerHTML = `
                            <div class="leaderboard-empty">
                                <div class="empty-icon">${icon}</div>
                                <div class="empty-title">–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                                <div class="empty-subtitle">–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!</div>
                            </div>
                        `;
                        return;
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
                    leaderboardList.innerHTML = `
                        <div class="leaderboard-empty">
                            <div class="empty-icon">${icon}</div>
                            <div class="empty-title">–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                            <div class="empty-subtitle">–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!</div>
                        </div>
                    `;
                    return;
                }
            }
            
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –ª–∏–¥–µ—Ä–±–æ—Ä–¥ ${metric}: ${data.leaderboard.length} –∑–∞–ø–∏—Å–µ–π`);
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
            leaderboardList.innerHTML = data.leaderboard.map((user, index) => {
                const position = index + 1;
                const isTop3 = position <= 3;
                const value = user[valueField] || 0;
                const displayText = labelText(value);
                
                const userName = this.getPlayerDisplayName(user);
                
                return `
                    <div class="leaderboard-item ${isTop3 ? 'top-player' : ''}">
                        <div class="leaderboard-rank">
                            <span class="position-rank">${position}</span>
                        </div>
                        <div class="leaderboard-info">
                            <div class="leaderboard-name">${userName}</div>
                            <div class="leaderboard-stats">${displayText}</div>
                        </div>
                        <div class="leaderboard-score">
                            ${icon} ${value}
                        </div>
                    </div>
                `;
            }).join('');
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ ${metric}:`, error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
            const mockUsers = [
                { telegram_id: '123456789', first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', username: 'user1', referrals_count: 0, total_spins: 0 },
                { telegram_id: '987654321', first_name: '–ò–≥—Ä–æ–∫', username: 'player2', referrals_count: 0, total_spins: 0 },
                { telegram_id: '456789123', first_name: '–£—á–∞—Å—Ç–Ω–∏–∫', username: 'member3', referrals_count: 0, total_spins: 0 }
            ];
            
            const valueField = metric === 'spins' ? 'total_spins' : 'referrals_count';
            const labelText = metric === 'spins' ? (count) => `${count} —Å–ø–∏–Ω–æ–≤` : (count) => this.formatFriendsCount(count);
            const iconEmoji = metric === 'spins' ? 'üé∞' : 'üë•';
            
            leaderboardList.innerHTML = mockUsers.map((user, index) => {
                const position = index + 1;
                const value = user[valueField] || 0;
                const displayText = labelText(value);
                const userName = this.getPlayerDisplayName(user);
                
                return `
                    <div class="leaderboard-item">
                        <div class="leaderboard-rank">
                            <span class="position-rank">${position}</span>
                        </div>
                        <div class="leaderboard-info">
                            <div class="leaderboard-name">${userName}</div>
                            <div class="leaderboard-stats">${displayText}</div>
                        </div>
                        <div class="leaderboard-score">
                            ${iconEmoji} ${value}
                        </div>
                    </div>
                `;
            }).join('');
        }
    }

    // –£–ü–†–û–©–ï–ù–ù–´–ô –ú–ï–¢–û–î: –†–µ–Ω–¥–µ—Ä –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ (—Ç–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ã)
    renderLeaderboard(data) {
        const leaderboardList = document.getElementById('leaderboard-list');
        if (!leaderboardList) return;
        
        console.log('üé® –†–µ–Ω–¥–µ—Ä –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:', data);
        
        if (!data || !Array.isArray(data) || data.length === 0) {
            leaderboardList.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üèÜ</div>
                    <div class="empty-text">–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç</div>
                    <div class="empty-subtitle">–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!</div>
                </div>
            `;
            return;
        }
        
        const leaderboardHTML = data.map((player, index) => {
            const position = index + 1;
            const emoji = this.getPositionEmoji(position);
            const displayName = this.getPlayerDisplayName(player);
            const referralsCount = player.referrals_count || 0;
            
            return `
                <div class="leaderboard-item ${this.isCurrentUser(player) ? 'current-user' : ''}">
                    <div class="player-rank ${position <= 3 ? 'top-rank' : ''}">${emoji}</div>
                    <div class="player-info">
                        <div class="player-name">${displayName}</div>
                        <div class="player-id">ID: ${player.telegram_id}</div>
                    </div>
                    <div class="player-score">üë• ${referralsCount}</div>
                </div>
            `;
        }).join('');
        
        leaderboardList.innerHTML = leaderboardHTML;
    }

    // 6. –î–û–ë–ê–í–¨–¢–ï –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:
    async forceRefreshReferrals() {
        try {
            console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...');
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—ã
            const syncResponse = await fetch('/api/sync-referrals', { method: 'POST' });
            const syncData = await syncResponse.json();
            
            console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', syncData);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            await this.loadProfileData();
            
            // –ï—Å–ª–∏ –º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ç–æ–∂–µ
            if (this.currentTab === 'leaderboard') {
                const activeMetric = document.querySelector('.leaderboard-metrics .profile-tab.active')?.dataset.metric || 'referrals';
                await this.loadLeaderboard(activeMetric);
            }
            
            console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        }
    }

    // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –º–µ—Ç—Ä–∏–∫–µ
    async loadUserPosition(userId, metric = 'referrals') {
        console.log(`üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø–æ –º–µ—Ç—Ä–∏–∫–µ ${metric}...`);
        
        const currentPosition = document.getElementById('current-position');
        if (!currentPosition) {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç current-position –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        try {
            let endpoint;
            let labelText;
            let icon;
            let emptyText;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
            switch (metric) {
                case 'referrals':
                    endpoint = `/api/leaderboard/referrals/position/${userId}`;
                    labelText = (score) => this.formatFriendsCount(score);
                    icon = 'üë•';
                    emptyText = '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π!';
                    break;
                case 'stars':
                    endpoint = `/api/leaderboard/stars/position/${userId}`;
                    labelText = (score) => `${score} –∑–≤–µ–∑–¥`;
                    icon = '‚≠ê';
                    emptyText = '–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã!';
                    break;
                case 'spins':
                    endpoint = `/api/leaderboard/spins/position/${userId}`;
                    labelText = (score) => `${score} —Å–ø–∏–Ω–æ–≤`;
                    icon = 'üé∞';
                    emptyText = '–ö—Ä—É—Ç–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É!';
                    break;
                case 'prizes':
                    endpoint = `/api/leaderboard/prizes/position/${userId}`;
                    labelText = (score) => `${score} –ø—Ä–∏–∑–æ–≤`;
                    icon = 'üèÜ';
                    emptyText = '–í—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã!';
                    break;
                default:
                    endpoint = `/api/leaderboard/referrals/position/${userId}`;
                    labelText = (score) => this.formatFriendsCount(score);
                    icon = 'üë•';
                    emptyText = '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π!';
            }

            const response = await fetch(endpoint);
            const data = await response.json();
            
            console.log(`üìä –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ${metric}:`, data);
            
            if (data.position && data.score > 0) {
                const scoreText = labelText(data.score);
                
                currentPosition.innerHTML = `
                    <div class="user-position-card">
                        <div class="user-position-content">
                            <div class="user-position-rank">
                                <span class="position-number">#${data.position}</span>
                            </div>
                            <div class="user-position-info">
                                <div class="user-position-title">–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è</div>
                                <div class="user-position-score">${icon} ${scoreText}</div>
                            </div>
                        </div>
                    </div>
                `;
                currentPosition.style.display = 'block';
            } else {
                currentPosition.innerHTML = `
                    <div class="user-position-card">
                        <div class="user-position-content">
                            <div class="user-position-info">
                                <div class="user-position-title">–ù–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</div>
                                <div class="user-position-score">${emptyText}</div>
                            </div>
                        </div>
                    </div>
                `;
                currentPosition.style.display = 'block';
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ${metric}:`, error);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            currentPosition.innerHTML = `
                <div class="user-position-card">
                    <div class="user-position-content">
                        <div class="user-position-info">
                            <div class="user-position-title">–ù–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</div>
                            <div class="user-position-score">${emptyText}</div>
                        </div>
                    </div>
                </div>
            `;
            currentPosition.style.display = 'block';
        }
    }

    // –†–µ–Ω–¥–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    renderUserPosition(data) {
        const currentPositionEl = document.getElementById('current-position');
        if (!currentPositionEl) return;
        
        if (data && data.position) {
            const { position, score } = data;
            const emoji = this.getPositionEmoji(position);
            
            currentPositionEl.innerHTML = `
                <div class="user-position-card">
                    <div class="position-info">
                        <div class="position-rank">${emoji}</div>
                        <div class="position-text">
                            <div class="position-number">${position > 100 ? '100+' : `#${position}`}</div>
                            <div class="position-details">—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${score}</div>
                        </div>
                    </div>
                </div>
            `;
        } else {
            currentPositionEl.innerHTML = `
                <div class="user-position-card">
                    <div class="position-info">
                        <div class="position-rank">‚Äî</div>
                        <div class="position-text">
                            <div class="position-number">–ù–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</div>
                            <div class="position-details">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π!</div>
                        </div>
                    </div>
                </div>
            `;
        }
    }

    // –ó–ê–ú–ï–ù–ò–¢–ï –º–µ—Ç–æ–¥ renderReferralsSection() –ø–æ–ª–Ω–æ—Å—Ç—å—é:
    renderReferralsSection() {
        const gameData = this.app.gameData;
        const referralsCount = gameData.referrals || 0;
        const starsFromReferrals = referralsCount * 10;
        const friendsText = this.formatFriendsCount(referralsCount);
        
        return `
            <div class="referrals-stats">
                <!-- –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ -->
                <div class="referrals-overview">
                    <div class="referral-stat-card">
                        <div class="referral-stat-value">${referralsCount}</div>
                        <div class="referral-stat-label">–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ ${this.getFriendsWord(referralsCount)}</div>
                    </div>
                    <div class="referral-stat-card">
                        <div class="referral-stat-value">${starsFromReferrals}</div>
                        <div class="referral-stat-label">‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –∑–≤–µ–∑–¥</div>
                    </div>
                </div>
                
                <!-- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ -->
                <div class="referral-link-container">
                    <label>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</label>
                    <div class="referral-link" style="display: flex; gap: 8px; align-items: center; background: rgba(255, 255, 255, 0.1); border-radius: 15px; padding: 8px; margin-top: 10px; overflow: hidden;">
                        <input type="text" id="referral-link" value="https://t.me/kosmetichkalottery_bot?start=ref_${this.getTelegramId()}" readonly style="flex: 1; background: transparent; border: none; color: var(--text-primary); font-size: 12px; padding: 5px; min-width: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                        <button onclick="window.profileScreen.copyReferralLink()" class="copy-btn" style="background: linear-gradient(135deg, #FF6B9D, #C44569); border: none; color: white; padding: 6px 10px; border-radius: 8px; cursor: pointer; flex-shrink: 0; display: flex; align-items: center; justify-content: center; min-width: 32px;">
                            <i class="fas fa-copy" style="font-size: 12px;"></i>
                        </button>
                    </div>
                </div>
                
                <div class="referral-info">
                    <p style="font-size: 14px; color: var(--text-secondary); margin: 15px 0 0 0; text-align: center;">
                        üéÅ –ü–æ–ª—É—á–∞–π—Ç–µ 10 –∑–≤–µ–∑–¥ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!
                    </p>
                </div>
            </div>
        `;
    }

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    copyReferralLink() {
        const linkInput = document.getElementById('referral-link');
        if (linkInput) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–º–µ–Ω—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            const userId = this.getTelegramId();
            const correctLink = `https://t.me/kosmetichkalottery_bot?start=ref_${userId}`;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            linkInput.value = correctLink;
            
            // –ö–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            linkInput.select();
            linkInput.setSelectionRange(0, 99999); // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            
            try {
                if (navigator.clipboard) {
                    navigator.clipboard.writeText(correctLink).then(() => {
                        this.showBasicNotification('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
                        console.log('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞:', correctLink);
                    }).catch(() => {
                        document.execCommand('copy');
                        this.showBasicNotification('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
                        console.log('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ (fallback):', correctLink);
                    });
                } else {
                    document.execCommand('copy');
                    this.showBasicNotification('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
                    console.log('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ (execCommand):', correctLink);
                }
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                this.showBasicNotification('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
            }
        }
    }

    // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    showBasicNotification(message) {
        if (this.app && this.app.showNotification) {
            this.app.showNotification(message, 'success');
        } else {
            alert(message);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getTelegramId() {
        const telegramUser = this.app.tg?.initDataUnsafe?.user || 
                            window.Telegram?.WebApp?.initDataUnsafe?.user;
        
        return telegramUser?.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    getUserDisplayName() {
        const telegramUser = this.app.tg?.initDataUnsafe?.user || 
                            window.Telegram?.WebApp?.initDataUnsafe?.user;
        
        if (!telegramUser) return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        const firstName = telegramUser.first_name || '';
        const lastName = telegramUser.last_name || '';
        
        return `${firstName} ${lastName}`.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }

    getUserNickname() {
        const telegramUser = this.app.tg?.initDataUnsafe?.user || 
                            window.Telegram?.WebApp?.initDataUnsafe?.user;
        
        if (!telegramUser?.username) return '';
        
        return `@${telegramUser.username}`;
    }

    getPlayerDisplayName(player) {
        console.log('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞:', player);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏
        if (player.first_name && player.first_name.trim()) {
            console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º first_name:', player.first_name);
            return player.first_name.trim();
        } 
        
        if (player.username && player.username.trim()) {
            console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º username:', player.username);
            return `@${player.username.trim()}`;
        }
        
        if (player.telegram_id) {
            const shortId = player.telegram_id.toString().slice(-4);
            console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID:', shortId);
            return `ID: ${shortId}`;
        }
        
        console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –¥–ª—è –∏–≥—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É');
        return '–ê–Ω–æ–Ω–∏–º';
    }

    getPositionEmoji(position) {
        switch (position) {
            case 1: return 'ü•á';
            case 2: return 'ü•à';
            case 3: return 'ü•â';
            default: return `#${position}`;
        }
    }

    isCurrentUser(player) {
        const currentUserId = this.getTelegramId();
        return currentUserId && currentUserId.toString() === player.telegram_id.toString();
    }

    renderUserAvatar() {
        const user = this.app.tg?.initDataUnsafe?.user || 
                     window.Telegram?.WebApp?.initDataUnsafe?.user;
        
        if (user?.photo_url) {
            return `<img src="${user.photo_url}" alt="–ê–≤–∞—Ç–∞—Ä" class="profile-avatar-img" 
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                    <div class="profile-avatar-fallback" style="display: none;">
                        ${user.first_name?.charAt(0).toUpperCase() || 'üë§'}
                    </div>`;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∏–º–µ–Ω–∏ –∏–ª–∏ –∏–∫–æ–Ω–∫—É
        return `<div class="profile-avatar-fallback">
                    ${user?.first_name?.charAt(0).toUpperCase() || 'üë§'}
                </div>`;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    openChannel() {
        console.log('üì¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞');
        
        if (this.app.tg?.openTelegramLink) {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞
            this.app.tg.openTelegramLink('https://t.me/kosmetichka_channel');
            this.app.showStatusMessage('–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞...', 'info');
        } else if (window.open) {
            // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            window.open('https://t.me/kosmetichka_channel', '_blank');
        } else {
            this.app.showStatusMessage('–ö–∞–Ω–∞–ª: @kosmetichka_channel', 'info');
        }
    }

    openSupport() {
        console.log('üéß –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
        
        if (this.app.tg?.openTelegramLink) {
            this.app.tg.openTelegramLink('https://t.me/kosmetichkasupport');
            this.app.showStatusMessage('–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É...', 'info');
        } else if (window.open) {
            // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            window.open('https://t.me/kosmetichkasupport', '_blank');
        } else {
            this.app.showStatusMessage('–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @kosmetichkasupport', 'info');
        }
    }

    destroy() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è...');
        // –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        const tabs = document.querySelectorAll('.profile-tab');
        tabs.forEach(tab => {
            tab.replaceWith(tab.cloneNode(true));
        });
    }

    // –î–û–ë–ê–í–ò–¢–¨ —ç—Ç–∏ –º–µ—Ç–æ–¥—ã:

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
    getPlayerDisplayName(player) {
        if (player.first_name) {
            return player.first_name;
        } else if (player.username) {
            return `@${player.username}`;
        } else {
            return `ID: ${player.telegram_id.toString().slice(-4)}`;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
    getPositionEmoji(position) {
        switch (position) {
            case 1: return 'ü•á';
            case 2: return 'ü•à';
            case 3: return 'ü•â';
            default: return `#${position}`;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    isCurrentUser(player) {
        const currentUserId = this.getTelegramId();
        return currentUserId && currentUserId.toString() === player.telegram_id.toString();
    }

}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ onclick - –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
