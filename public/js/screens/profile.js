// public/js/screens/profile.js - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ê–ù–ò–ú–ê–¶–ò–Ø–ú–ò

export class ProfileScreen {
    constructor(app) {
        this.app = app;
        this.currentTab = 'profile';
        this.animationTimeout = null;
    }

    render() {
        const gameData = this.app.gameData;
        
        return `
            <div id="profile-screen" class="screen">
                <!-- –í–∫–ª–∞–¥–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è -->
                <div class="profile-tabs">
                    <button class="profile-tab active" data-tab="profile">
                        <i class="fas fa-user"></i>
                        –ü—Ä–æ—Ñ–∏–ª—å
                    </button>
                    <button class="profile-tab" data-tab="leaderboard">
                        <i class="fas fa-trophy"></i>
                        –õ–∏–¥–µ—Ä–±–æ—Ä–¥
                    </button>
                </div>

                <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å" -->
                <div id="profile-tab-content" class="tab-content active">
                    <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ -->
                    <div class="section user-info-section">
                        <h3 class="section-title">
                            <i class="fas fa-sparkles"></i>
                            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        </h3>
                        <div class="user-info-card">
                            <div class="user-avatar" id="user-avatar">
                                ${this.app.tg?.initDataUnsafe?.user?.first_name?.charAt(0) || 'üë§'}
                            </div>
                            <div class="user-details">
                                <div class="user-item" data-animate="slideIn">
                                    <span class="user-label">
                                        <i class="fas fa-id-card"></i>
                                        ID:
                                    </span>
                                    <span class="user-value">${this.app.tg?.initDataUnsafe?.user?.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
                                </div>
                                <div class="user-item" data-animate="slideIn">
                                    <span class="user-label">
                                        <i class="fas fa-at"></i>
                                        –ù–∏–∫:
                                    </span>
                                    <span class="user-value">@${this.app.tg?.initDataUnsafe?.user?.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</span>
                                </div>
                                <div class="user-item" data-animate="slideIn">
                                    <span class="user-label">
                                        <i class="fas fa-user-circle"></i>
                                        –ò–º—è:
                                    </span>
                                    <span class="user-value">${this.app.tg?.initDataUnsafe?.user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</span>
                                </div>
                                <div class="user-item stars-item" data-animate="slideIn">
                                    <span class="user-label">
                                        <i class="fas fa-star"></i>
                                        –ó–≤–µ–∑–¥—ã:
                                    </span>
                                    <span class="user-value stars" id="stars-count">${gameData.stars} ‚≠ê</span>
                                </div>
                                <div class="user-item" data-animate="slideIn">
                                    <span class="user-label">
                                        <i class="fas fa-sync-alt"></i>
                                        –ü—Ä–æ–∫—Ä—É—Ç–∫–∏:
                                    </span>
                                    <span class="user-value" id="spins-count">${gameData.totalSpins || 0}</span>
                                </div>
                                <div class="user-item" data-animate="slideIn">
                                    <span class="user-label">
                                        <i class="fas fa-gift"></i>
                                        –ü—Ä–∏–∑—ã:
                                    </span>
                                    <span class="user-value" id="prizes-count">${gameData.prizes?.length || gameData.prizesWon || 0}</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- –†–µ—Ñ–µ—Ä–∞–ª—ã -->
                    <div class="section referral-section">
                        <h3 class="section-title">
                            <i class="fas fa-users"></i>
                            –†–µ—Ñ–µ—Ä–∞–ª—ã
                        </h3>
                        <div class="referral-simple">
                            <div class="referral-stats">
                                <div class="referral-stat-item" data-animate="countUp" data-value="${gameData.referrals || 0}">
                                    <div class="stat-number" id="referrals-count">0</div>
                                    <div class="stat-desc">–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π</div>
                                </div>
                                <div class="referral-stat-item" data-animate="countUp" data-value="${(gameData.referrals || 0) * 50}">
                                    <div class="stat-number" id="referral-earnings">0</div>
                                    <div class="stat-desc">‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
                                </div>
                            </div>
                            
                            <div class="referral-action">
                                <button id="share-referral" class="share-btn">
                                    <i class="fas fa-share"></i>
                                    –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞
                                </button>
                                <p class="referral-bonus">+50 ‚≠ê –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞</p>
                            </div>
                        </div>
                    </div>

                    <!-- –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∑–æ–≤ -->
                    <div class="section prize-section">
                        <h3 class="section-title">
                            <i class="fas fa-trophy"></i>
                            –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∑–æ–≤
                        </h3>
                        <div class="prize-history" id="prize-history">
                            ${this.renderPrizeHistory()}
                        </div>
                    </div>

                    <!-- –û—Ç—Å—Ç—É–ø –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ -->
                    <div style="height: 60px;"></div>
                </div>

                <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ "–õ–∏–¥–µ—Ä–±–æ—Ä–¥" -->
                <div id="leaderboard-tab-content" class="tab-content">
                    <div class="section leaderboard-section">
                        <h3 class="section-title">
                            <i class="fas fa-crown"></i>
                            –¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
                        </h3>
                        <div class="leaderboard-description">
                            <p>üåü –õ–∏–¥–µ—Ä—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π –ø–æ–ª—É—á–∞—é—Ç –æ—Å–æ–±—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!</p>
                        </div>
                        <div class="leaderboard-content" id="leaderboard-content">
                            ${this.renderReferralLeaderboard()}
                        </div>
                    </div>

                    <!-- –û—Ç—Å—Ç—É–ø –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ -->
                    <div style="height: 60px;"></div>
                </div>
            </div>
        `;
    }

    init() {
        console.log('üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è...');
        this.setupEventListeners();
        this.startAnimations();
        console.log('‚úÖ –≠–∫—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        const profileTabs = document.querySelectorAll('.profile-tab');
        profileTabs.forEach(tab => {
            tab.addEventListener('click', (e) => {
                const tabName = e.target.closest('.profile-tab').dataset.tab;
                this.switchTab(tabName);
            });
        });

        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞" —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        const shareBtn = document.getElementById('share-referral');
        if (shareBtn) {
            shareBtn.addEventListener('click', (e) => {
                this.animateButtonClick(e.target);
                this.shareReferralLink();
            });
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∞–≤–∞—Ç–∞—Ä
        const userAvatar = document.getElementById('user-avatar');
        if (userAvatar) {
            userAvatar.addEventListener('click', () => {
                this.animateAvatar();
            });
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–≤–µ–∑–¥ –ø—Ä–∏ –∫–ª–∏–∫–µ
        const starsCount = document.getElementById('stars-count');
        if (starsCount) {
            starsCount.addEventListener('click', () => {
                this.animateStars();
            });
        }
    }

    switchTab(tabName) {
        console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabName}`);
        
        this.currentTab = tabName;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        document.querySelectorAll('.profile-tab').forEach(tab => {
            tab.classList.toggle('active', tab.dataset.tab === tabName);
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        setTimeout(() => {
            const targetContent = document.getElementById(`${tabName}-tab-content`);
            if (targetContent) {
                targetContent.classList.add('active');
                this.startAnimations(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
            }
        }, 150);
    }

    startAnimations() {
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const elementsToAnimate = document.querySelectorAll('[data-animate]');
        elementsToAnimate.forEach((element, index) => {
            element.style.opacity = '0';
            element.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                element.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
                element.style.opacity = '1';
                element.style.transform = 'translateY(0)';
                
                // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
                if (element.dataset.animate === 'countUp') {
                    this.animateCountUp(element);
                }
            }, index * 100);
        });

        // –ê–Ω–∏–º–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        const leaderboardItems = document.querySelectorAll('.leaderboard-item');
        leaderboardItems.forEach((item, index) => {
            item.style.opacity = '0';
            item.style.transform = 'translateX(-20px)';
            
            setTimeout(() => {
                item.style.transition = 'all 0.5s cubic-bezier(0.4, 0, 0.2, 1)';
                item.style.opacity = '1';
                item.style.transform = 'translateX(0)';
            }, index * 80);
        });

        // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏–∑–æ–≤
        const prizeItems = document.querySelectorAll('.prize-history-item');
        prizeItems.forEach((item, index) => {
            item.style.opacity = '0';
            item.style.transform = 'translateX(20px)';
            
            setTimeout(() => {
                item.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
                item.style.opacity = '1';
                item.style.transform = 'translateX(0)';
            }, index * 60);
        });
    }

    animateCountUp(element) {
        const target = parseInt(element.dataset.value) || 0;
        const numberElement = element.querySelector('.stat-number');
        if (!numberElement) return;

        let current = 0;
        const increment = target / 30; // 30 –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
        const timer = setInterval(() => {
            current += increment;
            if (current >= target) {
                current = target;
                clearInterval(timer);
            }
            numberElement.textContent = Math.floor(current);
        }, 50);
    }

    animateButtonClick(button) {
        button.style.transform = 'scale(0.95)';
        setTimeout(() => {
            button.style.transform = '';
        }, 150);
    }

    animateAvatar() {
        const avatar = document.getElementById('user-avatar');
        if (!avatar) return;

        avatar.style.transform = 'scale(1.1) rotate(5deg)';
        setTimeout(() => {
            avatar.style.transform = '';
        }, 300);
    }

    animateStars() {
        const starsElement = document.getElementById('stars-count');
        if (!starsElement) return;

        // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–≤–µ–∑–¥–æ—á–µ–∫
        for (let i = 0; i < 5; i++) {
            const star = document.createElement('div');
            star.textContent = '‚≠ê';
            star.style.position = 'absolute';
            star.style.pointerEvents = 'none';
            star.style.fontSize = '16px';
            star.style.left = Math.random() * 100 + '%';
            star.style.top = Math.random() * 100 + '%';
            star.style.opacity = '0';
            star.style.transform = 'scale(0)';
            star.style.transition = 'all 1s ease-out';
            star.style.zIndex = '1000';
            
            starsElement.appendChild(star);
            
            setTimeout(() => {
                star.style.opacity = '1';
                star.style.transform = 'scale(1) translateY(-20px)';
            }, i * 100);
            
            setTimeout(() => {
                star.style.opacity = '0';
                star.style.transform = 'scale(0) translateY(-40px)';
                setTimeout(() => star.remove(), 500);
            }, 1000 + i * 100);
        }
    }

    renderPrizeHistory() {
        const prizes = this.app.gameData.recentWins || this.app.gameData.prizes || [];
        
        if (prizes.length === 0) {
            return `
                <div class="empty-history">
                    <i class="fas fa-gift"></i>
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π</p>
                    <span>–ö—Ä—É—Ç–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã!</span>
                </div>
            `;
        }

        return prizes.slice(0, 10).map((prize, index) => {
            const prizeIcon = this.getPrizeIcon(prize.type || prize.name);
            const prizeValue = prize.value ? `+${prize.value} ‚≠ê` : '';
            const date = prize.timestamp ? this.formatDate(prize.timestamp) : '–ù–µ–¥–∞–≤–Ω–æ';
            
            return `
                <div class="prize-history-item" data-index="${index}">
                    <div class="prize-icon">${prizeIcon}</div>
                    <div class="prize-info">
                        <div class="prize-name">${prize.name || prize.type}</div>
                        <div class="prize-date">${date}</div>
                    </div>
                    <div class="prize-value">${prizeValue}</div>
                </div>
            `;
        }).join('');
    }

    renderReferralLeaderboard() {
        const mockLeaderboard = [
            { name: '–ö—Ä–∏—Å—Ç–∏–Ω–∞ –í.', referrals: 47, avatar: 'üë©', position: 1 },
            { name: '–ê–Ω–Ω–∞ –ö.', referrals: 34, avatar: 'üë±‚Äç‚ôÄÔ∏è', position: 2 },
            { name: '–ú–∞—Ä–∏—è –î.', referrals: 28, avatar: 'üë©‚Äçü¶∞', position: 3 },
            { name: '–ï–ª–µ–Ω–∞ –°.', referrals: 22, avatar: 'üßë‚Äçü¶±', position: 4 },
            { name: '–°–æ—Ñ—å—è –ú.', referrals: 19, avatar: 'üë©‚Äçü¶≥', position: 5 },
            { name: '–î–∞—Ä—å—è –õ.', referrals: 15, avatar: 'üë©‚Äçü¶≤', position: 6 },
            { name: '–í–∞–ª–µ—Ä–∏—è –ö.', referrals: 12, avatar: 'üë∏', position: 7 },
            { name: '–ê–ª–∏—Å–∞ –ü.', referrals: 9, avatar: 'üë©‚Äçüíº', position: 8 },
            { name: '–í—ã', referrals: this.app.gameData.referrals || 0, avatar: 'üë§', isUser: true, position: this.calculateUserPosition() }
        ];

        const sortedLeaderboard = mockLeaderboard.sort((a, b) => b.referrals - a.referrals);
        
        sortedLeaderboard.forEach((user, index) => {
            user.position = index + 1;
        });

        return sortedLeaderboard.map((user, index) => {
            const medal = this.getMedalForPosition(user.position);
            const pulseClass = user.position <= 3 ? 'pulse-animation' : '';
            
            return `
                <div class="leaderboard-item ${user.isUser ? 'user-item' : ''} ${pulseClass}" data-position="${user.position}">
                    <div class="leader-rank">
                        ${medal || user.position}
                    </div>
                    <div class="leader-avatar">${user.avatar}</div>
                    <div class="leader-info">
                        <div class="leader-name">${user.name}</div>
                        <div class="leader-stats">
                            <span class="referral-count">
                                <i class="fas fa-users"></i>
                                ${user.referrals} –¥—Ä—É–∑–µ–π
                            </span>
                            <span class="referral-earnings">
                                <i class="fas fa-star"></i>
                                ${user.referrals * 50} –∑–≤–µ–∑–¥
                            </span>
                        </div>
                    </div>
                    ${user.isUser ? '<div class="user-badge">–í–´</div>' : ''}
                </div>
            `;
        }).join('');
    }

    getMedalForPosition(position) {
        const medals = {
            1: 'ü•á',
            2: 'ü•à', 
            3: 'ü•â'
        };
        return medals[position] || null;
    }

    calculateUserPosition() {
        const userReferrals = this.app.gameData.referrals || 0;
        if (userReferrals >= 30) return Math.floor(Math.random() * 3) + 1;
        if (userReferrals >= 15) return Math.floor(Math.random() * 5) + 4;
        if (userReferrals >= 5) return Math.floor(Math.random() * 10) + 9;
        return Math.floor(Math.random() * 20) + 19;
    }

    shareReferralLink() {
        const userId = this.app.tg?.initDataUnsafe?.user?.id || 'user';
        const botUsername = 'kosmetichka_lottery_bot';
        const referralLink = `https://t.me/${botUsername}?start=${userId}`;
        
        const shareText = `üéÅ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Kosmetichka Lottery!\n\nüíÑ –í—ã–∏–≥—Ä—ã–≤–∞–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ!\nüõçÔ∏è –ü–æ–ª—É—á–∞–π –ø–æ–¥–∞—Ä–∫–∏ –æ—Ç Dolce Deals!\n‚≠ê +50 –∑–≤–µ–∑–¥ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n${referralLink}`;
        
        if (this.app.tg) {
            this.app.tg.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(shareText)}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            this.app.showStatusMessage('üöÄ –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', 'success');
        } else {
            navigator.clipboard.writeText(referralLink).then(() => {
                this.app.showStatusMessage('üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
            }).catch(() => {
                this.app.showStatusMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', 'error');
            });
        }
    }

    getPrizeIcon(prizeType) {
        const icons = {
            'stars': '‚≠ê',
            'certificate': 'üéÅ',
            'golden_apple': 'üçé',
            'dolce_deals': 'üõçÔ∏è',
            'beauty_set': 'üíÑ',
            'jewelry': 'üíé',
            'cosmetics': 'üíã',
            'perfume': 'üå∏',
            'skincare': '‚ú®',
            'makeup': 'üé®',
            'empty': 'üåü'
        };
        
        return icons[prizeType] || 'üéÅ';
    }

    formatDate(timestamp) {
        const date = new Date(timestamp);
        const now = new Date();
        const diffTime = Math.abs(now - date);
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        
        if (diffDays === 1) {
            return '–í—á–µ—Ä–∞';
        } else if (diffDays < 7) {
            return `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
        } else {
            return date.toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit', 
                year: 'numeric'
            });
        }
    }

    updateStats(newGameData) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        const starsElement = document.getElementById('stars-count');
        const spinsElement = document.getElementById('spins-count');
        const prizesElement = document.getElementById('prizes-count');
        
        if (starsElement && newGameData.stars !== undefined) {
            this.animateValueChange(starsElement, newGameData.stars);
        }
        
        if (spinsElement && newGameData.totalSpins !== undefined) {
            this.animateValueChange(spinsElement, newGameData.totalSpins);
        }
        
        if (prizesElement) {
            const prizesCount = newGameData.prizes?.length || newGameData.prizesWon || 0;
            this.animateValueChange(prizesElement, prizesCount);
        }
    }

    animateValueChange(element, newValue) {
        const currentValue = parseInt(element.textContent) || 0;
        if (currentValue === newValue) return;
        
        element.style.transform = 'scale(1.2)';
        element.style.color = '#CCD537';
        
        setTimeout(() => {
            element.textContent = newValue + (element.classList.contains('stars') ? ' ‚≠ê' : '');
            element.style.transform = '';
            element.style.color = '';
        }, 200);
    }

    destroy() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è...');
        
        if (this.animationTimeout) {
            clearTimeout(this.animationTimeout);
        }
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–π
        const animatedElements = document.querySelectorAll('[data-animate]');
        animatedElements.forEach(element => {
            element.style.transition = '';
            element.style.transform = '';
            element.style.opacity = '';
        });
    }
}