// public/js/screens/mega-roulette.js - –ü–û–õ–ù–´–ô –§–ê–ô–õ –ú–ï–ì–ê –†–£–õ–ï–¢–ö–ò

export class MegaRouletteScreen {
    constructor(app) {
        this.app = app;
        this.isSpinning = false;
        this.wheelRotation = 0;
        this.countdownInterval = null;
        this.lastCanSpinStatus = null;
        
        this.megaPrizes = [
            { id: 'airpods4', name: 'AirPods 4', icon: 'üéß', rarity: 'legendary', value: 25000 },
            { id: 'cert5000', name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 5000‚ÇΩ', icon: 'üíé', rarity: 'epic', value: 5000 },
            { id: 'cert3000', name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 3000‚ÇΩ', icon: 'üí∞', rarity: 'rare', value: 3000 },
            { id: 'powerbank', name: '–ü–æ–≤–µ—Ä–±–∞–Ω–∫', icon: 'üîã', rarity: 'rare', value: 2000 },
            { id: 'cert2000', name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 2000‚ÇΩ', icon: 'üí≥', rarity: 'common', value: 2000 },
            { id: 'charger', name: '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞', icon: '‚ö°', rarity: 'common', value: 1500 },
            { id: 'cert1000', name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 1000‚ÇΩ', icon: 'üéÅ', rarity: 'common', value: 1000 },
            { id: 'stars100', name: '100 –∑–≤–µ–∑–¥', icon: '‚≠ê', rarity: 'common', value: 100 },
            { id: 'empty', name: '–ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑', icon: 'üåü', rarity: 'empty', value: 0 }
        ];
    }

    render() {
        const timeUntilNext = this.getTimeUntilNextSpin();
        const canSpin = timeUntilNext <= 0;
        const userStars = this.app.gameData.stars;
        const hasEnoughStars = userStars >= 5000;

        return `
            <div id="mega-roulette-screen" class="screen">
                <div class="mega-header">
                    <button class="back-btn" id="mega-back-btn">
                        <i class="fas fa-arrow-left"></i>
                    </button>
                    <div class="mega-title">
                        <h2>üëë –ú–ï–ì–ê –†–£–õ–ï–¢–ö–ê</h2>
                        <p>–ü—Ä–µ–º–∏—É–º –ø—Ä–∏–∑—ã –¥–ª—è VIP –∏–≥—Ä–æ–∫–æ–≤</p>
                    </div>
                    <div class="mega-stars">
                        <i class="fas fa-star"></i>
                        <span>${userStars}</span>
                    </div>
                </div>


                <div class="wheel-container">
                    <div class="wheel" id="mega-wheel">
                        <div class="wheel-pointer"></div>
                        <svg id="mega-wheel-svg" width="400" height="400" viewBox="0 0 400 400">
                            <g id="mega-wheel-segments"></g>
                        </svg>
                        <div class="wheel-center mega-center">
                            <div class="mega-center-crown">üëë</div>
                            <span class="mega-center-text">MEGA</span>
                        </div>
                    </div>
                </div>

                <div class="mega-spin-info">
                    <div class="mega-cost">
                        <i class="fas fa-star"></i>
                        <span>5000 –∑–≤–µ–∑–¥ –∑–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫—É</span>
                    </div>
                    ${!canSpin ? `
                        <div class="mega-timer">
                            <i class="fas fa-clock"></i>
                            <span>–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —á–µ—Ä–µ–∑: <span id="mega-countdown">${this.formatTime(timeUntilNext)}</span></span>
                        </div>
                    ` : ''}
                </div>

                <div class="mega-spin-action">
                    <button id="mega-spin-btn" class="mega-spin-button ${!canSpin || !hasEnoughStars ? 'disabled' : ''}" 
                            ${!canSpin || !hasEnoughStars ? 'disabled' : ''}>
                        <div class="mega-btn-bg"></div>
                        <div class="mega-btn-content">
                            ${!canSpin ? '<i class="fas fa-clock"></i> –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ' : 
                              !hasEnoughStars ? '<i class="fas fa-star"></i> 5000 –∑–≤–µ–∑–¥' :
                              '<i class="fas fa-crown"></i> –ö–†–£–¢–ò–¢–¨ –ú–ï–ì–ê –†–£–õ–ï–¢–ö–£'}
                        </div>
                    </button>
                </div>

                <div class="mega-prizes-list">
                    <h3 class="prizes-title">üéÅ –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤</h3>
                    <div class="prizes-grid">
                        ${this.megaPrizes.map(prize => `
                            <div class="prize-item ${prize.rarity}">
                                <div class="prize-icon">${prize.icon}</div>
                                <div class="prize-name">${prize.name}</div>
                            </div>
                        `).join('')}
                    </div>
                </div>

                ${canSpin ? '' : '<div class="mega-next-spin-info">–ú–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –¥–ª—è –æ—Å–æ–±—ã—Ö –∏–≥—Ä–æ–∫–æ–≤</div>'}
            </div>
        `;
    }

    init() {
        console.log('üé∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏...');
        this.generateMegaWheelSegments();
        this.setupEventListeners();
        if (this.getTimeUntilNextSpin() > 0) {
            this.startCountdown();
        }
        console.log('‚úÖ –ú–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        const backBtn = document.getElementById('mega-back-btn');
        console.log('üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞...', backBtn);
        
        if (backBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
            backBtn.addEventListener('click', () => {
                console.log('‚¨Ö –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞');
                console.log('üì± App:', this.app);
                console.log('üß≠ Navigation:', this.app?.navigation);
                console.log('üìç NavigateTo:', this.app?.navigation?.navigateTo);
                
                try {
                    if (this.app && this.app.navigation && this.app.navigation.navigateTo) {
                        console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º navigateTo("main")');
                        this.app.navigation.navigateTo('main');
                    } else {
                        console.error('Navigation –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                        console.error('App:', this.app);
                        window.location.reload();
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
                    window.location.reload();
                }
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ mega-back-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏–Ω–∞
        const spinBtn = document.getElementById('mega-spin-btn');
        if (spinBtn && !spinBtn.disabled) {
            spinBtn.addEventListener('click', () => {
                this.spinMegaWheel();
            });
        }
    }

    generateMegaWheelSegments() {
        const container = document.getElementById('mega-wheel-segments');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const radius = 180;
        const centerX = 200;
        const centerY = 200;
        const anglePerSegment = (2 * Math.PI) / this.megaPrizes.length;

        // –ö—Ä–∞—Å–∏–≤—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏
        const megaSegmentColors = [
            'linear-gradient(135deg, #ff6b9d 0%, #c44569 100%)', // –†–æ–∑–æ–≤–æ-–º–∞–ª–∏–Ω–æ–≤—ã–π
            'linear-gradient(135deg, #764ba2 0%, #667eea 100%)', // –§–∏–æ–ª–µ—Ç–æ–≤–æ-—Å–∏–Ω–∏–π  
            'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)', // –†–æ–∑–æ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
            'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)', // –°–∏–Ω–µ-–≥–æ–ª—É–±–æ–π
            'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)', // –ó–µ–ª–µ–Ω–æ-–º—è—Ç–Ω—ã–π
            'linear-gradient(135deg, #fa709a 0%, #fee140 100%)', // –†–æ–∑–æ–≤–æ-–∂–µ–ª—Ç—ã–π
            'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)', // –ú—è—Ç–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
            'linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%)', // –ö–æ—Ä–∞–ª–ª–æ–≤—ã–π
            'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'  // –°–∏–Ω–∏–π-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        ];

        // –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
        let defsContent = '<defs>';
        megaSegmentColors.forEach((gradient, index) => {
            const gradientMatch = gradient.match(/linear-gradient\(135deg,\s*([^,]+)\s*0%,\s*([^)]+)\s*100%\)/);
            if (gradientMatch) {
                const [, color1, color2] = gradientMatch;
                defsContent += `
                    <linearGradient id="mega-gradient${index}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:${color1.trim()};stop-opacity:1" />
                        <stop offset="100%" style="stop-color:${color2.trim()};stop-opacity:1" />
                    </linearGradient>
                `;
            }
        });
        defsContent += '</defs>';

        let svgContent = '';

        this.megaPrizes.forEach((prize, index) => {
            const startAngle = index * anglePerSegment - Math.PI / 2;
            const endAngle = (index + 1) * anglePerSegment - Math.PI / 2;

            const x1 = centerX + radius * Math.cos(startAngle);
            const y1 = centerY + radius * Math.sin(startAngle);
            const x2 = centerX + radius * Math.cos(endAngle);
            const y2 = centerY + radius * Math.sin(endAngle);

            const largeArc = anglePerSegment > Math.PI ? 1 : 0;

            const path = `M ${centerX} ${centerY} L ${x1} ${y1} A ${radius} ${radius} 0 ${largeArc} 1 ${x2} ${y2} Z`;

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
            const gradientIndex = index % megaSegmentColors.length;

            // –¢–µ–∫—Å—Ç –∏–∫–æ–Ω–∫–∏
            const textAngle = (startAngle + endAngle) / 2;
            const textRadius = radius * 0.7;
            const textX = centerX + textRadius * Math.cos(textAngle);
            const textY = centerY + textRadius * Math.sin(textAngle);

            svgContent += `
                <path 
                    d="${path}" 
                    fill="url(#mega-gradient${gradientIndex})" 
                    stroke="rgba(255,255,255,0.3)" 
                    stroke-width="2"
                    class="wheel-segment-path mega-segment"
                    data-prize-id="${prize.id}"
                    filter="drop-shadow(0 4px 8px rgba(0,0,0,0.3))"
                />
                <text 
                    x="${textX}" 
                    y="${textY}" 
                    text-anchor="middle" 
                    dominant-baseline="middle" 
                    font-size="24" 
                    fill="white"
                    font-weight="bold"
                    class="segment-icon"
                    filter="drop-shadow(0 2px 4px rgba(0,0,0,0.5))"
                >${prize.icon}</text>
            `;
        });

        container.innerHTML = defsContent + svgContent;
        console.log('‚úÖ –ö—Ä–∞—Å–∏–≤–∞—è SVG –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
    }

    getPrizeColor(rarity) {
        switch (rarity) {
            case 'legendary': return 'url(#legendary-gradient)';
            case 'epic': return 'url(#epic-gradient)';
            case 'rare': return 'url(#rare-gradient)';
            case 'common': return 'url(#common-gradient)';
            case 'empty': return 'url(#empty-gradient)';
            default: return '#666666';
        }
    }

    async spinMegaWheel() {
        if (this.isSpinning) return;
        
        const userStars = this.app.gameData.stars;
        if (userStars < 5000) {
            this.app.showStatusMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏!', 'error');
            return;
        }

        this.isSpinning = true;

        // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
        this.app.gameData.stars -= 5000;
        this.app.saveGameData();
        this.app.updateStarsDisplay();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        const wonPrize = await this.calculateMegaPrize();
        const segmentAngle = 360 / this.megaPrizes.length;
        const winIndex = this.megaPrizes.findIndex(p => p.id === wonPrize.id);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç
        const targetAngle = (winIndex * segmentAngle) + (segmentAngle / 2);
        const spins = 5 + Math.random() * 3; // 5-8 –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
        const finalRotation = (spins * 360) + targetAngle;

        // –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ
        const wheel = document.getElementById('mega-wheel-svg');
        if (wheel) {
            this.wheelRotation += finalRotation;
            wheel.style.transition = 'transform 4s cubic-bezier(0.23, 1, 0.320, 1)';
            wheel.style.transform = `rotate(${this.wheelRotation}deg)`;
        }

        // –í–∏–±—Ä–∞—Ü–∏—è
        if (this.app.tg && this.app.tg.HapticFeedback) {
            this.app.tg.HapticFeedback.impactOccurred('heavy');
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            this.processMegaWin(wonPrize);
            this.isSpinning = false;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (–º–µ—Å—è—Ü)
            const nextSpinTime = Date.now() + (30 * 24 * 60 * 60 * 1000); // 30 –¥–Ω–µ–π
            localStorage.setItem('megaRouletteNextSpin', nextSpinTime.toString());
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —ç–∫—Ä–∞–Ω
            setTimeout(() => {
                this.refreshScreen();
            }, 3000);
        }, 4000);
    }

    async calculateMegaPrize() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–Ω—Å–æ–≤ –∏–∑ API
            const response = await fetch('/api/admin/wheel-settings/mega');
            let prizeChances = [];
            
            if (response.ok) {
                const settings = await response.json();
                if (settings.prizes && settings.prizes.length > 0) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
                    prizeChances = settings.prizes;
                } else {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    prizeChances = this.getDefaultMegaPrizeChances();
                }
            } else {
                // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                prizeChances = this.getDefaultMegaPrizeChances();
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–Ω—Å–æ–≤
            const random = Math.random() * 100;
            let cumulative = 0;
            
            for (const prizeChance of prizeChances) {
                cumulative += prizeChance.chance;
                if (random < cumulative) {
                    return this.megaPrizes.find(p => p.id === prizeChance.id);
                }
            }
            
            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –ø—Ä–∏–∑
            return this.megaPrizes.find(p => p.id === 'empty');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
            return this.calculateMegaPrizeDefault();
        }
    }
    
    getDefaultMegaPrizeChances() {
        return [
            { id: 'airpods4', chance: 0.5 },
            { id: 'cert5000', chance: 2.5 },
            { id: 'cert3000', chance: 6.0 },
            { id: 'powerbank', chance: 9.0 },
            { id: 'cert2000', chance: 13.0 },
            { id: 'charger', chance: 16.0 },
            { id: 'cert1000', chance: 18.0 },
            { id: 'stars100', chance: 15.0 },
            { id: 'empty', chance: 20.0 }
        ];
    }
    
    calculateMegaPrizeDefault() {
        const random = Math.random() * 100;
        
        // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —à–∞–Ω—Å—ã –≤—ã–∏–≥—Ä—ã—à–∞
        if (random < 0.1) return this.megaPrizes.find(p => p.id === 'airpods4');
        if (random < 2) return this.megaPrizes.find(p => p.id === 'cert5000');
        if (random < 7) return this.megaPrizes.find(p => p.id === 'cert3000');
        if (random < 15) return this.megaPrizes.find(p => p.id === 'powerbank');
        if (random < 27) return this.megaPrizes.find(p => p.id === 'cert2000');
        if (random < 42) return this.megaPrizes.find(p => p.id === 'charger');
        if (random < 60) return this.megaPrizes.find(p => p.id === 'cert1000');
        if (random < 75) return this.megaPrizes.find(p => p.id === 'stars100');
        
        return this.megaPrizes.find(p => p.id === 'empty');
    }

    processMegaWin(prize) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        this.app.gameData.megaPrizes = this.app.gameData.megaPrizes || [];
        this.app.gameData.megaPrizes.push({
            ...prize,
            wonAt: Date.now(),
            claimed: false
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.app.gameData.totalMegaSpins = (this.app.gameData.totalMegaSpins || 0) + 1;
        this.app.gameData.totalMegaWins = (this.app.gameData.totalMegaWins || 0) + (prize.value > 0 ? 1 : 0);

        this.app.saveGameData();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (prize.value > 0) {
            this.showMegaWinModal(prize);
        } else {
            this.app.showStatusMessage('–í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø—ã—Ç!', 'info');
        }
    }

    showMegaWinModal(prize) {
        const winModal = document.createElement('div');
        winModal.className = 'mega-win-modal';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–∑–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let messageContent = '';
        let isStarsPrize = false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–∑ –∑–≤–µ–∑–¥–∞–º–∏ (100 –∑–≤–µ–∑–¥)
        if (prize.id === 'stars100') {
            isStarsPrize = true;
            messageContent = `
                <div class="mega-win-content">
                    <div class="mega-win-fireworks"></div>
                    <div class="mega-win-icon">‚≠ê</div>
                    <h2>–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!</h2>
                    <h3>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 100 –∑–≤–µ–∑–¥!</h3>
                    <p class="mega-win-stars">–ó–≤–µ–∑–¥—ã —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!</p>
                    <button class="mega-win-close btn-primary">–û—Ç–ª–∏—á–Ω–æ!</button>
                </div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º 100 –∑–≤–µ–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å
            this.app.gameData.stars = (this.app.gameData.stars || 0) + 100;
            this.app.saveGameData();
            this.app.updateStarsDisplay();
        } else {
            // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ (—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, —Ç–æ–≤–∞—Ä—ã)
            const isCertificate = prize.id.includes('cert');
            const platform = isCertificate ? (
                prize.name.toLowerCase().includes('–≤–±') ? '–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑' : 
                prize.name.toLowerCase().includes('—è') ? '–Ø–Ω–¥–µ–∫—Å' : ''
            ) : '';
            
            messageContent = `
                <div class="mega-win-content">
                    <div class="mega-win-fireworks"></div>
                    <div class="mega-win-icon ${prize.rarity}">${prize.icon}</div>
                    <h2>üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!</h2>
                    <h3>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏:</h3>
                    <div class="mega-win-prize">${prize.name}</div>
                    ${isCertificate ? 
                        `<p class="mega-win-instruction">üì© –ù–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞${platform ? ` –Ω–∞ ${platform}` : ''}</p>` :
                        `<p class="mega-win-instruction">üì¶ –ù–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞</p>`
                    }
                    <button class="mega-win-close btn-contact">–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É</button>
                </div>
            `;
        }
        
        winModal.innerHTML = messageContent;
        document.body.appendChild(winModal);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeBtn = winModal.querySelector('.mega-win-close');
        closeBtn.addEventListener('click', () => {
            if (!isStarsPrize) {
                // –î–ª—è –ø—Ä–∏–∑–æ–≤ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                if (this.app.tg && this.app.tg.openTelegramLink) {
                    this.app.tg.openTelegramLink('https://t.me/your_manager_username');
                }
            }
            winModal.remove();
        });

        // –§–µ–π–µ—Ä–≤–µ—Ä–∫
        if (this.app.tg && this.app.tg.HapticFeedback) {
            for (let i = 0; i < 3; i++) {
                setTimeout(() => {
                    this.app.tg.HapticFeedback.notificationOccurred('success');
                }, i * 200);
            }
        }
    }

    getTimeUntilNextSpin() {
        const nextSpinTime = localStorage.getItem('megaRouletteNextSpin');
        if (!nextSpinTime) return 0;
        
        return Math.max(0, parseInt(nextSpinTime) - Date.now());
    }

    formatTime(ms) {
        const days = Math.floor(ms / (1000 * 60 * 60 * 24));
        const hours = Math.floor((ms % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));
        
        if (days > 0) return `${days}–¥ ${hours}—á`;
        if (hours > 0) return `${hours}—á ${minutes}–º`;
        return `${minutes}–º`;
    }

    startCountdown() {
        if (this.countdownInterval) {
            clearInterval(this.countdownInterval);
        }
        
        this.countdownInterval = setInterval(() => {
            const timeLeft = this.getTimeUntilNextSpin();
            const countdownEl = document.getElementById('mega-countdown');
            
            if (countdownEl) {
                countdownEl.textContent = this.formatTime(timeLeft);
            }
            
            if (timeLeft <= 0) {
                clearInterval(this.countdownInterval);
                this.refreshScreen();
            }
        }, 60000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }

    refreshScreen() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏...');
        
        // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (this.countdownInterval) {
            clearInterval(this.countdownInterval);
            this.countdownInterval = null;
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–∫—Ä–∞–Ω–∞
        const screenContainer = document.getElementById('mega-roulette-screen');
        if (screenContainer) {
            const newContent = this.render();
            const parser = new DOMParser();
            const doc = parser.parseFromString(newContent, 'text/html');
            const newScreenContent = doc.getElementById('mega-roulette-screen');
            
            if (newScreenContent) {
                screenContainer.innerHTML = newScreenContent.innerHTML;
                this.init();
            }
        }
    }

    destroy() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏...');
        
        if (this.countdownInterval) {
            clearInterval(this.countdownInterval);
            this.countdownInterval = null;
        }
        
        // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        const modals = document.querySelectorAll('.mega-win-modal');
        modals.forEach(modal => modal.remove());
        
    }
}