// public/js/screens/mega-roulette.js - –ü–û–õ–ù–´–ô –§–ê–ô–õ –ú–ï–ì–ê –†–£–õ–ï–¢–ö–ò

export class MegaRouletteScreen {
    constructor(app) {
        this.app = app;
        this.isSpinning = false;
        this.wheelRotation = 0;
        this.countdownInterval = null;
        this.lastCanSpinStatus = null;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è onclick –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        window.megaRouletteScreen = this;
        
        this.megaPrizes = [
            { id: 'airpods4', name: 'AirPods 4', icon: 'üéß', rarity: 'legendary', value: 25000 },
            { id: 'cert5000', name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 5000‚ÇΩ', icon: 'üíé', rarity: 'epic', value: 5000 },
            { id: 'cert3000', name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 3000‚ÇΩ', icon: 'üí∞', rarity: 'rare', value: 3000 },
            { id: 'powerbank', name: '–ü–æ–≤–µ—Ä–±–∞–Ω–∫', icon: 'üîã', rarity: 'rare', value: 2000 },
            { id: 'cert2000', name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 2000‚ÇΩ', icon: 'üí≥', rarity: 'common', value: 2000 },
            { id: 'charger', name: '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞', icon: '‚ö°', rarity: 'common', value: 1500 },
            { id: 'cert1000', name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 1000‚ÇΩ', icon: 'üéÅ', rarity: 'common', value: 1000 },
            { id: 'stars100', name: '100 –∑–≤–µ–∑–¥', icon: '‚≠ê', rarity: 'common', value: 100 },
            { id: 'empty', name: '–ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑', icon: 'üåü', rarity: 'empty', value: 0 }
        ];
    }

    // –ù–∞–π–¥–∏—Ç–µ –º–µ—Ç–æ–¥ render() –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –±–ª–æ–∫ —Å mega-spin-info –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥:

    render() {
        const userStars = this.app.gameData.stars;
        
        return `
            <div class="mega-container">
                <div class="mega-header">
                    <button id="mega-back-btn" class="back-btn">
                        <i class="fas fa-arrow-left"></i>
                    </button>
                    <div class="mega-title">
                        <h2>üé∞ –ú–ï–ì–ê –†–£–õ–ï–¢–ö–ê</h2>
                        <p>–°–∫–æ—Ä–æ –∑–∞–ø—É—Å–∫!</p>
                    </div>
                    <div class="mega-stars">
                        <i class="fas fa-star"></i>
                        <span>${userStars.toLocaleString()}</span>
                    </div>
                </div>

                <!-- –ü–†–ï–í–¨–Æ –ë–õ–û–ö -->
                <div class="mega-preview-card">
                    <div class="preview-icon">
                        <div class="coming-soon-badge">–°–ö–û–†–û</div>
                        <div class="mega-crown-animation">üëë</div>
                    </div>
                    
                    <h3>–ú–ï–ì–ê –†–£–õ–ï–¢–ö–ê</h3>
                    <p class="preview-subtitle">–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞ –¥–ª—è VIP –∏–≥—Ä–æ–∫–æ–≤</p>
                    
                    <div class="launch-countdown">
                        <div class="countdown-label">–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑:</div>
                        <div class="countdown-timer" id="mega-countdown">
                            <div class="time-unit">
                                <span class="time-value" id="days">30</span>
                                <span class="time-label">–¥–Ω–µ–π</span>
                            </div>
                            <div class="time-separator">:</div>
                            <div class="time-unit">
                                <span class="time-value" id="hours">00</span>
                                <span class="time-label">—á–∞—Å–æ–≤</span>
                            </div>
                            <div class="time-separator">:</div>
                            <div class="time-unit">
                                <span class="time-value" id="minutes">00</span>  
                                <span class="time-label">–º–∏–Ω—É—Ç</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –ü–†–ò–ó–û–í–û–ô –§–û–ù–î -->
                <div class="mega-prizes-showcase">
                    <h3>üíé –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥</h3>
                    <div class="mega-prizes-grid">
                        <div class="mega-prize-card legendary preview">
                            <div class="prize-icon">üéß</div>
                            <div class="prize-name">AirPods 4</div>
                            <div class="preview-label">–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑</div>
                        </div>
                        <div class="mega-prize-card epic preview">
                            <div class="prize-icon">üíé</div>
                            <div class="prize-name">–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 5000‚ÇΩ</div>
                            <div class="preview-label">VIP –ø—Ä–∏–∑</div>
                        </div>
                        <div class="mega-prize-card rare preview">
                            <div class="prize-icon">üîã</div>
                            <div class="prize-name">–ü–æ–≤–µ—Ä-–±–∞–Ω–∫</div>
                            <div class="preview-label">–ü–æ–ª–µ–∑–Ω—ã–π –ø—Ä–∏–∑</div>
                        </div>
                        <div class="mega-prize-card others preview">
                            <div class="prize-icon">‚ú®</div>
                            <div class="prize-name">–î—Ä—É–≥–∏–µ –ø—Ä–∏–∑—ã</div>
                            <div class="preview-label">–°—é—Ä–ø—Ä–∏–∑—ã</div>
                        </div>
                    </div>
                </div>

                <!-- –£–°–õ–û–í–ò–Ø –î–û–°–¢–£–ü–ê -->
                <div class="access-conditions">
                    <h3>üîë –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø</h3>
                    <div class="conditions-grid">
                        <div class="condition-card">
                            <div class="condition-icon">üèÜ</div>
                            <div class="condition-title">–¢–æ–ø 15 –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞</div>
                            <div class="condition-desc">–í–æ–π–¥–∏ –≤ —Ç–æ–ø 15 –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –º–µ—Å—è—Ü–∞</div>
                            <div class="condition-status monthly">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</div>
                        </div>
                        <div class="condition-or">–ò–õ–ò</div>
                        <div class="condition-card">
                            <div class="condition-icon">‚≠ê</div>
                            <div class="condition-title">5000 –∑–≤–µ–∑–¥</div>
                            <div class="condition-desc">–ü–æ—Ç—Ä–∞—Ç—å 5000 –∑–≤–µ–∑–¥ –∑–∞ –æ–¥–Ω—É –ø—Ä–æ–∫—Ä—É—Ç–∫—É</div>
                            <div class="condition-status ${userStars >= 5000 ? 'available' : 'need-more'}">
                                ${userStars >= 5000 ? '–î–æ—Å—Ç—É–ø–Ω–æ' : `–ù—É–∂–Ω–æ –µ—â–µ ${(5000 - userStars).toLocaleString()}`}
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ü–£–°–ö–ï -->
                <div class="launch-info">
                    <div class="info-item">
                        <i class="fas fa-calendar-alt"></i>
                        <span><strong>–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:</strong> ${this.getLaunchDate()}</span>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-trophy"></i>
                        <span><strong>–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:</strong> –ï–∂–µ–º–µ—Å—è—á–Ω–æ –¥–ª—è —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤</span>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-star"></i>
                        <span><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> 5000 –∑–≤–µ–∑–¥ –∑–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫—É</span>
                    </div>
                </div>

                <!-- –ö–ù–û–ü–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô -->
                <div class="notification-section">
                    <button class="notify-btn" id="notify-btn">
                        <i class="fas fa-bell"></i>
                        <span>–£–≤–µ–¥–æ–º–∏—Ç—å –æ –∑–∞–ø—É—Å–∫–µ</span>
                    </button>
                    <p class="notify-text">–ü–æ–ª—É—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –Ω–∞—à–µ–º Telegram –∫–∞–Ω–∞–ª–µ, –∫–æ–≥–¥–∞ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!</p>
                </div>
            </div>
        `;
    }

    // –û–±–Ω–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ init() –¥–ª—è –ø—Ä–µ–≤—å—é:
    init() {
        console.log('üé∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏...');
        this.setupEventListeners();
        this.startCountdown();
        console.log('‚úÖ –ü—Ä–µ–≤—å—é –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    // –û–±–Ω–æ–≤–∏—Ç–µ setupEventListeners():
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        const backBtn = document.getElementById('mega-back-btn');
        if (backBtn) {
            backBtn.addEventListener('click', () => {
                this.app.navigation.navigateTo('main');
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notifyBtn = document.getElementById('notify-btn');
        if (notifyBtn) {
            notifyBtn.addEventListener('click', () => {
                this.subscribeToNotifications();
            });
        }
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
    subscribeToNotifications() {
        if (this.app.tg?.openTelegramLink) {
            this.app.tg.openTelegramLink('https://t.me/kosmetichka_official');
            this.app.showStatusMessage('–ü–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!', 'success');
        } else {
            this.app.showStatusMessage('–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @kosmetichka_official –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!', 'info');
        }
    }

    generateMegaWheelSegments() {
        const container = document.getElementById('mega-wheel-segments');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ò–î–ï–ê–õ–¨–ù–û –†–û–í–ù–´–ô –ö–†–£–ì - —Ç–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const radius = 150;
        const centerX = 160;
        const centerY = 160;
        const segmentCount = this.megaPrizes.length;
        const anglePerSegment = (2 * Math.PI) / segmentCount;
        
        console.log(`üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ${segmentCount} –∏–¥–µ–∞–ª—å–Ω–æ —Ä–æ–≤–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤`);

        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–º—ã—Ç–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        const segmentColors = [
            { from: '#FFD700', to: '#FFA500' },
            { from: '#FF6347', to: '#FF4500' },
            { from: '#9370DB', to: '#8A2BE2' },
            { from: '#00BFFF', to: '#1E90FF' },
            { from: '#32CD32', to: '#228B22' },
            { from: '#FF1493', to: '#DC143C' },
            { from: '#FF8C00', to: '#FF7F50' },
            { from: '#DA70D6', to: '#BA55D3' },
            { from: '#20B2AA', to: '#008B8B' }
        ];

        let svgContent = '';
        
        // –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
        let defsContent = '<defs>';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –±–µ–∑ —Ç–µ–Ω–µ–π –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
        for (let i = 0; i < segmentCount; i++) {
            const colorIndex = i % segmentColors.length;
            const color = segmentColors[colorIndex];
            
            defsContent += `
                <radialGradient id="megaGrad${i}" cx="50%" cy="50%" r="50%">
                    <stop offset="0%" style="stop-color:${color.from};stop-opacity:0.9" />
                    <stop offset="100%" style="stop-color:${color.to};stop-opacity:1" />
                </radialGradient>
            `;
        }
        
        defsContent += '</defs>';

        // –°–æ–∑–¥–∞–µ–º –∏–¥–µ–∞–ª—å–Ω–æ —Ä–æ–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –ë–ï–ó –∏–∫–æ–Ω–æ–∫ –∏ —Ç–µ–∫—Å—Ç–∞
        for (let i = 0; i < segmentCount; i++) {
            const startAngle = i * anglePerSegment - Math.PI / 2; // –ù–∞—á–∏–Ω–∞–µ–º —Å–≤–µ—Ä—Ö—É
            const endAngle = (i + 1) * anglePerSegment - Math.PI / 2;

            // –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫—Ä—É–≥–∞
            const x1 = centerX + radius * Math.cos(startAngle);
            const y1 = centerY + radius * Math.sin(startAngle);
            const x2 = centerX + radius * Math.cos(endAngle);
            const y2 = centerY + radius * Math.sin(endAngle);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ–ª—å—à—É—é –¥—É–≥—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const largeArcFlag = anglePerSegment > Math.PI ? 1 : 0;

            // –°–æ–∑–¥–∞–µ–º –∏–¥–µ–∞–ª—å–Ω–æ —Ä–æ–≤–Ω—ã–π –ø—É—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞
            const pathData = [
                `M ${centerX} ${centerY}`,                    // –¶–µ–Ω—Ç—Ä
                `L ${x1.toFixed(3)} ${y1.toFixed(3)}`,       // –ü–µ—Ä–≤–∞—è –ª–∏–Ω–∏—è
                `A ${radius} ${radius} 0 ${largeArcFlag} 1 ${x2.toFixed(3)} ${y2.toFixed(3)}`, // –î—É–≥–∞
                'Z'                                           // –ó–∞–∫—Ä—ã—Ç–∏–µ
            ].join(' ');

            // –ß–ò–°–¢–´–ô —Å–µ–≥–º–µ–Ω—Ç –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
            svgContent += `
                <path 
                    d="${pathData}" 
                    fill="url(#megaGrad${i})" 
                    stroke="rgba(255,255,255,0.2)" 
                    stroke-width="0.5"
                    class="mega-segment-path"
                    data-prize-id="${this.megaPrizes[i].id}"
                    data-segment-index="${i}"
                />
            `;
        }

        // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π SVG
        container.innerHTML = defsContent + svgContent;
        
        console.log('‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ —Ä–æ–≤–Ω–æ–µ –∫–æ–ª–µ—Å–æ —Å–æ–∑–¥–∞–Ω–æ');
    }


    async spinMegaWheel() {
        if (this.isSpinning) return;
        
        const userStars = this.app.gameData.stars;
        if (userStars < 5000) {
            this.app.showStatusMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏!', 'error');
            return;
        }

        this.isSpinning = true;

        // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
        this.app.gameData.stars -= 5000;
        this.app.saveGameData();
        this.app.updateStarsDisplay();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        const wonPrize = await this.calculateMegaPrize();
        const segmentAngle = 360 / this.megaPrizes.length;
        const winIndex = this.megaPrizes.findIndex(p => p.id === wonPrize.id);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç
        const targetAngle = (winIndex * segmentAngle) + (segmentAngle / 2);
        const spins = 5 + Math.random() * 3; // 5-8 –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
        const finalRotation = (spins * 360) + targetAngle;

        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–ª–µ—Å–∞
        const wheel = document.getElementById('mega-wheel-svg');
        const wheelContainer = document.getElementById('mega-wheel');
        
        if (wheel && wheelContainer) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å spinning –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º—ã—Ç–∏—è
            wheelContainer.classList.add('spinning');
            
            // –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ
            this.wheelRotation += finalRotation;
            wheel.style.transition = 'transform 4s cubic-bezier(0.23, 1, 0.320, 1)';
            wheel.style.transform = `rotate(${this.wheelRotation}deg)`;
        }

        // –í–∏–±—Ä–∞—Ü–∏—è
        if (this.app.tg && this.app.tg.HapticFeedback) {
            this.app.tg.HapticFeedback.impactOccurred('heavy');
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å spinning –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–∞–∑–º—ã—Ç–∏—é
            if (wheelContainer) {
                wheelContainer.classList.remove('spinning');
            }
            
            this.processMegaWin(wonPrize);
            this.isSpinning = false;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (–º–µ—Å—è—Ü)
            const nextSpinTime = Date.now() + (30 * 24 * 60 * 60 * 1000); // 30 –¥–Ω–µ–π
            localStorage.setItem('megaRouletteNextSpin', nextSpinTime.toString());
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —ç–∫—Ä–∞–Ω
            setTimeout(() => {
                this.refreshScreen();
            }, 3000);
        }, 4000);
    }

    async calculateMegaPrize() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–Ω—Å–æ–≤ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
            const response = await fetch('/api/wheel-settings/mega');
            let prizeChances = [];
            
            if (response.ok) {
                const settings = await response.json();
                if (settings.prizes && settings.prizes.length > 0) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
                    prizeChances = settings.prizes;
                } else {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    prizeChances = this.getDefaultMegaPrizeChances();
                }
            } else {
                // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                prizeChances = this.getDefaultMegaPrizeChances();
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–Ω—Å–æ–≤
            const random = Math.random() * 100;
            let cumulative = 0;
            
            for (const prizeChance of prizeChances) {
                cumulative += prizeChance.chance;
                if (random < cumulative) {
                    return this.megaPrizes.find(p => p.id === prizeChance.id);
                }
            }
            
            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –ø—Ä–∏–∑
            return this.megaPrizes.find(p => p.id === 'empty');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
            return this.calculateMegaPrizeDefault();
        }
    }
    
    getDefaultMegaPrizeChances() {
        return [
            { id: 'airpods4', chance: 0.5 },
            { id: 'cert5000', chance: 2.5 },
            { id: 'cert3000', chance: 6.0 },
            { id: 'powerbank', chance: 9.0 },
            { id: 'cert2000', chance: 13.0 },
            { id: 'charger', chance: 16.0 },
            { id: 'cert1000', chance: 18.0 },
            { id: 'stars100', chance: 15.0 },
            { id: 'empty', chance: 20.0 }
        ];
    }
    
    calculateMegaPrizeDefault() {
        const random = Math.random() * 100;
        
        // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —à–∞–Ω—Å—ã –≤—ã–∏–≥—Ä—ã—à–∞
        if (random < 0.1) return this.megaPrizes.find(p => p.id === 'airpods4');
        if (random < 2) return this.megaPrizes.find(p => p.id === 'cert5000');
        if (random < 7) return this.megaPrizes.find(p => p.id === 'cert3000');
        if (random < 15) return this.megaPrizes.find(p => p.id === 'powerbank');
        if (random < 27) return this.megaPrizes.find(p => p.id === 'cert2000');
        if (random < 42) return this.megaPrizes.find(p => p.id === 'charger');
        if (random < 60) return this.megaPrizes.find(p => p.id === 'cert1000');
        if (random < 75) return this.megaPrizes.find(p => p.id === 'stars100');
        
        return this.megaPrizes.find(p => p.id === 'empty');
    }

    processMegaWin(prize) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        this.app.gameData.megaPrizes = this.app.gameData.megaPrizes || [];
        this.app.gameData.megaPrizes.push({
            ...prize,
            wonAt: Date.now(),
            claimed: false
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.app.gameData.totalMegaSpins = (this.app.gameData.totalMegaSpins || 0) + 1;
        this.app.gameData.totalMegaWins = (this.app.gameData.totalMegaWins || 0) + (prize.value > 0 ? 1 : 0);

        this.app.saveGameData();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (prize.value > 0) {
            this.showMegaWinModal(prize);
        } else {
            this.app.showStatusMessage('–í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø—ã—Ç!', 'info');
        }
    }

    showMegaWinModal(prize) {
        const winModal = document.createElement('div');
        winModal.className = 'mega-win-modal';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–∑–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let messageContent = '';
        let isStarsPrize = false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–∑ –∑–≤–µ–∑–¥–∞–º–∏ (100 –∑–≤–µ–∑–¥)
        if (prize.id === 'stars100') {
            isStarsPrize = true;
            messageContent = `
                <div class="mega-win-content">
                    <div class="mega-win-fireworks"></div>
                    <div class="mega-win-icon">‚≠ê</div>
                    <h2>–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!</h2>
                    <h3>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 100 –∑–≤–µ–∑–¥!</h3>
                    <p class="mega-win-stars">–ó–≤–µ–∑–¥—ã —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!</p>
                    <button class="mega-win-close btn-primary">–û—Ç–ª–∏—á–Ω–æ!</button>
                </div>
            `;
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –ª–æ–∫–∞–ª—å–Ω–æ - —Å–µ—Ä–≤–µ—Ä —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ —Å–∞–º!
            console.log('‚≠ê –í—ã–∏–≥—Ä–∞–Ω–æ 100 –∑–≤–µ–∑–¥ –≤ –º–µ–≥–∞-—Ä—É–ª–µ—Ç–∫–µ. –û–∂–∏–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...');
        } else {
            // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ (—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, —Ç–æ–≤–∞—Ä—ã)
            const isCertificate = prize.id.includes('cert');
            const platform = isCertificate ? (
                prize.name.toLowerCase().includes('–≤–±') ? '–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑' : 
                prize.name.toLowerCase().includes('—è') ? '–Ø–Ω–¥–µ–∫—Å' : ''
            ) : '';
            
            messageContent = `
                <div class="mega-win-content">
                    <div class="mega-win-fireworks"></div>
                    <div class="mega-win-icon ${prize.rarity}">${prize.icon}</div>
                    <h2>üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!</h2>
                    <h3>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏:</h3>
                    <div class="mega-win-prize">${prize.name}</div>
                    <p class="mega-win-instruction">–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</p>
                    <div class="mega-prize-actions">
                        <button class="mega-support-btn" onclick="window.megaRouletteScreen?.openSupport()">
                            <i class="fas fa-headset"></i>
                            –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                        </button>
                        <button class="mega-win-close">–ü–æ–Ω—è—Ç–Ω–æ</button>
                    </div>
                </div>
            `;
        }
        
        winModal.innerHTML = messageContent;
        document.body.appendChild(winModal);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeBtn = winModal.querySelector('.mega-win-close');
        closeBtn.addEventListener('click', () => {
            winModal.remove();
        });

        // –§–µ–π–µ—Ä–≤–µ—Ä–∫
        if (this.app.tg && this.app.tg.HapticFeedback) {
            for (let i = 0; i < 3; i++) {
                setTimeout(() => {
                    this.app.tg.HapticFeedback.notificationOccurred('success');
                }, i * 200);
            }
        }
    }

    // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –∑–∞–ø—É—Å–∫–∞:
    getLaunchDate() {
        const launchDate = new Date();
        launchDate.setDate(launchDate.getDate() + 30);
        return launchDate.toLocaleDateString('ru-RU', { 
            day: 'numeric', 
            month: 'long', 
            year: 'numeric' 
        });
    }

    getTimeUntilNextSpin() {
        const nextSpinTime = localStorage.getItem('megaRouletteNextSpin');
        if (!nextSpinTime) return 0;
        
        return Math.max(0, parseInt(nextSpinTime) - Date.now());
    }

    formatTime(ms) {
        const days = Math.floor(ms / (1000 * 60 * 60 * 24));
        const hours = Math.floor((ms % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));
        
        if (days > 0) return `${days}–¥ ${hours}—á`;
        if (hours > 0) return `${hours}—á ${minutes}–º`;
        return `${minutes}–º`;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞:
    startCountdown() {
        this.updateCountdown();
        this.countdownInterval = setInterval(() => {
            this.updateCountdown();
        }, 60000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }

    updateCountdown() {
        const now = new Date();
        const launchDate = new Date(now.getTime() + (30 * 24 * 60 * 60 * 1000)); // 30 –¥–Ω–µ–π –æ—Ç —Å–µ–π—á–∞—Å
        const timeDiff = launchDate.getTime() - now.getTime();
        
        const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
        
        const daysEl = document.getElementById('days');
        const hoursEl = document.getElementById('hours');
        const minutesEl = document.getElementById('minutes');
        
        if (daysEl) daysEl.textContent = days.toString().padStart(2, '0');
        if (hoursEl) hoursEl.textContent = hours.toString().padStart(2, '0');
        if (minutesEl) minutesEl.textContent = minutes.toString().padStart(2, '0');
    }

    refreshScreen() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏...');
        
        // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (this.countdownInterval) {
            clearInterval(this.countdownInterval);
            this.countdownInterval = null;
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–∫—Ä–∞–Ω–∞
        const screenContainer = document.getElementById('mega-roulette-screen');
        if (screenContainer) {
            const newContent = this.render();
            const parser = new DOMParser();
            const doc = parser.parseFromString(newContent, 'text/html');
            const newScreenContent = doc.getElementById('mega-roulette-screen');
            
            if (newScreenContent) {
                screenContainer.innerHTML = newScreenContent.innerHTML;
                this.init();
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    openSupport() {
        console.log('üéß –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏');
        
        if (this.app.tg?.openTelegramLink) {
            this.app.tg.openTelegramLink('https://t.me/kosmetichkasupport');
            this.app.showStatusMessage('–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É...', 'info');
        } else if (window.open) {
            // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            window.open('https://t.me/kosmetichkasupport', '_blank');
        } else {
            this.app.showStatusMessage('–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @kosmetichkasupport', 'info');
        }
    }

    destroy() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏...');
        
        if (this.countdownInterval) {
            clearInterval(this.countdownInterval);
            this.countdownInterval = null;
        }
        
        // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        const modals = document.querySelectorAll('.mega-win-modal');
        modals.forEach(modal => modal.remove());
        
    }
}
