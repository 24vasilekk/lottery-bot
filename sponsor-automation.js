// sponsor-automation.js - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏
// ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è Kosmetichka Lottery Bot

const Database = require('./database');

class SponsorAutomation {
    constructor(bot) {
        this.bot = bot;
        this.db = new Database();
        this.checkInterval = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
        this.adminChatId = process.env.ADMIN_CHAT_ID; // ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤...');
        this.startAutomation();
    }

    startAutomation() {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        setInterval(() => {
            this.performAutomatedTasks();
        }, this.checkInterval);

        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        setTimeout(() => {
            this.performAutomatedTasks();
        }, 5 * 60 * 1000);

        console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞');
    }

    async performAutomatedTasks() {
        console.log('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...');
        
        try {
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–∞–Ω–∞–ª—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            await this.checkExpiredTimeChannels();
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã, –¥–æ—Å—Ç–∏–≥—à–∏–µ —Ü–µ–ª–∏ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            await this.checkCompletedTargetChannels();
            
            // 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∫–∞–Ω–∞–ª–æ–≤
            await this.updateChannelPriorities();
            
            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            await this.checkLowActivityChannels();
            
            // 5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            await this.autoRenewEffectiveChannels();
            
            console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
            await this.notifyAdmin('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: ' + error.message);
        }
    }

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    async checkExpiredTimeChannels() {
        try {
            const expiredChannels = await this.db.all(`
                SELECT * FROM partner_channels 
                WHERE placement_type = 'time' 
                AND is_active = 1 
                AND datetime(created_at, '+' || placement_duration || ' hours') <= datetime('now')
            `);

            for (const channel of expiredChannels) {
                await this.deactivateChannel(channel, 'time_expired');
                
                const stats = await this.getChannelStats(channel.id);
                await this.notifyAdmin(
                    `‚è∞ –ö–∞–Ω–∞–ª @${channel.channel_username} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏\n` +
                    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.subscriptions} –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞ ${channel.placement_duration}—á\n` +
                    `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–≤–µ–∑–¥: ${stats.totalStarsGiven}`
                );
            }

            if (expiredChannels.length > 0) {
                console.log(`‚è∞ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${expiredChannels.length} –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:', error);
        }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤, –¥–æ—Å—Ç–∏–≥—à–∏—Ö —Ü–µ–ª–∏
    async checkCompletedTargetChannels() {
        try {
            const completedChannels = await this.db.all(`
                SELECT * FROM partner_channels 
                WHERE placement_type = 'target' 
                AND is_active = 1 
                AND current_subscribers >= subscribers_target
            `);

            for (const channel of completedChannels) {
                await this.deactivateChannel(channel, 'target_reached');
                
                const duration = await this.getChannelDuration(channel.id);
                await this.notifyAdmin(
                    `üéØ –ö–∞–Ω–∞–ª @${channel.channel_username} –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ ${channel.subscribers_target} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n` +
                    `‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}\n` +
                    `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–≤–µ–∑–¥: ${channel.current_subscribers * channel.reward_stars}`
                );
            }

            if (completedChannels.length > 0) {
                console.log(`üéØ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${completedChannels.length} –∫–∞–Ω–∞–ª–æ–≤, –¥–æ—Å—Ç–∏–≥—à–∏—Ö —Ü–µ–ª–∏`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Ü–µ–ª–∏:', error);
        }
    }

    // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
    async updateChannelPriorities() {
        try {
            const activeChannels = await this.db.all(`
                SELECT * FROM partner_channels 
                WHERE is_active = 1
                ORDER BY created_at DESC
            `);

            for (const channel of activeChannels) {
                const stats = await this.getChannelStats(channel.id);
                const priority = await this.calculateChannelPriority(channel, stats);
                
                await this.db.run(`
                    UPDATE partner_channels 
                    SET priority_score = ? 
                    WHERE id = ?
                `, [priority, channel.id]);
            }

            console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è ${activeChannels.length} –∫–∞–Ω–∞–ª–æ–≤`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:', error);
        }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    async checkLowActivityChannels() {
        try {
            const lowActivityChannels = await this.db.all(`
                SELECT pc.*, 
                       COUNT(ucs.id) as subscription_count,
                       (julianday('now') - julianday(pc.created_at)) * 24 as hours_active
                FROM partner_channels pc
                LEFT JOIN user_channel_subscriptions ucs ON pc.id = ucs.channel_id 
                    AND ucs.created_at >= datetime('now', '-24 hours')
                WHERE pc.is_active = 1 
                    AND pc.created_at <= datetime('now', '-6 hours')
                GROUP BY pc.id
                HAVING subscription_count < 2 AND hours_active >= 6
            `);

            for (const channel of lowActivityChannels) {
                // –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏ –ª–∏ —É–∂–µ –æ–± —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ
                const lastNotification = await this.getLastNotification(channel.id, 'low_activity');
                if (lastNotification && (Date.now() - lastNotification) < 12 * 60 * 60 * 1000) {
                    continue; // –£–≤–µ–¥–æ–º–ª—è–ª–∏ –º–µ–Ω–µ–µ 12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
                }

                await this.notifyAdmin(
                    `üìâ –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ @${channel.channel_username}\n` +
                    `üìä –ü–æ–¥–ø–∏—Å–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: ${channel.subscription_count}\n` +
                    `‚è± –ê–∫—Ç–∏–≤–µ–Ω —É–∂–µ: ${Math.round(channel.hours_active)}—á\n` +
                    `üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª`
                );

                await this.recordNotification(channel.id, 'low_activity');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
        }
    }

    // 5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    async autoRenewEffectiveChannels() {
        try {
            const effectiveChannels = await this.db.all(`
                SELECT pc.*, 
                       COUNT(ucs.id) as total_subscriptions,
                       (julianday('now') - julianday(pc.created_at)) * 24 as hours_active
                FROM partner_channels pc
                LEFT JOIN user_channel_subscriptions ucs ON pc.id = ucs.channel_id
                WHERE pc.placement_type = 'time' 
                    AND pc.is_active = 1
                    AND datetime(pc.created_at, '+' || pc.placement_duration || ' hours') <= datetime('now', '+2 hours')
                    AND pc.auto_renewal = 1
                GROUP BY pc.id
                HAVING total_subscriptions >= 10 OR (total_subscriptions * 1.0 / hours_active) >= 0.5
            `);

            for (const channel of effectiveChannels) {
                // –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –Ω–∞ —Ç–∞–∫–æ–π –∂–µ –ø–µ—Ä–∏–æ–¥
                await this.db.run(`
                    UPDATE partner_channels 
                    SET created_at = datetime('now'),
                        renewal_count = COALESCE(renewal_count, 0) + 1
                    WHERE id = ?
                `, [channel.id]);

                await this.notifyAdmin(
                    `üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª @${channel.channel_username}\n` +
                    `üìä –ü–æ–¥–ø–∏—Å–æ–∫: ${channel.total_subscriptions}\n` +
                    `üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–π: ${(channel.renewal_count || 0) + 1}`
                );
            }

            if (effectiveChannels.length > 0) {
                console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–æ ${effectiveChannels.length} —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:', error);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async deactivateChannel(channel, reason) {
        await this.db.run(`
            UPDATE partner_channels 
            SET is_active = 0, 
                deactivation_reason = ?,
                deactivated_at = datetime('now')
            WHERE id = ?
        `, [reason, channel.id]);
    }

    async getChannelStats(channelId) {
        const stats = await this.db.get(`
            SELECT 
                COUNT(*) as subscriptions,
                SUM(stars_earned) as totalStarsGiven,
                MIN(created_at) as firstSubscription,
                MAX(created_at) as lastSubscription
            FROM user_channel_subscriptions 
            WHERE channel_id = ?
        `, [channelId]);

        return stats || { subscriptions: 0, totalStarsGiven: 0 };
    }

    async getChannelDuration(channelId) {
        const channel = await this.db.get(`
            SELECT created_at FROM partner_channels WHERE id = ?
        `, [channelId]);

        if (!channel) return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        const startTime = new Date(channel.created_at);
        const endTime = new Date();
        const diffHours = Math.round((endTime - startTime) / (1000 * 60 * 60));
        
        if (diffHours < 24) {
            return `${diffHours}—á`;
        } else {
            const days = Math.floor(diffHours / 24);
            const hours = diffHours % 24;
            return `${days}–¥ ${hours}—á`;
        }
    }

    async calculateChannelPriority(channel, stats) {
        // –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∫–∞–Ω–∞–ª–∞
        let priority = 50; // –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

        // –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        const hoursSinceCreated = (Date.now() - new Date(channel.created_at)) / (1000 * 60 * 60);
        const subscriptionsPerHour = stats.subscriptions / Math.max(hoursSinceCreated, 1);
        priority += subscriptionsPerHour * 10;

        // –ë–æ–Ω—É—Å –∑–∞ –≥–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if (channel.is_hot_offer) {
            priority += 20;
        }

        // –®—Ç—Ä–∞—Ñ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if (subscriptionsPerHour < 0.1 && hoursSinceCreated > 12) {
            priority -= 30;
        }

        // –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫—É—é –Ω–∞–≥—Ä–∞–¥—É (–ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        if (channel.reward_stars >= 100) {
            priority += 15;
        }

        return Math.max(0, Math.min(100, Math.round(priority)));
    }

    async getLastNotification(channelId, type) {
        const result = await this.db.get(`
            SELECT created_at FROM admin_notifications 
            WHERE channel_id = ? AND notification_type = ? 
            ORDER BY created_at DESC LIMIT 1
        `, [channelId, type]);

        return result ? new Date(result.created_at).getTime() : null;
    }

    async recordNotification(channelId, type) {
        await this.db.run(`
            INSERT INTO admin_notifications (channel_id, notification_type, created_at)
            VALUES (?, ?, datetime('now'))
        `, [channelId, type]);
    }

    async notifyAdmin(message) {
        if (!this.adminChatId || !this.bot) {
            console.log('üì¢ Admin notification:', message);
            return;
        }

        try {
            await this.bot.sendMessage(this.adminChatId, 
                `ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤</b>\n\n${message}`, 
                { parse_mode: 'HTML' }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error);
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    async getAutomationStats() {
        try {
            const stats = await this.db.get(`
                SELECT 
                    COUNT(*) as totalChannels,
                    COUNT(CASE WHEN is_active = 1 THEN 1 END) as activeChannels,
                    COUNT(CASE WHEN is_active = 0 AND deactivation_reason = 'time_expired' THEN 1 END) as expiredChannels,
                    COUNT(CASE WHEN is_active = 0 AND deactivation_reason = 'target_reached' THEN 1 END) as completedChannels,
                    COUNT(CASE WHEN auto_renewal = 1 THEN 1 END) as autoRenewalChannels
                FROM partner_channels
            `);

            return stats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
            return null;
        }
    }

    async enableAutoRenewal(channelId) {
        await this.db.run(`
            UPDATE partner_channels 
            SET auto_renewal = 1 
            WHERE id = ?
        `, [channelId]);
    }

    async disableAutoRenewal(channelId) {
        await this.db.run(`
            UPDATE partner_channels 
            SET auto_renewal = 0 
            WHERE id = ?
        `, [channelId]);
    }
}

module.exports = SponsorAutomation;