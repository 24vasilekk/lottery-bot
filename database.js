// database.js - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è lottery-bot
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

class Database {
    constructor() {
        this.db = null;
        this.dbPath = path.join(__dirname, 'lottery_bot.db');
        this.init();
    }

    init() {
        return new Promise((resolve, reject) => {
            this.db = new sqlite3.Database(this.dbPath, (err) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
                    reject(err);
                } else {
                    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
                    this.createTables().then(resolve).catch(reject);
                }
            });
        });
    }

    createTables() {
        return new Promise((resolve, reject) => {
            const tables = [
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–û–ë–ù–û–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞–Ω–∏–π)
                `CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_id INTEGER UNIQUE NOT NULL,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    stars INTEGER DEFAULT 20,
                    total_stars_earned INTEGER DEFAULT 20,
                    referrals INTEGER DEFAULT 0,
                    total_spins INTEGER DEFAULT 0,
                    prizes_won INTEGER DEFAULT 0,
                    available_friend_spins INTEGER DEFAULT 1,
                    join_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                    last_activity DATETIME DEFAULT CURRENT_TIMESTAMP,
                    last_daily_reset DATE, -- –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                    daily_streak INTEGER DEFAULT 0, -- —Å–µ—Ä–∏—è –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
                    referrer_id INTEGER, -- –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    is_referrer_verified BOOLEAN DEFAULT 0, -- –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ 2 –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    tasks_ban_until DATETIME, -- –¥–æ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è
                    violation_count INTEGER DEFAULT 0, -- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫
                    is_subscribed_channel1 BOOLEAN DEFAULT 0,
                    is_subscribed_channel2 BOOLEAN DEFAULT 0,
                    is_subscribed_dolcedeals BOOLEAN DEFAULT 0,
                    is_active BOOLEAN DEFAULT 1,
                    completed_tasks TEXT DEFAULT '[]', -- üÜï JSON –º–∞—Å—Å–∏–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                    task_statuses TEXT DEFAULT '{}', -- üÜï JSON –æ–±—ä–µ–∫—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞–Ω–∏–π (pending/checking/completed)
                    FOREIGN KEY(referrer_id) REFERENCES users(id)
                )`,

                // –ü—Ä–∏–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                `CREATE TABLE IF NOT EXISTS user_prizes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    prize_type TEXT NOT NULL,
                    prize_name TEXT NOT NULL,
                    prize_value INTEGER,
                    is_claimed BOOLEAN DEFAULT 0,
                    won_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                    claimed_date DATETIME,
                    is_posted_to_channel BOOLEAN DEFAULT 0,
                    posted_to_channel_date DATETIME,
                    FOREIGN KEY(user_id) REFERENCES users(id)
                )`,

                // –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
                `CREATE TABLE IF NOT EXISTS spin_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    prize_id INTEGER,
                    spin_type TEXT DEFAULT 'normal', -- normal, mega, friend
                    won_prize TEXT,
                    spin_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY(user_id) REFERENCES users(id)
                )`,

                // –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
                `CREATE TABLE IF NOT EXISTS user_tasks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    task_id TEXT NOT NULL,
                    task_type TEXT NOT NULL, -- daily, friends, active
                    reward_type TEXT,
                    reward_amount INTEGER,
                    completed_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY(user_id) REFERENCES users(id),
                    UNIQUE(user_id, task_id)
                )`,

                // –†–µ—Ñ–µ—Ä–∞–ª—ã
                `CREATE TABLE IF NOT EXISTS referrals (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    referrer_id INTEGER,
                    referred_id INTEGER,
                    referral_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY(referrer_id) REFERENCES users(id),
                    FOREIGN KEY(referred_id) REFERENCES users(id),
                    UNIQUE(referrer_id, referred_id)
                )`,

                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
                `CREATE TABLE IF NOT EXISTS channels (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    channel_username TEXT UNIQUE NOT NULL,
                    channel_id TEXT,
                    channel_name TEXT NOT NULL,
                    is_required BOOLEAN DEFAULT 1,
                    created_date DATETIME DEFAULT CURRENT_TIMESTAMP
                )`,

                // –õ–∏–¥–µ—Ä–±–æ—Ä–¥ (–∫–µ—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
                `CREATE TABLE IF NOT EXISTS leaderboard (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    first_name TEXT,
                    total_stars INTEGER,
                    total_prizes INTEGER,
                    rank_position INTEGER,
                    last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY(user_id) REFERENCES users(id)
                )`,

                // –ö–∞–Ω–∞–ª—ã-–ø–∞—Ä—Ç–Ω–µ—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞–Ω–∏–π
                `CREATE TABLE IF NOT EXISTS partner_channels (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    channel_username TEXT NOT NULL, -- –±–µ–∑ @
                    channel_id TEXT, -- –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
                    channel_name TEXT NOT NULL,
                    reward_stars INTEGER DEFAULT 50,
                    placement_type TEXT DEFAULT 'time', -- 'time' –∏–ª–∏ 'target'
                    placement_duration INTEGER, -- —á–∞—Å—ã –¥–ª—è time —Ç–∏–ø–∞
                    target_subscribers INTEGER, -- —Ü–µ–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è target —Ç–∏–ø–∞
                    current_subscribers INTEGER DEFAULT 0, -- —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                    is_active BOOLEAN DEFAULT 1,
                    is_hot_offer BOOLEAN DEFAULT 0, -- –≥–æ—Ä—è—á–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    hot_offer_multiplier REAL DEFAULT 2.0, -- –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –≥–æ—Ä—è—á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    auto_renewal BOOLEAN DEFAULT 0, -- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
                    priority_score INTEGER DEFAULT 50, -- –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (0-100)
                    renewal_count INTEGER DEFAULT 0, -- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–π
                    deactivation_reason TEXT, -- –ø—Ä–∏—á–∏–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    deactivated_at DATETIME, -- –≤—Ä–µ–º—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                    start_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                    end_date DATETIME, -- —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    UNIQUE(channel_username)
                )`,

                // –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–Ω–∞–ª—ã-–ø–∞—Ä—Ç–Ω–µ—Ä—ã
                `CREATE TABLE IF NOT EXISTS user_channel_subscriptions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    channel_id INTEGER,
                    subscribed_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                    unsubscribed_date DATETIME,
                    is_active BOOLEAN DEFAULT 1,
                    is_verified BOOLEAN DEFAULT 0, -- –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –ª–∏ —á–µ—Ä–µ–∑ API
                    stars_earned INTEGER DEFAULT 0,
                    FOREIGN KEY(user_id) REFERENCES users(id),
                    FOREIGN KEY(channel_id) REFERENCES partner_channels(id),
                    UNIQUE(user_id, channel_id)
                )`,

                // –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —à—Ç—Ä–∞—Ñ–æ–≤)
                `CREATE TABLE IF NOT EXISTS subscription_violations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    channel_id INTEGER,
                    violation_type TEXT, -- 'early_unsubscribe', 'fake_subscription'
                    violation_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                    penalty_duration INTEGER DEFAULT 24, -- —á–∞—Å—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    is_active BOOLEAN DEFAULT 1,
                    FOREIGN KEY(user_id) REFERENCES users(id),
                    FOREIGN KEY(channel_id) REFERENCES partner_channels(id)
                )`,

                // üÜï –ù–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞–Ω–∏–π
                `CREATE TABLE IF NOT EXISTS subscription_checks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    channel_username TEXT NOT NULL,
                    is_subscribed INTEGER NOT NULL, -- 0 –∏–ª–∏ 1 (–±—É–ª–µ–≤–æ –∫–∞–∫ INTEGER)
                    check_date TEXT NOT NULL, -- ISO —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã
                    task_id TEXT, -- ID –∑–∞–¥–∞–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    check_result TEXT, -- –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
                    FOREIGN KEY (user_id) REFERENCES users (telegram_id)
                )`,

                // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (—à–∞–±–ª–æ–Ω—ã)
                `CREATE TABLE IF NOT EXISTS daily_tasks_templates (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    task_key TEXT UNIQUE NOT NULL, -- 'daily_login', 'daily_spins_3'
                    task_name TEXT NOT NULL,
                    task_description TEXT,
                    reward_stars INTEGER DEFAULT 0,
                    reward_spins INTEGER DEFAULT 0,
                    required_count INTEGER DEFAULT 1, -- —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
                    task_type TEXT DEFAULT 'daily', -- daily, achievement
                    is_active BOOLEAN DEFAULT 1
                )`,

                // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º
                `CREATE TABLE IF NOT EXISTS user_daily_progress (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    task_key TEXT,
                    progress_date DATE, -- YYYY-MM-DD –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                    current_progress INTEGER DEFAULT 0,
                    is_completed BOOLEAN DEFAULT 0,
                    completed_date DATETIME,
                    stars_earned INTEGER DEFAULT 0,
                    spins_earned INTEGER DEFAULT 0,
                    FOREIGN KEY(user_id) REFERENCES users(id),
                    UNIQUE(user_id, task_key, progress_date)
                )`,

                // –ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∞–∫—Ç–∏–≤–Ω—ã–µ)
                `CREATE TABLE IF NOT EXISTS hot_offers (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    channel_id INTEGER,
                    multiplier REAL DEFAULT 2.0,
                    start_time DATETIME DEFAULT CURRENT_TIMESTAMP,
                    end_time DATETIME,
                    max_participants INTEGER,
                    current_participants INTEGER DEFAULT 0,
                    notification_sent BOOLEAN DEFAULT 0,
                    is_active BOOLEAN DEFAULT 1,
                    FOREIGN KEY(channel_id) REFERENCES partner_channels(id)
                )`,

                // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Telegram Stars
                `CREATE TABLE IF NOT EXISTS stars_transactions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    amount INTEGER NOT NULL,
                    transaction_type TEXT NOT NULL, -- 'deposit', 'bonus', 'refund'
                    telegram_payment_id TEXT, -- telegram_payment_charge_id
                    provider_payment_id TEXT, -- provider_payment_charge_id (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    currency TEXT DEFAULT 'XTR', -- Telegram Stars = XTR
                    total_amount INTEGER, -- —Å—É–º–º–∞ –≤ —Å–∞–º—ã—Ö –º–µ–ª–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã
                    status TEXT DEFAULT 'completed', -- completed, pending, failed, refunded
                    transaction_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                    metadata TEXT, -- –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
                    FOREIGN KEY(user_id) REFERENCES users(id)
                )`,

                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—É–ª–µ—Ç–æ–∫
                `CREATE TABLE IF NOT EXISTS wheel_settings (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    wheel_type TEXT NOT NULL UNIQUE, -- 'mega' –∏–ª–∏ 'normal'
                    settings_data TEXT NOT NULL, -- JSON —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–∑–æ–≤
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )`,

                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                `CREATE TABLE IF NOT EXISTS admin_notifications (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    channel_id INTEGER,
                    notification_type TEXT NOT NULL, -- 'low_activity', 'expired', 'target_reached'
                    message TEXT,
                    is_read BOOLEAN DEFAULT 0,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY(channel_id) REFERENCES partner_channels(id)
                )`,

                // –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤)
                `CREATE TABLE IF NOT EXISTS subscription_rewards (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    channel_id INTEGER NOT NULL,
                    stars_earned INTEGER NOT NULL DEFAULT 20,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY(user_id) REFERENCES users(id),
                    FOREIGN KEY(channel_id) REFERENCES partner_channels(id)
                )`,

                // –î–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
                `CREATE TABLE IF NOT EXISTS admin_actions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    action_type TEXT NOT NULL, -- 'manual_spin', 'add_stars', 'change_settings', etc.
                    target_user_id INTEGER,
                    details TEXT, -- JSON —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    admin_id INTEGER,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY(target_user_id) REFERENCES users(id)
                )`
            ];

            let completed = 0;
            const totalTables = tables.length;

            console.log(`üî® –°–æ–∑–¥–∞–Ω–∏–µ ${totalTables} —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...`);

            tables.forEach((sql, index) => {
                this.db.run(sql, (err) => {
                    if (err) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ${index + 1}:`, err);
                        reject(err);
                    } else {
                        completed++;
                        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${completed}/${totalTables} —Å–æ–∑–¥–∞–Ω–∞`);
                        
                        if (completed === totalTables) {
                            console.log('üéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
                            
                            // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
                            this.createBasicIndexes()
                                .then(() => {
                                    console.log('üìä –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
                                    return this.insertDefaultChannels();
                                })
                                .then(() => {
                                    console.log('üîß –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
                                    resolve();
                                })
                                .catch((error) => {
                                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º:', error);
                                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                                    this.insertDefaultChannels()
                                        .then(resolve)
                                        .catch(reject);
                                });
                        }
                    }
                });
            });
        });
    }

    // üÜï –£–ü–†–û–©–ï–ù–ù–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
    createBasicIndexes() {
        return new Promise((resolve) => {
            const basicIndexes = [
                'CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users (telegram_id)',
                'CREATE INDEX IF NOT EXISTS idx_subscription_checks_user_id ON subscription_checks (user_id)',
                'CREATE INDEX IF NOT EXISTS idx_subscription_checks_channel ON subscription_checks (channel_username)',
                'CREATE INDEX IF NOT EXISTS idx_user_tasks_user_id ON user_tasks (user_id)'
            ];

            let completed = 0;
            const totalIndexes = basicIndexes.length;

            console.log(`üìä –°–æ–∑–¥–∞–Ω–∏–µ ${totalIndexes} –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...`);

            basicIndexes.forEach((sql, index) => {
                this.db.run(sql, (err) => {
                    if (err) {
                        console.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ ${index + 1}:`, err.message);
                    }
                    
                    completed++;
                    if (completed === totalIndexes) {
                        console.log(`‚úÖ –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: ${totalIndexes}`);
                        resolve();
                    }
                });
            });
        });
    }

    insertDefaultChannels() {
        return new Promise((resolve, reject) => {
            const channels = [
                ['kosmetichka_channel', '@kosmetichka_channel', 'Kosmetichka Channel'],
                ['kosmetichka_instagram', '@kosmetichka', 'Kosmetichka Instagram'],
                ['dolcedeals', '@dolcedeals', 'Dolce Deals']
            ];

            let completed = 0;
            channels.forEach(([username, id, name]) => {
                this.db.run(
                    'INSERT OR IGNORE INTO channels (channel_username, channel_id, channel_name) VALUES (?, ?, ?)',
                    [username, id, name],
                    (err) => {
                        if (err) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', err);
                        }
                        completed++;
                        if (completed === channels.length) {
                            console.log('‚úÖ –ö–∞–Ω–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');
                            this.insertDefaultDailyTasks().then(resolve).catch(reject);
                        }
                    }
                );
            });
        });
    }

    insertDefaultDailyTasks() {
        return new Promise((resolve, reject) => {
            const dailyTasks = [
                // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
                ['daily_login', '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥', '–ó–∞–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 5, 0, 1, 'daily'],
                ['daily_spins_3', '3 –ø—Ä–æ–∫—Ä—É—Ç–∫–∏', '–°–¥–µ–ª–∞—Ç—å 3 –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ä—É–ª–µ—Ç–∫–∏', 10, 0, 3, 'daily'],
                ['daily_spins_10', '10 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫', '–°–¥–µ–ª–∞—Ç—å 10 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ —Ä—É–ª–µ—Ç–∫–∏', 25, 0, 10, 'daily'],
                ['daily_invite_friend', '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –æ–¥–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞', 20, 0, 1, 'daily'],
                ['daily_hot_offer', '–ì–æ—Ä—è—á–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–í—ã–ø–æ–ª–Ω–∏—Ç—å –ª—é–±–æ–µ –≥–æ—Ä—è—á–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', 30, 0, 1, 'daily'],

                // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                ['achievement_first_sub', '–ü–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞', '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª-–ø–∞—Ä—Ç–Ω–µ—Ä', 10, 0, 1, 'achievement'],
                ['achievement_subs_5', '5 –ø–æ–¥–ø–∏—Å–æ–∫', '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ 5 –∫–∞–Ω–∞–ª–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', 30, 0, 5, 'achievement'],
                ['achievement_subs_10', '10 –ø–æ–¥–ø–∏—Å–æ–∫', '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ 10 –∫–∞–Ω–∞–ª–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', 50, 0, 10, 'achievement'],
                ['achievement_subs_25', '25 –ø–æ–¥–ø–∏—Å–æ–∫', '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ 25 –∫–∞–Ω–∞–ª–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', 100, 0, 25, 'achievement'],
                ['achievement_subs_50', '50 –ø–æ–¥–ø–∏—Å–æ–∫', '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ 50 –∫–∞–Ω–∞–ª–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', 250, 0, 50, 'achievement'],
                ['achievement_subs_100', '100 –ø–æ–¥–ø–∏—Å–æ–∫', '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ 100 –∫–∞–Ω–∞–ª–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', 500, 0, 100, 'achievement'],
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ
                ['daily_power_hour', 'Power Hour', '–ó–∞–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è Power Hour', 15, 0, 1, 'daily']
            ];

            let completed = 0;
            dailyTasks.forEach(([key, name, description, stars, spins, count, type]) => {
                this.db.run(
                    `INSERT OR IGNORE INTO daily_tasks_templates 
                     (task_key, task_name, task_description, reward_stars, reward_spins, required_count, task_type) 
                     VALUES (?, ?, ?, ?, ?, ?, ?)`,
                    [key, name, description, stars, spins, count, type],
                    (err) => {
                        if (err) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', err);
                        }
                        completed++;
                        if (completed === dailyTasks.length) {
                            console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã');
                            resolve();
                        }
                    }
                );
            });
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–¥–∞–Ω–∏—è—Ö
    async getUserWithTasks(userId) {
        return new Promise((resolve, reject) => {
            this.db.get(
                'SELECT * FROM users WHERE telegram_id = ?',
                [userId],
                (err, row) => {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
                        reject(err);
                    } else if (row) {
                        // –ü–∞—Ä—Å–∏–º JSON –ø–æ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                        try {
                            row.completed_tasks = JSON.parse(row.completed_tasks || '[]');
                            row.task_statuses = JSON.parse(row.task_statuses || '{}');
                            console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
                                stars: row.stars,
                                completedTasks: row.completed_tasks.length,
                                taskStatuses: Object.keys(row.task_statuses).length
                            });
                        } catch (parseError) {
                            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', parseError);
                            row.completed_tasks = [];
                            row.task_statuses = {};
                        }
                        resolve(row);
                    } else {
                        resolve(null);
                    }
                }
            );
        });
    }

    // –í –∫–ª–∞—Å—Å Database –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ (–ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤):

    async initializeRealWheelChances() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const existingNormal = await this.getWheelSettings('normal');
            const existingMega = await this.getWheelSettings('mega');

            // –û–ë–´–ß–ù–ê–Ø –†–£–õ–ï–¢–ö–ê - –†–ï–ê–õ–¨–ù–´–ï –®–ê–ù–°–´ (–Ω–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ!)
            if (!existingNormal) {
                const realNormalChances = {
                    prizes: [
                        {
                            id: 'empty',
                            name: '–ü—É—Å—Ç–æ (—á–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª)',
                            type: 'empty',
                            probability: 94, // –†–ï–ê–õ–¨–ù–û 940 –∏–∑ 1000 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
                            description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!'
                        },
                        {
                            id: 'stars20',
                            name: '20 –∑–≤–µ–∑–¥',
                            type: 'stars',
                            probability: 5, // –†–ï–ê–õ–¨–ù–û 50 –∏–∑ 1000 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
                            description: '–ü–æ–ª—É—á–µ–Ω–æ 20 –∑–≤–µ–∑–¥',
                            value: 20
                        },
                        {
                            id: 'cert300',
                            name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 300‚ÇΩ –ó–Ø',
                            type: 'certificate',
                            probability: 1, // –†–ï–ê–õ–¨–ù–û 10 –∏–∑ 1000 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
                            description: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 300 —Ä—É–±–ª–µ–π –≤ –ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ',
                            value: 300
                        }
                    ]
                };
                
                await this.saveWheelSettings('normal', realNormalChances);
                console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –†–ï–ê–õ–¨–ù–´–ï —à–∞–Ω—Å—ã –æ–±—ã—á–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏');
            }

            // –ú–ï–ì–ê-–†–£–õ–ï–¢–ö–ê - –ø—Ä–∏–∑—ã 1:10000
            if (!existingMega) {
                const realMegaChances = {
                    prizes: [
                        {
                            id: 'empty',
                            name: '–ü—É—Å—Ç–æ (—á–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª)',
                            type: 'empty', 
                            probability: 99.97, // –ü–æ—á—Ç–∏ –≤—Å–µ
                            description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!'
                        },
                        {
                            id: 'iphone15',
                            name: 'iPhone 15',
                            type: 'mega_prize',
                            probability: 0.01, // 1:10000
                            description: 'iPhone 15 128GB',
                            value: 80000
                        },
                        {
                            id: 'macbook',
                            name: 'MacBook Air',
                            type: 'mega_prize',
                            probability: 0.01, // 1:10000
                            description: 'MacBook Air M2',
                            value: 120000
                        },
                        {
                            id: 'cert10000',
                            name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 10000‚ÇΩ',
                            type: 'mega_certificate',
                            probability: 0.01, // 1:10000
                            description: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 10000 —Ä—É–±–ª–µ–π',
                            value: 10000
                        }
                    ]
                };
                
                await this.saveWheelSettings('mega', realMegaChances);
                console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –†–ï–ê–õ–¨–ù–´–ï —à–∞–Ω—Å—ã –º–µ–≥–∞-—Ä—É–ª–µ—Ç–∫–∏');
            }

            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —à–∞–Ω—Å–æ–≤:', error);
            return false;
        }
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===

    async getUser(telegramId) {
        return new Promise((resolve, reject) => {
            this.db.get(
                'SELECT * FROM users WHERE telegram_id = ?',
                [telegramId],
                (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                }
            );
        });
    }

    async createUser(userData) {
        return new Promise((resolve, reject) => {
            const { telegram_id, username, first_name, last_name } = userData;
            
            // –í–ê–ñ–ù–û: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 20 –∑–≤–µ–∑–¥!
            this.db.run(
                `INSERT INTO users (telegram_id, username, first_name, last_name, stars, total_stars_earned) 
                VALUES (?, ?, ?, ?, 20, 20)`,
                [telegram_id, username, first_name, last_name],
                function(err) {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
                        reject(err);
                    } else {
                        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegram_id} —Å–æ–∑–¥–∞–Ω —Å –±–∞–ª–∞–Ω—Å–æ–º 20 –∑–≤–µ–∑–¥`);
                        resolve(this.lastID);
                    }
                }
            );
        });
    }

    // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å Database –≤ database.js

    async updateUserStars(userId, newBalance) {
        return new Promise((resolve, reject) => {
            // –í–ê–ñ–ù–û: —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ newBalance —ç—Ç–æ —á–∏—Å–ª–æ
            const stars = parseInt(newBalance) || 0;
            
            this.db.run(
                'UPDATE users SET stars = ?, last_activity = CURRENT_TIMESTAMP WHERE telegram_id = ?',
                [stars, userId],
                function(err) {
                    if (err) {
                        console.error(`‚ùå –ë–î: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${userId}:`, err);
                        reject(err);
                    } else {
                        console.log(`‚úÖ –ë–î: –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${stars} –∑–≤–µ–∑–¥`);
                        resolve({ stars: stars });
                    }
                }
            );
        });
    }

    async addUserStars(userId, amount) {
        return new Promise((resolve, reject) => {
            const starsToAdd = parseInt(amount) || 0;
            
            this.db.run(
                'UPDATE users SET stars = stars + ?, total_stars_earned = total_stars_earned + ?, last_activity = CURRENT_TIMESTAMP WHERE telegram_id = ?',
                [starsToAdd, Math.max(0, starsToAdd), userId],
                function(err) {
                    if (err) {
                        console.error(`‚ùå –ë–î: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥ –¥–ª—è ${userId}:`, err);
                        reject(err);
                    } else {
                        console.log(`‚úÖ –ë–î: –î–æ–±–∞–≤–ª–µ–Ω–æ ${starsToAdd} –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
                        resolve({ added: starsToAdd });
                    }
                }
            );
        });
    }

    async updateUserActivity(telegramId) {
        return new Promise((resolve, reject) => {
            this.db.run(
                'UPDATE users SET last_activity = CURRENT_TIMESTAMP WHERE telegram_id = ?',
                [telegramId],
                (err) => {
                    if (err) reject(err);
                    else resolve();
                }
            );
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    async updateUserCompletedTasks(userId, completedTasks) {
        return new Promise((resolve, reject) => {
            const tasksJson = JSON.stringify(completedTasks);
            
            this.db.run(
                'UPDATE users SET completed_tasks = ?, last_activity = CURRENT_TIMESTAMP WHERE telegram_id = ?',
                [tasksJson, userId],
                function(err) {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', err);
                        reject(err);
                    } else {
                        console.log(`üìù –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (${completedTasks.length} –∑–∞–¥–∞–Ω–∏–π)`);
                        resolve(this.changes);
                    }
                }
            );
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞–Ω–∏–π  
    async updateUserTaskStatuses(userId, taskStatuses) {
        return new Promise((resolve, reject) => {
            const statusesJson = JSON.stringify(taskStatuses);
            
            this.db.run(
                'UPDATE users SET task_statuses = ?, last_activity = CURRENT_TIMESTAMP WHERE telegram_id = ?',
                [statusesJson, userId],
                function(err) {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞–Ω–∏–π:', err);
                        reject(err);
                    } else {
                        console.log(`üìä –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (${Object.keys(taskStatuses).length} —Å—Ç–∞—Ç—É—Å–æ–≤)`);
                        resolve(this.changes);
                    }
                }
            );
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    async logSubscriptionCheck(userId, channelUsername, isSubscribed, taskId = null) {
        return new Promise((resolve, reject) => {
            const timestamp = new Date().toISOString();
            const checkResult = isSubscribed ? 'success' : 'not_subscribed';
            
            this.db.run(
                `INSERT INTO subscription_checks 
                (user_id, channel_username, is_subscribed, check_date, task_id, check_result) 
                VALUES (?, ?, ?, ?, ?, ?)`,
                [userId, channelUsername, isSubscribed ? 1 : 0, timestamp, taskId, checkResult],
                function(err) {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', err);
                        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                        resolve();
                    } else {
                        console.log(`üìù –ó–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${userId} -> ${channelUsername} = ${isSubscribed}`);
                        resolve(this.lastID);
                    }
                }
            );
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
    async getSubscriptionHistory(userId, channelUsername = null, limit = 50) {
        return new Promise((resolve, reject) => {
            let query = 'SELECT * FROM subscription_checks WHERE user_id = ?';
            let params = [userId];
            
            if (channelUsername) {
                query += ' AND channel_username = ?';
                params.push(channelUsername);
            }
            
            query += ' ORDER BY check_date DESC LIMIT ?';
            params.push(limit);
            
            this.db.all(query, params, (err, rows) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫:', err);
                    reject(err);
                } else {
                    resolve(rows || []);
                }
            });
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ –∫–∞–Ω–∞–ª–∞–º
    async getChannelSubscriptionStats(channelUsername = null, days = 7) {
        return new Promise((resolve, reject) => {
            const dateLimit = new Date();
            dateLimit.setDate(dateLimit.getDate() - days);
            const dateLimitStr = dateLimit.toISOString();
            
            let query = `
                SELECT 
                    channel_username,
                    COUNT(*) as total_checks,
                    SUM(is_subscribed) as successful_checks,
                    COUNT(DISTINCT user_id) as unique_users,
                    DATE(check_date) as check_date
                FROM subscription_checks
                WHERE check_date >= ?
            `;
            let params = [dateLimitStr];

            if (channelUsername) {
                query += ' AND channel_username = ?';
                params.push(channelUsername);
            }

            query += ' GROUP BY channel_username, DATE(check_date) ORDER BY check_date DESC';

            this.db.all(query, params, (err, rows) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫:', err);
                    reject(err);
                } else {
                    resolve(rows || []);
                }
            });
        });
    }


    // üÜï –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ú–ï–¢–û–î –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–†–û–í–ï–†–û–ö
    async getSubscriptionStats(channelUsername = null) {
        return new Promise((resolve, reject) => {
            let query = `
                SELECT 
                    channel_username,
                    COUNT(*) as total_checks,
                    SUM(is_subscribed) as successful_checks,
                    COUNT(DISTINCT user_id) as unique_users,
                    DATE(check_date) as check_date
                FROM subscription_checks
            `;
            let params = [];

            if (channelUsername) {
                query += ' WHERE channel_username = ?';
                params.push(channelUsername);
            }

            query += ' GROUP BY channel_username, DATE(check_date) ORDER BY check_date DESC LIMIT 100';

            this.db.all(query, params, (err, rows) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫:', err);
                    reject(err);
                } else {
                    resolve(rows || []);
                }
            });
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≤–µ—Ä–æ–∫ (–¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è)
    async cleanOldSubscriptionChecks(daysToKeep = 30) {
        return new Promise((resolve, reject) => {
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
            const cutoffDateString = cutoffDate.toISOString();

            this.db.run(
                'DELETE FROM subscription_checks WHERE check_date < ?',
                [cutoffDateString],
                function(err) {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≤–µ—Ä–æ–∫:', err);
                        reject(err);
                    } else {
                        console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${this.changes} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≤–µ—Ä–æ–∫ (—Å—Ç–∞—Ä—à–µ ${daysToKeep} –¥–Ω–µ–π)`);
                        resolve(this.changes);
                    }
                }
            );
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUserData(userId, updateData) {
        return new Promise((resolve, reject) => {
            const fields = [];
            const values = [];
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (updateData.stars !== undefined) {
                fields.push('stars = ?');
                values.push(updateData.stars);
            }
            
            if (updateData.completed_tasks !== undefined) {
                fields.push('completed_tasks = ?');
                values.push(JSON.stringify(updateData.completed_tasks));
            }
            
            if (updateData.task_statuses !== undefined) {
                fields.push('task_statuses = ?');
                values.push(JSON.stringify(updateData.task_statuses));
            }
            
            if (updateData.total_stars_earned !== undefined) {
                fields.push('total_stars_earned = ?');
                values.push(updateData.total_stars_earned);
            }
            
            // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º last_activity
            fields.push('last_activity = CURRENT_TIMESTAMP');
            
            if (fields.length === 1) { // –¢–æ–ª—å–∫–æ last_activity
                resolve(0);
                return;
            }
            
            values.push(userId); // –¥–ª—è WHERE —É—Å–ª–æ–≤–∏—è
            
            const query = `UPDATE users SET ${fields.join(', ')} WHERE telegram_id = ?`;
            
            this.db.run(query, values, function(err) {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
                    reject(err);
                } else {
                    console.log(`üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã (${fields.length - 1} –ø–æ–ª–µ–π)`);
                    resolve(this.changes);
                }
            });
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async setUserStars(userId, stars) {
        return new Promise((resolve, reject) => {
            this.db.run(
                'UPDATE users SET stars = ?, last_activity = CURRENT_TIMESTAMP WHERE telegram_id = ?',
                [stars, userId],
                function(err) {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–≤–µ–∑–¥:', err);
                        reject(err);
                    } else {
                        console.log(`üí∞ –ó–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${stars}`);
                        resolve(this.changes);
                    }
                }
            );
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥ –∫ —Ç–µ–∫—É—â–µ–º—É –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async addUserStars(telegramId, amount) {
        return new Promise((resolve, reject) => {
            this.db.run(
                'UPDATE users SET stars = stars + ?, total_stars_earned = total_stars_earned + ?, last_activity = CURRENT_TIMESTAMP WHERE telegram_id = ?',
                [amount, amount, telegramId],
                function(err) {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥:', err);
                        reject(err);
                    } else {
                        console.log(`‚≠ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId} –¥–æ–±–∞–≤–ª–µ–Ω–æ ${amount} –∑–≤–µ–∑–¥`);
                        resolve(this.changes);
                    }
                }
            );
        });
    }

    async debugReferrals() {
        return new Promise((resolve, reject) => {
            this.db.all(`
                SELECT 
                    u.telegram_id,
                    u.first_name,
                    u.username,
                    u.referrals as referrals_field,
                    COUNT(r.referred_id) as actual_referrals_count
                FROM users u
                LEFT JOIN referrals r ON u.telegram_id = r.referrer_id
                WHERE u.is_active = 1
                GROUP BY u.telegram_id, u.first_name, u.username, u.referrals
                ORDER BY actual_referrals_count DESC
            `, (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–û–ö–†–£–¢–û–ö ===

    async addSpinHistory(telegramId, prizeData, spinType = 'normal') {
        return new Promise((resolve, reject) => {
            this.db.run(
                `INSERT INTO spin_history (user_id, prize_id, spin_type, won_prize) 
                 SELECT id, ?, ?, ? FROM users WHERE telegram_id = ?`,
                [prizeData.id, spinType, prizeData.name, telegramId],
                function(err) {
                    if (err) reject(err);
                    else resolve(this.lastID);
                }
            );
        });
    }

    async updateUserSpinStats(telegramId) {
        return new Promise((resolve, reject) => {
            this.db.run(
                'UPDATE users SET total_spins = total_spins + 1 WHERE telegram_id = ?',
                [telegramId],
                (err) => {
                    if (err) reject(err);
                    else resolve();
                }
            );
        });
    }

    async updateUserProfile(telegramId, profileData) {
        return new Promise((resolve, reject) => {
            const { username, first_name, last_name } = profileData;
            this.db.run(
                `UPDATE users SET 
                 username = ?, 
                 first_name = ?, 
                 last_name = ?,
                 last_activity = CURRENT_TIMESTAMP 
                 WHERE telegram_id = ?`,
                [username, first_name, last_name, telegramId],
                (err) => {
                    if (err) reject(err);
                    else resolve();
                }
            );
        });
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–ò–ó–û–í ===

    async addUserPrize(telegramId, prizeData) {
        return new Promise((resolve, reject) => {
            this.db.run(
                `INSERT INTO user_prizes (user_id, prize_type, prize_name, prize_value) 
                 SELECT id, ?, ?, ? FROM users WHERE telegram_id = ?`,
                [prizeData.type, prizeData.name, prizeData.value, telegramId],
                function(err) {
                    if (err) reject(err);
                    else {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–∑–æ–≤
                        resolve(this.lastID);
                    }
                }
            );
        });
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
    async addUserPrizeWithTransaction(telegramId, prizeData, spinType = 'normal') {
        return new Promise((resolve, reject) => {
            const db = this.db; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ this.db
            
            db.serialize(() => {
                db.run('BEGIN TRANSACTION');
                
                let prizeId = null;
                let completed = 0;
                const operations = 3; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                
                // 1. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑
                db.run(
                    `INSERT INTO user_prizes (user_id, prize_type, prize_name, prize_value) 
                     SELECT id, ?, ?, ? FROM users WHERE telegram_id = ?`,
                    [prizeData.type, prizeData.name, prizeData.value || 0, telegramId],
                    function(err) {
                        if (err) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞:', err);
                            db.run('ROLLBACK');
                            reject(err);
                            return;
                        }
                        prizeId = this.lastID;
                        completed++;
                        console.log(`‚úÖ –ü—Ä–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: ${prizeId}`);
                        if (completed === operations) db.run('COMMIT', () => resolve(prizeId));
                    }
                );
                
                // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–∑–æ–≤
                db.run(
                    'UPDATE users SET prizes_won = prizes_won + 1 WHERE telegram_id = ?',
                    [telegramId],
                    function(err) {
                        if (err) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–∑–æ–≤:', err);
                            db.run('ROLLBACK');
                            reject(err);
                            return;
                        }
                        completed++;
                        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                        if (completed === operations) db.run('COMMIT', () => resolve(prizeId));
                    }
                );
                
                // 3. –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
                db.run(
                    `INSERT INTO spin_history (user_id, prize_id, spin_type, won_prize) 
                     SELECT id, ?, ?, ? FROM users WHERE telegram_id = ?`,
                    [prizeId, spinType, prizeData.name, telegramId],
                    function(err) {
                        if (err) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é:', err);
                            db.run('ROLLBACK');
                            reject(err);
                            return;
                        }
                        completed++;
                        console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∞');
                        if (completed === operations) db.run('COMMIT', () => resolve(prizeId));
                    }
                );
            });
        });
    }

    async updateUserPrizeStats(telegramId) {
        return new Promise((resolve, reject) => {
            this.db.run(
                'UPDATE users SET prizes_won = prizes_won + 1 WHERE telegram_id = ?',
                [telegramId],
                (err) => {
                    if (err) reject(err);
                    else resolve();
                }
            );
        });
    }

    async getUserPrizes(telegramId) {
        return new Promise((resolve, reject) => {
            console.log(`üîç Database: –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–∑–æ–≤ –¥–ª—è telegram_id: ${telegramId}`);
            
            this.db.all(
                `SELECT up.* FROM user_prizes up
                 JOIN users u ON up.user_id = u.id
                 WHERE u.telegram_id = ?
                 ORDER BY up.won_date DESC`,
                [telegramId],
                (err, rows) => {
                    if (err) {
                        console.error('‚ùå Database: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤:', err);
                        reject(err);
                    } else {
                        console.log(`‚úÖ Database: –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–∑–æ–≤: ${rows ? rows.length : 0}`);
                        if (rows && rows.length > 0) {
                            console.log('üìã Database: –ü–µ—Ä–≤—ã–π –ø—Ä–∏–∑:', rows[0]);
                        }
                        resolve(rows || []);
                    }
                }
            );
        });
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –ó–ê–î–ê–ù–ò–ô ===

    async completeTask(telegramId, taskData) {
        return new Promise((resolve, reject) => {
            this.db.run(
                `INSERT OR IGNORE INTO user_tasks 
                 (user_id, task_id, task_type, reward_type, reward_amount)
                 SELECT id, ?, ?, ?, ? FROM users WHERE telegram_id = ?`,
                [taskData.id, taskData.type, taskData.reward.type, taskData.reward.amount, telegramId],
                function(err) {
                    if (err) reject(err);
                    else resolve(this.changes > 0); // true –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                }
            );
        });
    }

    async getUserCompletedTasks(telegramId) {
        return new Promise((resolve, reject) => {
            this.db.all(
                `SELECT ut.task_id FROM user_tasks ut
                 JOIN users u ON ut.user_id = u.id
                 WHERE u.telegram_id = ?`,
                [telegramId],
                (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows.map(row => row.task_id));
                }
            );
        });
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –†–ï–§–ï–†–ê–õ–û–í ===

    // 1. –ó–ê–ú–ï–ù–ò–¢–ï –º–µ—Ç–æ–¥ addReferral() –ø–æ–ª–Ω–æ—Å—Ç—å—é:
    async addReferral(referrerTelegramId, referredTelegramId) {
        return new Promise((resolve, reject) => {
            console.log(`ü§ù –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª: ${referrerTelegramId} -> ${referredTelegramId}`);
            
            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö telegram_id
            this.db.get(
                'SELECT id FROM users WHERE telegram_id = ?',
                [referrerTelegramId],
                (err, referrer) => {
                    if (err || !referrer) {
                        console.error('‚ùå –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', referrerTelegramId);
                        reject(err || new Error('Referrer not found'));
                        return;
                    }
                    
                    this.db.get(
                        'SELECT id FROM users WHERE telegram_id = ?',
                        [referredTelegramId],
                        (err, referred) => {
                            if (err || !referred) {
                                console.error('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω:', referredTelegramId);
                                reject(err || new Error('Referred user not found'));
                                return;
                            }
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª
                            this.db.get(
                                'SELECT id FROM referrals WHERE referrer_id = ? AND referred_id = ?',
                                [referrer.id, referred.id],
                                (err, existing) => {
                                    if (err) {
                                        reject(err);
                                        return;
                                    }
                                    
                                    if (existing) {
                                        console.log(`‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${referrerTelegramId} -> ${referredTelegramId}`);
                                        resolve(false);
                                        return;
                                    }
                                    
                                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª
                                    this.db.run(
                                        'INSERT INTO referrals (referrer_id, referred_id) VALUES (?, ?)',
                                        [referrer.id, referred.id],
                                        async (err) => {
                                            if (err) {
                                                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', err);
                                                reject(err);
                                            } else {
                                                console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: ${referrerTelegramId} -> ${referredTelegramId}`);
                                                
                                                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                                                try {
                                                    await this.updateReferralCount(referrerTelegramId);
                                                    resolve(true);
                                                } catch (updateErr) {
                                                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:', updateErr);
                                                    resolve(true); // –†–µ—Ñ–µ—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ —Å—á–µ—Ç—á–∏–∫ –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è
                                                }
                                            }
                                        }
                                    );
                                }
                            );
                        }
                    );
                }
            );
        });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ–ª–µ referrals –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ:

    // 2. –ó–ê–ú–ï–ù–ò–¢–ï –º–µ—Ç–æ–¥ updateReferralCount –Ω–∞ —ç—Ç—É –≤–µ—Ä—Å–∏—é:
    // 2. –ó–ê–ú–ï–ù–ò–¢–ï –º–µ—Ç–æ–¥ updateReferralCount() –ø–æ–ª–Ω–æ—Å—Ç—å—é:
    async updateReferralCount(telegramId) {
        return new Promise((resolve, reject) => {
            console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramId}`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            this.db.get(`
                SELECT COUNT(r.id) as count 
                FROM referrals r
                JOIN users u ON r.referrer_id = u.id
                WHERE u.telegram_id = ?
            `, [telegramId], (err, result) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', err);
                    reject(err);
                    return;
                }
                
                const actualCount = result?.count || 0;
                console.log(`üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è ${telegramId}: ${actualCount}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ referrals –≤ —Ç–∞–±–ª–∏—Ü–µ users
                this.db.run(
                    'UPDATE users SET referrals = ? WHERE telegram_id = ?',
                    [actualCount, telegramId],
                    function(err) {
                        if (err) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è referrals:', err);
                            reject(err);
                        } else {
                            console.log(`‚úÖ –°—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${telegramId}: ${actualCount} (–∏–∑–º–µ–Ω–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${this.changes})`);
                            resolve(actualCount);
                        }
                    }
                );
            });
        });
    }


    async getReferral(referrerId, userId) {
        return new Promise((resolve, reject) => {
            this.db.get(
                `SELECT r.* FROM referrals r
                 JOIN users ref ON r.referrer_id = ref.id
                 JOIN users rfd ON r.referred_id = rfd.id
                 WHERE ref.telegram_id = ? AND rfd.telegram_id = ?`,
                [referrerId, userId],
                (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                }
            );
        });
    }

    async getUserReferralsCount(telegramId) {
        return new Promise((resolve, reject) => {
            this.db.get(
                `SELECT COUNT(*) as count FROM referrals r
                 JOIN users u ON r.referrer_id = u.id
                 WHERE u.telegram_id = ?`,
                [telegramId],
                (err, row) => {
                    if (err) reject(err);
                    else resolve(row ? row.count : 0);
                }
            );
        });
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö –†–£–õ–ï–¢–ö–ò ===

    async getWheelSettings(wheelType) {
        return new Promise((resolve, reject) => {
            this.db.get(
                'SELECT * FROM wheel_settings WHERE wheel_type = ?',
                [wheelType],
                (err, row) => {
                    if (err) {
                        reject(err);
                    } else if (row) {
                        try {
                            resolve({
                                prizes: JSON.parse(row.settings_data)
                            });
                        } catch (parseErr) {
                            reject(new Error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + parseErr.message));
                        }
                    } else {
                        resolve(null);
                    }
                }
            );
        });
    }

    async saveWheelSettings(wheelType, settings) {
        return new Promise((resolve, reject) => {
            const settingsData = JSON.stringify(settings.prizes);
            
            this.db.run(
                `INSERT OR REPLACE INTO wheel_settings (wheel_type, settings_data, updated_at) 
                 VALUES (?, ?, datetime('now'))`,
                [wheelType, settingsData],
                function(err) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve();
                    }
                }
            );
        });
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –õ–ò–î–ï–†–ë–û–†–î–ê ===

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getReferralsLeaderboard(telegramId, limit = 10) {
        return new Promise((resolve, reject) => {
            this.db.all(`
                SELECT 
                    u.id,
                    u.username,
                    u.first_name,
                    COUNT(r2.referred_id) as referrals_count,
                    ROW_NUMBER() OVER (ORDER BY COUNT(r2.referred_id) DESC, u.join_date ASC) as rank_position
                FROM users u
                JOIN referrals r ON u.telegram_id = r.referred_id
                LEFT JOIN referrals r2 ON u.telegram_id = r2.referrer_id
                WHERE r.referrer_id = ?
                AND u.is_active = 1
                GROUP BY u.id, u.username, u.first_name, u.join_date
                ORDER BY referrals_count DESC, u.join_date ASC
                LIMIT ?
            `, [telegramId, limit], (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –õ–ò–î–ï–†–ë–û–†–î–ê –ü–û –†–ï–§–ï–†–ê–õ–ê–ú
    // 3. –ò–°–ü–†–ê–í–¨–¢–ï –º–µ—Ç–æ–¥ getGlobalReferralsLeaderboard():
    async getGlobalReferralsLeaderboard(limit = 20) {
        return new Promise((resolve, reject) => {
            console.log(`üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–ª–∏–º–∏—Ç: ${limit})`);
            
            const query = `
                SELECT 
                    u.telegram_id,
                    u.first_name,
                    u.username,
                    u.referrals as referrals_count,
                    u.total_stars_earned,
                    u.join_date
                FROM users u
                WHERE u.is_active = 1 AND u.referrals > 0
                ORDER BY u.referrals DESC, u.total_stars_earned DESC, u.join_date ASC
                LIMIT ?
            `;
            
            this.db.all(query, [limit], (err, rows) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', err);
                    reject(err);
                } else {
                    console.log(`‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω: ${rows.length} –∑–∞–ø–∏—Å–µ–π`);
                    resolve(rows || []);
                }
            });
        });
    }

    // 6. –î–û–ë–ê–í–¨–¢–ï –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:
    async debugUserReferrals(telegramId) {
        return new Promise((resolve, reject) => {
            const debug = {};
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.db.get('SELECT * FROM users WHERE telegram_id = ?', [telegramId], (err, user) => {
                if (err || !user) {
                    reject(err || new Error('User not found'));
                    return;
                }
                
                debug.user = user;
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
                this.db.all(`
                    SELECT r.*, ref.first_name as referred_name 
                    FROM referrals r
                    JOIN users ref ON r.referred_id = ref.id
                    WHERE r.referrer_id = ?
                `, [user.id], (err, referrals) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    
                    debug.actual_referrals = referrals || [];
                    debug.referrals_field = user.referrals;
                    debug.actual_count = referrals?.length || 0;
                    debug.field_matches_actual = debug.referrals_field === debug.actual_count;
                    
                    console.log(`üîç –û—Ç–ª–∞–¥–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è ${telegramId}:`, debug);
                    resolve(debug);
                });
            });
        });
    }

    // 5. –î–û–ë–ê–í–¨–¢–ï –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:
    async syncAllReferralCounts() {
        return new Promise((resolve, reject) => {
            console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
            
            this.db.run(`
                UPDATE users 
                SET referrals = (
                    SELECT COUNT(r.id) 
                    FROM referrals r 
                    WHERE r.referrer_id = users.id
                )
            `, (err) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', err);
                    reject(err);
                } else {
                    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${this.changes}`);
                    resolve(this.changes);
                }
            });
        });
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–û–ó–ò–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–û –†–ï–§–ï–†–ê–õ–ê–ú
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–û–ó–ò–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–û –†–ï–§–ï–†–ê–õ–ê–ú
    // –£–ë–ï–î–ò–¢–ï–°–¨ —á—Ç–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –µ—Å—Ç—å –≤ database.js:
    // 4. –ò–°–ü–†–ê–í–¨–¢–ï –º–µ—Ç–æ–¥ getUserReferralRank():
    async getUserReferralRank(telegramId) {
        return new Promise((resolve, reject) => {
            console.log(`üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º`);
            
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.db.get(`
                SELECT telegram_id, first_name, referrals as referrals_count, total_stars_earned, join_date
                FROM users 
                WHERE telegram_id = ? AND is_active = 1
            `, [telegramId], (err, userResult) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
                    reject(err);
                    return;
                }
                
                if (!userResult || userResult.referrals_count === 0) {
                    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
                    resolve(null);
                    return;
                }
                
                const userReferrals = userResult.referrals_count;
                const userStars = userResult.total_stars_earned;
                const userJoinDate = userResult.join_date;
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                this.db.get(`
                    SELECT COUNT(*) + 1 as position
                    FROM users u
                    WHERE u.is_active = 1 
                    AND u.referrals > 0
                    AND (
                        u.referrals > ? OR 
                        (u.referrals = ? AND u.total_stars_earned > ?) OR
                        (u.referrals = ? AND u.total_stars_earned = ? AND u.join_date < ?)
                    )
                `, [userReferrals, userReferrals, userStars, userReferrals, userStars, userJoinDate], (err, rankResult) => {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞:', err);
                        reject(err);
                    } else {
                        const result = {
                            telegram_id: userResult.telegram_id,
                            first_name: userResult.first_name,
                            referrals_count: userResult.referrals_count,
                            position: rankResult?.position || 1
                        };
                        
                        console.log(`‚úÖ –†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}:`, result);
                        resolve(result);
                    }
                });
            });
        });
    }

    async updateLeaderboard() {
        return new Promise((resolve, reject) => {
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
            this.db.run('DELETE FROM leaderboard', (err) => {
                if (err) {
                    reject(err);
                    return;
                }

                // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                this.db.run(`
                    INSERT INTO leaderboard (user_id, username, first_name, total_stars, total_prizes, rank_position)
                    SELECT 
                        id,
                        username,
                        first_name,
                        total_stars_earned,
                        prizes_won,
                        ROW_NUMBER() OVER (ORDER BY total_stars_earned DESC, prizes_won DESC) as rank_position
                    FROM users
                    WHERE is_active = 1 AND total_stars_earned > 100
                    ORDER BY total_stars_earned DESC, prizes_won DESC
                    LIMIT 100
                `, (err) => {
                    if (err) reject(err);
                    else resolve();
                });
            });
        });
    }

    async getLeaderboard(limit = 10) {
        return new Promise((resolve, reject) => {
            this.db.all(
                'SELECT * FROM leaderboard ORDER BY rank_position LIMIT ?',
                [limit],
                (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows || []);
                }
            );
        });
    }

    async getUserRank(telegramId) {
        return new Promise((resolve, reject) => {
            this.db.get(
                `SELECT l.rank_position FROM leaderboard l
                 JOIN users u ON l.user_id = u.id
                 WHERE u.telegram_id = ?`,
                [telegramId],
                (err, row) => {
                    if (err) reject(err);
                    else resolve(row ? row.rank_position : null);
                }
            );
        });
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–î–ü–ò–°–û–ö ===

    async updateUserSubscription(telegramId, channelField, isSubscribed) {
        return new Promise((resolve, reject) => {
            const sql = `UPDATE users SET ${channelField} = ? WHERE telegram_id = ?`;
            this.db.run(sql, [isSubscribed ? 1 : 0, telegramId], (err) => {
                if (err) reject(err);
                else resolve();
            });
        });
    }

    async getUserSubscriptions(telegramId) {
        return new Promise((resolve, reject) => {
            this.db.get(
                `SELECT is_subscribed_channel1, is_subscribed_channel2, is_subscribed_dolcedeals
                 FROM users WHERE telegram_id = ?`,
                [telegramId],
                (err, row) => {
                    if (err) reject(err);
                    else resolve(row || {});
                }
            );
        });
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ó–ê–î–ê–ù–ò–ô ===

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏-–ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏
    async addPartnerChannel(channelData) {
        return new Promise((resolve, reject) => {
            const { username, channelId, name, rewardStars, placementType, duration, targetSubs, isHotOffer, multiplier } = channelData;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º end_date –µ—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
            let endDate = null;
            if (placementType === 'time' && duration) {
                endDate = new Date(Date.now() + duration * 60 * 60 * 1000).toISOString(); // duration –≤ —á–∞—Å–∞—Ö
            }
            
            this.db.run(
                `INSERT INTO partner_channels 
                 (channel_username, channel_id, channel_name, reward_stars, placement_type, 
                  placement_duration, target_subscribers, is_hot_offer, hot_offer_multiplier, end_date)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                [username, channelId, name, rewardStars, placementType, duration, targetSubs, 
                 isHotOffer ? 1 : 0, multiplier, endDate],
                function(err) {
                    if (err) reject(err);
                    else resolve(this.lastID);
                }
            );
        });
    }

    async getActivePartnerChannels() {
        return new Promise((resolve, reject) => {
            const now = new Date().toISOString();
            this.db.all(
                `SELECT * FROM partner_channels 
                 WHERE is_active = 1 
                 AND (end_date IS NULL OR end_date > ?) 
                 AND (placement_type = 'target' OR target_subscribers IS NULL OR current_subscribers < target_subscribers)
                 ORDER BY is_hot_offer DESC, created_date DESC`,
                [now],
                (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows || []);
                }
            );
        });
    }

    async updatePartnerChannelSubscribers(channelId, increment = 1) {
        return new Promise((resolve, reject) => {
            this.db.run(
                'UPDATE partner_channels SET current_subscribers = current_subscribers + ? WHERE id = ?',
                [increment, channelId],
                (err) => {
                    if (err) reject(err);
                    else resolve();
                }
            );
        });
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async addUserChannelSubscription(userId, channelId, starsEarned) {
        return new Promise((resolve, reject) => {
            this.db.run(
                `INSERT OR REPLACE INTO user_channel_subscriptions 
                 (user_id, channel_id, stars_earned, is_verified) 
                 VALUES (?, ?, ?, 1)`,
                [userId, channelId, starsEarned],
                function(err) {
                    if (err) reject(err);
                    else resolve(this.lastID);
                }
            );
        });
    }

    async getUserChannelSubscriptions(userId) {
        return new Promise((resolve, reject) => {
            this.db.all(
                `SELECT ucs.*, pc.channel_username, pc.channel_name, pc.reward_stars
                 FROM user_channel_subscriptions ucs
                 JOIN partner_channels pc ON ucs.channel_id = pc.id  
                 WHERE ucs.user_id = ? AND ucs.is_active = 1
                 ORDER BY ucs.subscribed_date DESC`,
                [userId],
                (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows || []);
                }
            );
        });
    }

    async checkUserSubscription(userId, channelId) {
        return new Promise((resolve, reject) => {
            this.db.get(
                `SELECT * FROM user_channel_subscriptions 
                 WHERE user_id = ? AND channel_id = ? AND is_active = 1`,
                [userId, channelId],
                (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                }
            );
        });
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
    async getDailyTasksTemplates(type = 'daily') {
        return new Promise((resolve, reject) => {
            this.db.all(
                'SELECT * FROM daily_tasks_templates WHERE task_type = ? AND is_active = 1 ORDER BY id',
                [type],
                (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows || []);
                }
            );
        });
    }

    async getUserDailyProgress(userId, date = null) {
        if (!date) {
            date = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
        }
        
        return new Promise((resolve, reject) => {
            this.db.all(
                `SELECT udp.*, dtt.task_name, dtt.task_description, dtt.reward_stars, dtt.required_count
                 FROM user_daily_progress udp
                 JOIN daily_tasks_templates dtt ON udp.task_key = dtt.task_key
                 WHERE udp.user_id = ? AND udp.progress_date = ?`,
                [userId, date],
                (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows || []);
                }
            );
        });
    }

    async updateDailyTaskProgress(userId, taskKey, progressIncrement = 1) {
        const today = new Date().toISOString().split('T')[0];
        
        return new Promise((resolve, reject) => {
            const db = this.db;
            
            // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∑–∞–¥–∞–Ω–∏—è
            db.get(
                'SELECT * FROM daily_tasks_templates WHERE task_key = ? AND is_active = 1',
                [taskKey],
                (err, template) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    
                    if (!template) {
                        resolve(null);
                        return;
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    db.run(
                        `INSERT OR REPLACE INTO user_daily_progress 
                         (user_id, task_key, progress_date, current_progress, is_completed) 
                         VALUES (?, ?, ?, 
                                COALESCE((SELECT current_progress FROM user_daily_progress 
                                        WHERE user_id = ? AND task_key = ? AND progress_date = ?), 0) + ?, 
                                CASE WHEN COALESCE((SELECT current_progress FROM user_daily_progress 
                                                  WHERE user_id = ? AND task_key = ? AND progress_date = ?), 0) + ? >= ? 
                                     THEN 1 ELSE 0 END)`,
                        [userId, taskKey, today, userId, taskKey, today, progressIncrement,
                         userId, taskKey, today, progressIncrement, template.required_count],
                        function(err) {
                            if (err) reject(err);
                            else resolve(this.changes);
                        }
                    );
                }
            );
        });
    }

    // –°–∏—Å—Ç–µ–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ (—É–º–µ–Ω—å—à–µ–Ω—ã –Ω–∞–∫–∞–∑–∞–Ω–∏—è)
    async addSubscriptionViolation(userId, channelId, violationType, penaltyDuration = 12) {
        return new Promise((resolve, reject) => {
            this.db.run(
                `INSERT INTO subscription_violations 
                 (user_id, channel_id, violation_type, penalty_duration) 
                 VALUES (?, ?, ?, ?)`,
                [userId, channelId, violationType, penaltyDuration],
                function(err) {
                    if (err) reject(err);
                    else resolve(this.lastID);
                }
            );
        });
    }

    async updateUserTasksBan(userId, banHours) {
        return new Promise((resolve, reject) => {
            const banUntil = new Date(Date.now() + banHours * 60 * 60 * 1000).toISOString();
            
            this.db.run(
                `UPDATE users SET 
                 tasks_ban_until = ?,
                 violation_count = violation_count + 1
                 WHERE id = ?`,
                [banUntil, userId],
                (err) => {
                    if (err) reject(err);
                    else resolve();
                }
            );
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π
    async isUserTasksBanned(userId) {
        return new Promise((resolve, reject) => {
            const now = new Date().toISOString();
            
            this.db.get(
                'SELECT * FROM users WHERE id = ?',
                [userId],
                (err, row) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    
                    if (!row) {
                        resolve(false);
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ tasks_ban_until –∏ –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –±–∞–Ω
                    if (row.tasks_ban_until && new Date(row.tasks_ban_until) > new Date(now)) {
                        resolve(true);
                    } else {
                        resolve(false);
                    }
                }
            );
        });
    }

    // 1. –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è total_stars_earned
    async incrementTotalStarsEarned(telegramId, amount) {
        return new Promise((resolve, reject) => {
            this.db.run(
                'UPDATE users SET total_stars_earned = total_stars_earned + ? WHERE telegram_id = ?',
                [amount, telegramId],
                (err) => {
                    if (err) reject(err);
                    else {
                        console.log(`‚≠ê –û–±–Ω–æ–≤–ª–µ–Ω–æ total_stars_earned –¥–ª—è ${telegramId}: +${amount}`);
                        resolve();
                    }
                }
            );
        });
    }

    // === –¢–†–ê–ù–ó–ê–ö–¶–ò–ò TELEGRAM STARS ===

    // –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–≤–µ–∑–¥
    async addStarsTransaction(transaction) {
        return new Promise((resolve, reject) => {
            const {
                user_id,
                amount,
                type = 'deposit',
                telegram_payment_id,
                provider_payment_id,
                currency = 'XTR',
                total_amount,
                metadata = null
            } = transaction;

            this.db.run(`
                INSERT INTO stars_transactions 
                (user_id, amount, transaction_type, telegram_payment_id, 
                 provider_payment_id, currency, total_amount, metadata)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            `, [
                user_id, 
                amount, 
                type, 
                telegram_payment_id, 
                provider_payment_id, 
                currency, 
                total_amount,
                metadata ? JSON.stringify(metadata) : null
            ], function(err) {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', err);
                    reject(err);
                } else {
                    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞: ${amount} –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
                    resolve(this.lastID);
                }
            });
        });
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserTransactions(userId, limit = 50) {
        return new Promise((resolve, reject) => {
            this.db.all(`
                SELECT * FROM stars_transactions 
                WHERE user_id = ? 
                ORDER BY transaction_date DESC 
                LIMIT ?
            `, [userId, limit], (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
    async getTransactionsStats() {
        return new Promise((resolve, reject) => {
            this.db.get(`
                SELECT 
                    COUNT(*) as total_transactions,
                    SUM(amount) as total_deposited,
                    AVG(amount) as average_deposit,
                    COUNT(DISTINCT user_id) as users_with_deposits
                FROM stars_transactions 
                WHERE transaction_type = 'deposit' AND status = 'completed'
            `, (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });
    }

    // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

    async getStats() {
        return new Promise((resolve, reject) => {
            this.db.get(`
                SELECT 
                    COUNT(*) as total_users,
                    SUM(total_spins) as total_spins,
                    SUM(prizes_won) as total_prizes_won,
                    AVG(total_stars_earned) as avg_stars
                FROM users WHERE is_active = 1
            `, (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });
    }

    close() {
        if (this.db) {
            this.db.close((err) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:', err);
                } else {
                    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
                }
            });
        }
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –ö–ê–ù–ê–õ–û–í –ò –ó–ê–î–ê–ù–ò–ô ===
    
    async getActiveChannels() {
        return new Promise((resolve, reject) => {
            this.db.all(`
                SELECT * FROM partner_channels 
                WHERE is_active = 1 
                ORDER BY is_hot_offer DESC, created_date DESC
            `, (err, rows) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:', err);
                    reject(err);
                } else {
                    resolve(rows || []);
                }
            });
        });
    }
    
    async getDailyTasksForUser(userId) {
        return new Promise((resolve, reject) => {
            // –ü—Ä–æ—Å—Ç—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞
            const dailyTasks = [
                {
                    id: 'daily_login',
                    name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥',
                    description: '–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
                    reward_stars: 10,
                    completed: true // –í—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –≤—Ö–æ–¥–µ
                }
            ];
            resolve(dailyTasks);
        });
    }
    
    async getActiveHotOffers() {
        return new Promise((resolve, reject) => {
            this.db.all(`
                SELECT * FROM partner_channels 
                WHERE is_active = 1 AND is_hot_offer = 1
                AND (end_date IS NULL OR end_date > datetime('now'))
                ORDER BY created_date DESC
            `, (err, rows) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä—è—á–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', err);
                    reject(err);
                } else {
                    resolve(rows || []);
                }
            });
        });
    }
}

module.exports = Database;
