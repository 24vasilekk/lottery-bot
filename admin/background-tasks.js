// Background Tasks –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–¥–∞–Ω–∏–π

class BackgroundTaskManager {
    constructor(database, telegramBot) {
        this.db = database;
        this.bot = telegramBot;
        this.intervals = new Map();
        
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...');
        this.startTasks();
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ë–î
    formatDateQuery(sqliteDate, postgresDate) {
        return this.db.query ? postgresDate : sqliteDate;
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async executeQuery(sql, params = []) {
        if (this.db.query) {
            // PostgreSQL –≤–µ—Ä—Å–∏—è
            const result = await this.db.query(sql, params);
            return result.rows || [];
        } else if (this.db.db && this.db.db.all) {
            // SQLite –≤–µ—Ä—Å–∏—è
            return new Promise((resolve, reject) => {
                this.db.db.all(sql, params, (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows || []);
                });
            });
        } else {
            throw new Error('–ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    async executeUpdate(sql, params = []) {
        if (this.db.query) {
            // PostgreSQL –≤–µ—Ä—Å–∏—è
            await this.db.query(sql, params);
        } else if (this.db.db && this.db.db.run) {
            // SQLite –≤–µ—Ä—Å–∏—è
            return new Promise((resolve, reject) => {
                this.db.db.run(sql, params, (err) => {
                    if (err) reject(err);
                    else resolve();
                });
            });
        } else {
            throw new Error('–ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    async executeScalar(sql, params = []) {
        if (this.db.query) {
            // PostgreSQL –≤–µ—Ä—Å–∏—è
            const result = await this.db.query(sql, params);
            return result.rows[0] || null;
        } else if (this.db.db && this.db.db.get) {
            // SQLite –≤–µ—Ä—Å–∏—è
            return new Promise((resolve, reject) => {
                this.db.db.get(sql, params, (err, row) => {
                    if (err) reject(err);
                    else resolve(row || null);
                });
            });
        } else {
            throw new Error('–ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–∞–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    startTasks() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        this.scheduleTask('expiredChannels', this.checkExpiredChannels.bind(this), 60000);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        this.scheduleTask('subscriptionCheck', this.checkUserSubscriptions.bind(this), 300000);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        this.scheduleTask('updateStats', this.updateChannelStats.bind(this), 1800000);
        
        // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00
        this.scheduleDailyTask(3, 0, this.cleanupOldData.bind(this));
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–∞—Ö –∫–∞–∂–¥—ã–π —á–∞—Å
        this.scheduleTask('adminNotifications', this.notifyAdminsAboutPrizes.bind(this), 3600000);

        console.log('‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã');
    }

    scheduleTask(name, task, interval) {
        if (this.intervals.has(name)) {
            clearInterval(this.intervals.get(name));
        }

        const intervalId = setInterval(async () => {
            try {
                await task();
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ ${name}:`, error);
            }
        }, interval);

        this.intervals.set(name, intervalId);
        console.log(`‚è∞ –ó–∞–¥–∞—á–∞ ${name} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∂–¥—ã–µ ${interval/1000} —Å–µ–∫—É–Ω–¥`);
    }

    scheduleDailyTask(hours, minutes, task) {
        const now = new Date();
        const targetTime = new Date(now);
        targetTime.setHours(hours, minutes, 0, 0);

        // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if (targetTime <= now) {
            targetTime.setDate(targetTime.getDate() + 1);
        }

        const timeUntilTask = targetTime.getTime() - now.getTime();

        setTimeout(() => {
            task();
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            setInterval(task, 24 * 60 * 60 * 1000);
        }, timeUntilTask);

        console.log(`üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${targetTime.toLocaleString('ru-RU')}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
    async checkExpiredChannels() {
        try {
            console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤...');

            // –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–∞–Ω–∞–ª—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π SQL –¥–ª—è –æ–±–µ–∏—Ö –ë–î
            const sqlPostgres = `
                SELECT * FROM partner_channels 
                WHERE is_active = true 
                AND end_date IS NOT NULL 
                AND end_date < NOW()
            `;
            
            const sqlSQLite = `
                SELECT * FROM partner_channels 
                WHERE is_active = 1 
                AND end_date IS NOT NULL 
                AND datetime(end_date) < datetime('now')
            `;
            
            const sql = this.db.query ? sqlPostgres : sqlSQLite;
            const expiredChannels = await this.executeQuery(sql);

            for (const channel of expiredChannels) {
                console.log(`‚è∞ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞: @${channel.channel_username}`);
                
                // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª
                const updateSqlPostgres = 'UPDATE partner_channels SET is_active = false WHERE id = $1';
                const updateSqlSQLite = 'UPDATE partner_channels SET is_active = 0 WHERE id = ?';
                const updateSql = this.db.query ? updateSqlPostgres : updateSqlSQLite;
                
                await this.executeUpdate(updateSql, [channel.id]);

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                await this.notifyAdmins(`‚è∞ –ö–∞–Ω–∞–ª @${channel.channel_username} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–∏—Å—Ç–µ–∫ —Å—Ä–æ–∫)`);
            }

            if (expiredChannels.length > 0) {
                console.log(`‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${expiredChannels.length} –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤`);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:', error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async checkUserSubscriptions() {
        try {
            console.log('üîç –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API)
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            const subscriptions = await this.executeQuery(`
                SELECT ucs.*, pc.channel_username, u.telegram_id
                FROM user_channel_subscriptions ucs
                JOIN partner_channels pc ON ucs.channel_id = pc.id
                JOIN users u ON ucs.user_id = u.id
                WHERE ucs.is_active = true
                AND ucs.subscribed_date < NOW() - INTERVAL '1 hour'
                ORDER BY RANDOM()
                LIMIT 100
            `);

            let violationsFound = 0;

            for (const subscription of subscriptions) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Bot API
                    const isSubscribed = await this.checkUserChannelSubscription(
                        subscription.telegram_id, 
                        subscription.channel_username
                    );

                    if (!isSubscribed) {
                        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${subscription.telegram_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç @${subscription.channel_username}`);
                        
                        // –ü–æ–º–µ—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é
                        await this.executeUpdate(
                            'UPDATE user_channel_subscriptions SET is_active = 0, unsubscribed_date = CURRENT_TIMESTAMP WHERE id = ?',
                            [subscription.id]
                        );

                        violationsFound++;
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                        await this.sleep(500);
                    }

                } catch (subscriptionError) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, subscriptionError.message);
                }
            }

            console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${subscriptions.length} –ø–æ–¥–ø–∏—Å–æ–∫, –Ω–∞–π–¥–µ–Ω–æ ${violationsFound} –Ω–∞—Ä—É—à–µ–Ω–∏–π`);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    async updateChannelStats() {
        try {
            console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤...');

            const channels = await this.executeQuery(
                'SELECT * FROM partner_channels WHERE is_active = 1 AND placement_type = "target"'
            );

            for (const channel of channels) {
                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                const result = await this.executeScalar(
                    'SELECT COUNT(*) as count FROM user_channel_subscriptions WHERE channel_id = ? AND is_active = 1',
                    [channel.id]
                );
                const currentSubscribers = result ? result.count : 0;

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await this.executeUpdate(
                    'UPDATE partner_channels SET current_subscribers = ? WHERE id = ?',
                    [currentSubscribers, channel.id]
                );

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –∫–∞–Ω–∞–ª —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                if (currentSubscribers >= channel.target_subscribers) {
                    console.log(`üéØ –ö–∞–Ω–∞–ª @${channel.channel_username} –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏: ${currentSubscribers}/${channel.target_subscribers}`);
                    
                    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª
                    await this.executeUpdate(
                        'UPDATE partner_channels SET is_active = 0 WHERE id = ?',
                        [channel.id]
                    );

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                    await this.notifyAdmins(`üéØ –ö–∞–Ω–∞–ª @${channel.channel_username} –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
                }
            }

            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤`);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:', error);
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async cleanupOldData() {
        try {
            console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            await this.executeUpdate(
                `DELETE FROM subscription_violations WHERE ${this.formatDateQuery(
                    'datetime(created_at) < datetime("now", "-30 days")',
                    "created_at < NOW() - INTERVAL '30 days'"
                )}`
            );

            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
            await this.executeUpdate(
                `DELETE FROM user_channel_subscriptions WHERE is_active = 0 AND ${this.formatDateQuery(
                    'datetime(unsubscribed_date) < datetime("now", "-7 days")',
                    "unsubscribed_date < NOW() - INTERVAL '7 days'"
                )}`
            );

            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≥–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            await this.executeUpdate(
                `DELETE FROM hot_offers WHERE ${this.formatDateQuery(
                    'datetime(expires_at) < datetime("now", "-1 day")',
                    "expires_at < NOW() - INTERVAL '1 day'"
                )}`
            );

            console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–∞—Ö
    async notifyAdminsAboutPrizes() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            const newPrizes = await this.executeQuery(`
                SELECT COUNT(*) as count, type
                FROM prizes 
                WHERE is_given = 0 
                AND ${this.formatDateQuery(
                    "datetime(created_at) > datetime('now', '-1 hour')",
                    "created_at > NOW() - INTERVAL '1 hour'"
                )}
                GROUP BY type
            `);

            if (newPrizes.length > 0) {
                const totalPrizes = newPrizes.reduce((sum, prize) => sum + prize.count, 0);
                const prizesList = newPrizes.map(p => `‚Ä¢ ${p.type}: ${p.count}`).join('\n');
                
                await this.notifyAdmins(
                    `üéÅ **–ù–æ–≤—ã–µ –ø—Ä–∏–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å** (${totalPrizes} —à—Ç.)\n\n${prizesList}\n\n` +
                    `üí° [–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É –¥–ª—è –≤—ã–¥–∞—á–∏](${process.env.SERVER_URL || 'http://localhost:3000'}/admin)`
                );
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–∑–∞—Ö:', error);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async checkUserChannelSubscription(userId, channelUsername) {
        try {
            const chatMember = await this.bot.getChatMember(`@${channelUsername}`, userId);
            return ['member', 'administrator', 'creator'].includes(chatMember.status);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ${userId} –Ω–∞ @${channelUsername}:`, error.message);
            return false;
        }
    }

    async notifyAdmins(message) {
        const adminIds = [
            parseInt(process.env.ADMIN_ID) || 0,
            // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
        ].filter(id => id > 0);

        for (const adminId of adminIds) {
            try {
                await this.bot.sendMessage(adminId, message, { parse_mode: 'Markdown' });
            } catch (error) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${adminId}:`, error.message);
            }
        }
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
    stopTask(name) {
        if (this.intervals.has(name)) {
            clearInterval(this.intervals.get(name));
            this.intervals.delete(name);
            console.log(`‚èπÔ∏è –ó–∞–¥–∞—á–∞ ${name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
        }
    }

    stopAllTasks() {
        for (const [name, intervalId] of this.intervals.entries()) {
            clearInterval(intervalId);
        }
        this.intervals.clear();
        console.log('‚èπÔ∏è –í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    getTaskStatus() {
        const tasks = Array.from(this.intervals.keys());
        return {
            active: tasks.length,
            tasks: tasks
        };
    }
}

module.exports = BackgroundTaskManager;