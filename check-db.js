#!/usr/bin/env node

const https = require('https');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î —á–µ—Ä–µ–∑ API
async function checkDatabase() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    const options = {
        hostname: 'lottery-bot-updated-production.up.railway.app',
        port: 443,
        path: '/api/admin/db-test',
        method: 'GET',
        headers: {
            'Authorization': 'Bearer your-admin-token', // –ù—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
            'Content-Type': 'application/json'
        }
    };

    return new Promise((resolve, reject) => {
        const req = https.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(data);
                    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î:');
                    console.log(JSON.stringify(result, null, 2));
                    resolve(result);
                } catch (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', err);
                    console.log('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', data);
                    reject(err);
                }
            });
        });

        req.on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err);
            reject(err);
        });

        req.end();
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function checkUsersAPI() {
    console.log('\nüë• –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
    
    const options = {
        hostname: 'lottery-bot-updated-production.up.railway.app',
        port: 443,
        path: '/api/admin/users?page=1&limit=5',
        method: 'GET',
        headers: {
            'Authorization': 'Bearer your-admin-token',
            'Content-Type': 'application/json'
        }
    };

    return new Promise((resolve, reject) => {
        const req = https.request(options, (res) => {
            let data = '';
            
            console.log('HTTP Status:', res.statusCode);
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(data);
                    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
                    console.log(JSON.stringify(result, null, 2));
                    resolve(result);
                } catch (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', err);
                    console.log('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', data);
                    reject(err);
                }
            });
        });

        req.on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err);
            reject(err);
        });

        req.end();
    });
}

// –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
async function main() {
    console.log('üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è lottery bot –ë–î\n');
    console.log('‚ö†Ô∏è  –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π admin —Ç–æ–∫–µ–Ω\n');
    
    try {
        await checkDatabase();
        await checkUsersAPI();
        console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (err) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', err.message);
    }
}

main();