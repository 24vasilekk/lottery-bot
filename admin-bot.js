// admin-bot.js - –û—Ç–¥–µ–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const path = require('path');
const fs = require('fs');
const createDatabase = require('./database-selector');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (fs.existsSync('.env')) {
    require('dotenv').config();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
const ADMIN_BOT_TOKEN = process.env.ADMIN_BOT_TOKEN;
if (!ADMIN_BOT_TOKEN) {
    console.error('‚ùå ADMIN_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.error('–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–±–æ—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ ADMIN_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.error('–í Railway: Settings -> Variables -> Add Variable');
    console.log('\n‚ö†Ô∏è  –ê–¥–º–∏–Ω-–±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –±–µ–∑ —Ç–æ–∫–µ–Ω–∞');
    return; // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –º–æ–¥—É–ª—è, –Ω–µ –∑–∞–≤–µ—Ä—à–∞—è –ø—Ä–æ—Ü–µ—Å—Å
}

const ADMIN_IDS = (process.env.ADMIN_IDS || '').split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));
if (ADMIN_IDS.length === 0) {
    console.error('‚ùå ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.error('–î–æ–±–∞–≤—å—Ç–µ ADMIN_IDS=123456789,987654321 –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return; // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –º–æ–¥—É–ª—è, –Ω–µ –∑–∞–≤–µ—Ä—à–∞—è –ø—Ä–æ—Ü–µ—Å—Å
}

// –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
if (!ADMIN_BOT_TOKEN || ADMIN_IDS.length === 0) {
    console.log('‚ö†Ô∏è  –ê–¥–º–∏–Ω-–±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ ID –∞–¥–º–∏–Ω–æ–≤)');
    return; // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –º–æ–¥—É–ª—è
}

// –ù–∞ Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (–∞–¥–º–∏–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä)
const PORT = process.env.PORT || 3000; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç
const ADMIN_URL = process.env.WEBAPP_URL || 
    (process.env.RAILWAY_PUBLIC_DOMAIN 
        ? `https://${process.env.RAILWAY_PUBLIC_DOMAIN}` 
        : `http://localhost:${PORT}`);

console.log('üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù-–ë–û–¢–ê');
console.log('===============================');
console.log(`   ü§ñ –ê–¥–º–∏–Ω –±–æ—Ç —Ç–æ–∫–µ–Ω: ${ADMIN_BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù ‚ùå'}`);
console.log(`   üë• –ê–¥–º–∏–Ω—ã: ${ADMIN_IDS.join(', ')}`);
console.log(`   üåê –ê–¥–º–∏–Ω URL: ${ADMIN_URL}`);
console.log(`   üîß –ü–æ—Ä—Ç: ${PORT}`);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–ë–ï–ó –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ Express —Å–µ—Ä–≤–µ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞–¥–º–∏–Ω–∫—É)
const db = createDatabase();
let adminBot = null;

// –ù–ï —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π Express —Å–µ—Ä–≤–µ—Ä - –∞–¥–º–∏–Ω–∫–∞ —É–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä

// –í–°–ï Express API –º–∞—Ä—à—Ä—É—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã - —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
try {
    adminBot = new TelegramBot(ADMIN_BOT_TOKEN, { 
        polling: {
            interval: 2000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 2 —Å–µ–∫—É–Ω–¥
            autoStart: true,
            params: {
                timeout: 10
            }
        },
        request: {
            agentOptions: {
                keepAlive: true,
                family: 4
            }
        }
    });
    console.log('‚úÖ –ê–¥–º–∏–Ω-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–±–æ—Ç–∞:', error.message);
    process.exit(1);
}

// === MIDDLEWARES ===

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
function isAdmin(userId) {
    return ADMIN_IDS.includes(userId);
}

// === –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù-–ë–û–¢–ê ===

if (adminBot) {
    // –ó–∞–º–µ–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞:

    adminBot.onText(/\/start/, (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–±–æ—Ç—É');
            return;
        }

        const welcomeMessage = `
    ü§ñ **–ê–¥–º–∏–Ω-–±–æ—Ç Kosmetichka Lottery**

    üëã –ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}!

    üõ†Ô∏è **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
    /stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    /users - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    /prizes - –û–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–∏–∑—ã

    üí∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:**
    /stars user_id amount - –∏–∑–º–µ–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã
    /set_prize user_id type "name" - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑

    üé∞ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –®–ê–ù–°–ê–ú–ò (–ù–û–í–û–ï!):**
    /real_chances - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–Ω—Å—ã
    /set_real_chance normal 1 94 - –∏–∑–º–µ–Ω–∏—Ç—å —à–∞–Ω—Å –ø—Ä–∏–∑–∞
    /reset_real_chances - —Å–±—Ä–æ—Å–∏—Ç—å –∫ –±–∞–∑–æ–≤—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º

    üì∫ **–ö–∞–Ω–∞–ª—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:**
    /channels - –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    /automation - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤

    üí¨ **–ü—Ä–æ—á–µ–µ:**
    /broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–∞—Å—Å—ã–ª–∫–∞
    /help - –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

    üéØ **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**
    1. /reset_real_chances - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à–∏ —à–∞–Ω—Å—ã
    2. /real_chances - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    3. /test_real_chances 1000 - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å

    –í—Å–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞!
    HTML –∞–¥–º–∏–Ω–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.

    ‚ö†Ô∏è **–í–ê–ñ–ù–û:** –í–∏–∑—É–∞–ª—å–Ω–æ —Ä—É–ª–µ—Ç–∫–∞ –ù–ï –∏–∑–º–µ–Ω–∏—Ç—Å—è (–ø—É—Å—Ç–æ—Ç–∞ 20%, –∑–≤–µ–∑–¥—ã 10%, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã 70%)
    –ù–æ —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–Ω—Å—ã: –ø—É—Å—Ç–æ—Ç–∞ 94%, –∑–≤–µ–∑–¥—ã 5%, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 1% (–≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
        `;

        adminBot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /panel - –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø–∞–Ω–µ–ª—å
    adminBot.onText(/\/panel/, (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const keyboard = {
            inline_keyboard: [
                [
                    { 
                        text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 
                        url: ADMIN_URL 
                    }
                ]
            ]
        };

        adminBot.sendMessage(chatId, 'üìä –í–µ–±-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\nü§ñ –í—Å–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞!', {
            reply_markup: keyboard
        });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stats - –±—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    adminBot.onText(/\/stats/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
            const stats = await getQuickStats();
            
            const message = `
üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalUsers}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.activeToday}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.newThisWeek}

üé∞ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –ü—Ä–æ–∫—Ä—É—Ç–æ–∫ —Å–µ–≥–æ–¥–Ω—è: ${stats.spinsToday}
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫: ${stats.totalSpins}

üéÅ **–ü—Ä–∏–∑—ã:**
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –≤—ã–¥–∞—á–∏: ${stats.pendingPrizes}
‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: ${stats.pendingCertificates}
‚Ä¢ –í—ã–¥–∞–Ω–æ –≤—Å–µ–≥–æ: ${stats.totalGiven}

üì∫ **–ö–∞–Ω–∞–ª—ã:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeChannels}
‚Ä¢ –ì–æ—Ä—è—á–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${stats.hotOffers}

üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**
‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: ${stats.depositsToday}
‚Ä¢ –°—É–º–º–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${stats.depositAmountToday} ‚≠ê

üìÖ **–î–∞—Ç–∞:** ${new Date().toLocaleString('ru-RU')}
            `;

            adminBot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /users - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    adminBot.onText(/\/users/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            const users = await getRecentUsers(10);
            
            if (users.length === 0) {
                adminBot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }

            let message = 'üë• **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n';
            
            users.forEach((user, index) => {
                const lastActivity = new Date(user.last_activity).toLocaleString('ru-RU');
                message += `${index + 1}. **${user.first_name}**\n`;
                message += `   ‚Ä¢ ID: \`${user.telegram_id}\`\n`;
                message += `   ‚Ä¢ –ó–≤–µ–∑–¥: ${user.stars} ‚≠ê\n`;
                message += `   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity}\n\n`;
            });

            adminBot.sendMessage(chatId, message, { 
                parse_mode: 'Markdown',
                disable_web_page_preview: true 
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /prizes - –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–∏–∑—ã
    adminBot.onText(/\/prizes/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            const prizes = await getPendingPrizes(5);
            
            if (prizes.length === 0) {
                adminBot.sendMessage(chatId, 'üéâ –í—Å–µ –ø—Ä–∏–∑—ã –≤—ã–¥–∞–Ω—ã!');
                return;
            }

            let message = 'üéÅ **–ü—Ä–∏–∑—ã –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–¥–∞—á–∏:**\n\n';
            
            prizes.forEach((prize, index) => {
                const wonDate = new Date(prize.won_date).toLocaleString('ru-RU');
                const prizeIcon = getPrizeIcon(prize.prize_type);
                
                message += `${index + 1}. ${prizeIcon} **${prize.prize_name}**\n`;
                message += `   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${prize.user_name}\n`;
                message += `   ‚Ä¢ ID: \`${prize.user_telegram_id}\`\n`;
                message += `   ‚Ä¢ –í—ã–∏–≥—Ä–∞–ª: ${wonDate}\n\n`;
            });

            if (prizes.length >= 5) {
                message += `\nüåê [–û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –∞–¥–º–∏–Ω–∫–µ](${ADMIN_URL})`;
            }

            adminBot.sendMessage(chatId, message, { 
                parse_mode: 'Markdown',
                disable_web_page_preview: true 
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞
    adminBot.onText(/\/broadcast (.+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const message = match[1];

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            const result = await sendBroadcast(message);
            adminBot.sendMessage(chatId, 
                `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n` +
                `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.sent}\n` +
                `‚ùå –û—à–∏–±–æ–∫: ${result.errors}\n` +
                `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.total}`
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
    adminBot.onText(/\/channels/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            const channels = await getActiveChannels();
            
            if (channels.length === 0) {
                const helpMessage = `
üì∫ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏**

–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:

**–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:**
\`/add_channel @username "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞" 50 24\`

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚Ä¢ @username - —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞
‚Ä¢ "–ù–∞–∑–≤–∞–Ω–∏–µ" - –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö  
‚Ä¢ 50 - –Ω–∞–≥—Ä–∞–¥–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö
‚Ä¢ 24 - —á–∞—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

**–ü—Ä–∏–º–µ—Ä:**
\`/add_channel @beauty_channel "–ö–∞–Ω–∞–ª –∫—Ä–∞—Å–æ—Ç—ã" 50 24\`

**–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:**
/remove_channel @username - —É–¥–∞–ª–∏—Ç—å
/hot_channel @username - —Å–¥–µ–ª–∞—Ç—å –≥–æ—Ä—è—á–∏–º (—Ö2 –∑–≤–µ–∑–¥ –Ω–∞ —á–∞—Å)
                `;
                adminBot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
                return;
            }

            let message = 'üì∫ **–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:**\n\n';
            
            channels.forEach((channel, index) => {
                const isHot = channel.is_hot_offer ? 'üî• ' : '';
                const status = channel.is_active ? '‚úÖ' : '‚ùå';
                
                message += `${index + 1}. ${isHot}**${channel.channel_name}**\n`;
                message += `   ‚Ä¢ @${channel.channel_username} ${status}\n`;
                message += `   ‚Ä¢ –ù–∞–≥—Ä–∞–¥–∞: ${channel.reward_stars} ‚≠ê\n`;
                message += `   ‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${channel.current_subscribers || 0}\n`;
                
                if (channel.placement_type === 'time' && channel.placement_duration) {
                    message += `   ‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: ${channel.placement_duration}—á\n`;
                }
                
                message += '\n';
            });

            message += `\nüìä **–ò—Ç–æ–≥–æ:** ${channels.length} –∫–∞–Ω–∞–ª–æ–≤\n`;
            message += `üî• **–ì–æ—Ä—è—á–∏—Ö:** ${channels.filter(c => c.is_hot_offer).length}\n\n`;
            message += `üí° **–ö–æ–º–∞–Ω–¥—ã:**\n`;
            message += `/add_channel @username "–ù–∞–∑–≤–∞–Ω–∏–µ" 50 24\n`;
            message += `/remove_channel @username\n`;
            message += `/hot_channel @username`;

            adminBot.sendMessage(chatId, message, { 
                parse_mode: 'Markdown',
                disable_web_page_preview: true 
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ /add_channel @username "Name" stars hours
    adminBot.onText(/\/add_channel @(\w+) "([^"]+)" (\d+) (\d+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, username, name, stars, hours] = match;
        
        try {
            await addChannel({
                username: username,
                name: name,
                stars: parseInt(stars),
                hours: parseInt(hours)
            });
            
            adminBot.sendMessage(chatId, 
                `‚úÖ **–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n` +
                `üì∫ @${username}\n` +
                `üìã ${name}\n` +
                `‚≠ê ${stars} –∑–≤–µ–∑–¥\n` +
                `‚è∞ ${hours} —á–∞—Å–æ–≤`, 
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    adminBot.onText(/\/remove_channel @(\w+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, username] = match;
        
        try {
            await removeChannel(username);
            adminBot.sendMessage(chatId, `‚úÖ –ö–∞–Ω–∞–ª @${username} —É–¥–∞–ª–µ–Ω`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –≥–æ—Ä—è—á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    adminBot.onText(/\/hot_channel @(\w+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, username] = match;
        
        try {
            await setHotChannel(username);
            adminBot.sendMessage(chatId, `üî• –ö–∞–Ω–∞–ª @${username} —Ç–µ–ø–µ—Ä—å –≥–æ—Ä—è—á–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (—Ö2 –∑–≤–µ–∑–¥ –Ω–∞ —á–∞—Å)!`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä—è—á–µ–≥–æ –∫–∞–Ω–∞–ª–∞:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä—è—á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥–∞–º–∏ /stars user_id amount
    adminBot.onText(/\/stars (\d+) ([+-]?\d+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, targetUserId, amount] = match;
        const starsAmount = parseInt(amount);
        
        try {
            await adjustUserStars(parseInt(targetUserId), starsAmount);
            const user = await getUserInfo(parseInt(targetUserId));
            
            adminBot.sendMessage(chatId, 
                `‚úÖ **–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω!**\n\n` +
                `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name}\n` +
                `üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${starsAmount > 0 ? '+' : ''}${starsAmount} ‚≠ê\n` +
                `üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.stars} ‚≠ê`, 
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–≤–µ–∑–¥:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞–º–∏ /set_prize user_id prize_type prize_name
    adminBot.onText(/\/set_prize (\d+) (\w+) "([^"]+)"/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, targetUserId, prizeType, prizeName] = match;
        
        try {
            await addUserPrize(parseInt(targetUserId), {
                type: prizeType,
                name: prizeName,
                value: 0
            });
            
            const user = await getUserInfo(parseInt(targetUserId));
            
            adminBot.sendMessage(chatId, 
                `üéÅ **–ü—Ä–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n` +
                `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name}\n` +
                `üèÜ –ü—Ä–∏–∑: ${prizeName}\n` +
                `üìã –¢–∏–ø: ${prizeType}`, 
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—É–ª–µ—Ç–∫–∏ /wheel_settings mega|normal
    adminBot.onText(/\/wheel_settings (mega|normal)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, wheelType] = match;
        
        try {
            const settings = await getWheelSettings(wheelType);
            
            if (!settings) {
                adminBot.sendMessage(chatId, `‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ${wheelType} —Ä—É–ª–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
                return;
            }

            let message = `üé∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ${wheelType === 'mega' ? '–ú–ï–ì–ê' : '–æ–±—ã—á–Ω–æ–π'} —Ä—É–ª–µ—Ç–∫–∏:**\n\n`;
            
            settings.prizes.forEach((prize, index) => {
                const icon = getPrizeIconByType(prize.type);
                message += `${index + 1}. ${icon} **${prize.name}**\n`;
                message += `   ‚Ä¢ –®–∞–Ω—Å: ${prize.probability}%\n`;
                message += `   ‚Ä¢ –¢–∏–ø: ${prize.type}\n\n`;
            });

            message += `üí° **–ö–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n`;
            message += `\`/set_wheel_prob ${wheelType} 1 15\` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 15% –¥–ª—è 1-–≥–æ –ø—Ä–∏–∑–∞\n`;
            message += `\`/wheel_test ${wheelType}\` - —Ç–µ—Å—Ç —Ä—É–ª–µ—Ç–∫–∏`;

            adminBot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä—É–ª–µ—Ç–∫–∏:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
    });

    // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –≤–∞—à admin-bot.js (–ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥):

    // –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –†–ï–ê–õ–¨–ù–´–• —à–∞–Ω—Å–æ–≤ (–Ω–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö)
    adminBot.onText(/\/real_chances/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            const normalSettings = await getWheelSettings('normal');
            const megaSettings = await getWheelSettings('mega');

            let message = `üé∞ **–†–ï–ê–õ–¨–ù–´–ï —à–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è (–Ω–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ!)**\n\n`;

            message += `üìä **–û–ë–´–ß–ù–ê–Ø –†–£–õ–ï–¢–ö–ê - –§–ê–ö–¢ (–Ω–∞ 1000 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫):**\n`;
            if (normalSettings && normalSettings.prizes) {
                normalSettings.prizes.forEach((prize, index) => {
                    const per1000 = Math.round(prize.probability * 10);
                    message += `${index + 1}. ${prize.name}: ${prize.probability}% (${per1000} —Ä–∞–∑)\n`;
                });
            }

            message += `\nüéØ **–ú–ï–ì–ê-–†–£–õ–ï–¢–ö–ê - –§–ê–ö–¢:**\n`;
            if (megaSettings && megaSettings.prizes) {
                megaSettings.prizes.forEach((prize, index) => {
                    const rarity = prize.probability <= 0.01 ? `(1:${Math.round(100/prize.probability)})` : '';
                    message += `${index + 1}. ${prize.name}: ${prize.probability}% ${rarity}\n`;
                });
            }

            message += `\n‚ö†Ô∏è **–í–ê–ñ–ù–û:**\n`;
            message += `–í–∏–∑—É–∞–ª—å–Ω–æ —Ä—É–ª–µ—Ç–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É!\n`;
            message += `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç: –ø—É—Å—Ç–æ—Ç–∞ 20%, –∑–≤–µ–∑–¥—ã 10%, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã 70%\n`;
            message += `–ù–æ —Ä–µ–∞–ª—å–Ω–æ –≤—ã–ø–∞–¥–∞–µ—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—ã—à–µ —à–∞–Ω—Å–∞–º.\n\n`;

            message += `üí° **–ö–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n`;
            message += `/set_real_chance normal 1 95 - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –ø—É—Å—Ç–æ—Ç—ã\n`;
            message += `/set_real_chance normal 2 4 - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –∑–≤–µ–∑–¥\n`;
            message += `/set_real_chance normal 3 1 - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —à–∞–Ω—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n`;
            message += `/reset_real_chances - —Å–±—Ä–æ—Å–∏—Ç—å –∫ –≤–∞—à–∏–º –±–∞–∑–æ–≤—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º`;

            adminBot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —à–∞–Ω—Å–æ–≤:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –†–ï–ê–õ–¨–ù–û–ì–û —à–∞–Ω—Å–∞
    adminBot.onText(/\/set_real_chance (normal|mega) (\d+) ([\d.]+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, wheelType, prizeNum, newChance] = match;
        const prizeIndex = parseInt(prizeNum) - 1;
        const chance = parseFloat(newChance);

        if (chance < 0 || chance > 100) {
            adminBot.sendMessage(chatId, '‚ùå –®–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100');
            return;
        }

        try {
            const settings = await getWheelSettings(wheelType);
            if (!settings || !settings.prizes[prizeIndex]) {
                adminBot.sendMessage(chatId, '‚ùå –ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const oldChance = settings.prizes[prizeIndex].probability;
            settings.prizes[prizeIndex].probability = chance;

            const totalChance = settings.prizes.reduce((sum, prize) => sum + prize.probability, 0);
            
            await db.saveWheelSettings(wheelType, settings);

            const prizeName = settings.prizes[prizeIndex].name;
            let message = `‚úÖ **–†–ï–ê–õ–¨–ù–´–ô —à–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω!**\n\n`;
            message += `üé∞ –†—É–ª–µ—Ç–∫–∞: ${wheelType === 'mega' ? '–ú–ï–ì–ê' : '–æ–±—ã—á–Ω–∞—è'}\n`;
            message += `üéÅ –ü—Ä–∏–∑: ${prizeName}\n`;
            message += `üìä –ë—ã–ª–æ: ${oldChance}% ‚Üí –°—Ç–∞–ª–æ: ${chance}%\n`;
            message += `üìà –û–±—â–∞—è —Å—É–º–º–∞: ${totalChance.toFixed(2)}%\n\n`;
            
            if (wheelType === 'normal' && prizeIndex < 3) {
                const per1000 = Math.round(chance * 10);
                message += `üìã –ù–∞ 1000 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫: ${per1000} —Ä–∞–∑\n`;
            }
            
            if (Math.abs(totalChance - 100) > 0.1) {
                message += `\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –°—É–º–º–∞ –Ω–µ —Ä–∞–≤–Ω–∞ 100%\n`;
            }

            message += `\nüí° –í–∏–∑—É–∞–ª—å–Ω–æ —Ä—É–ª–µ—Ç–∫–∞ –ù–ï –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –≤–∏–¥—è—Ç —Ä–∞–∑–Ω–∏—Ü—ã!`;

            adminBot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —à–∞–Ω—Å–∞:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞—à–∏—Ö –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    adminBot.onText(/\/reset_real_chances/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à–∏ –±–∞–∑–æ–≤—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–Ω—Å—ã
            const yourDefaultNormal = {
                prizes: [
                    { id: 'empty', name: '–ü—É—Å—Ç–æ (—á–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª)', type: 'empty', probability: 94 },
                    { id: 'stars20', name: '20 –∑–≤–µ–∑–¥', type: 'stars', probability: 5 },
                    { id: 'cert300', name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 300‚ÇΩ –ó–Ø', type: 'certificate', probability: 1 }
                ]
            };

            const yourDefaultMega = {
                prizes: [
                    { id: 'empty', name: '–ü—É—Å—Ç–æ (—á–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª)', type: 'empty', probability: 99.97 },
                    { id: 'iphone15', name: 'iPhone 15', type: 'mega_prize', probability: 0.01 },
                    { id: 'macbook', name: 'MacBook Air', type: 'mega_prize', probability: 0.01 },
                    { id: 'cert10000', name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 10000‚ÇΩ', type: 'mega_certificate', probability: 0.01 }
                ]
            };

            await db.saveWheelSettings('normal', yourDefaultNormal);
            await db.saveWheelSettings('mega', yourDefaultMega);
            
            adminBot.sendMessage(chatId, `
    ‚úÖ **–†–ï–ê–õ–¨–ù–´–ï —à–∞–Ω—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã –∫ –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!**

    üìä **–û–±—ã—á–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞ - –§–ê–ö–¢ (–Ω–∞ 1000 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫):**
    ‚Ä¢ –ü—É—Å—Ç–æ: 940 —Ä–∞–∑ (94%)
    ‚Ä¢ 20 –∑–≤–µ–∑–¥: 50 —Ä–∞–∑ (5%)
    ‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 300‚ÇΩ: 10 —Ä–∞–∑ (1%)

    üéØ **–ú–µ–≥–∞-—Ä—É–ª–µ—Ç–∫–∞ - –§–ê–ö–¢:**
    ‚Ä¢ –ü—É—Å—Ç–æ: 99.97%
    ‚Ä¢ iPhone 15: 0.01% (1:10000)
    ‚Ä¢ MacBook Air: 0.01% (1:10000)  
    ‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 10000‚ÇΩ: 0.01% (1:10000)

    ‚ö†Ô∏è **–í–ê–ñ–ù–û:** –í–∏–∑—É–∞–ª—å–Ω–æ —Ä—É–ª–µ—Ç–∫–∞ –ù–ï –∏–∑–º–µ–Ω–∏–ª–∞—Å—å!
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –≤–∏–¥—è—Ç –ø—É—Å—Ç–æ—Ç—É 20%, –∑–≤–µ–∑–¥—ã 10%, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã 70%

    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: /real_chances
            `, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —à–∞–Ω—Å–æ–≤:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –†–ï–ê–õ–¨–ù–´–• —à–∞–Ω—Å–æ–≤
    adminBot.onText(/\/test_real_chances (\d+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const testCount = parseInt(match[1]);
        if (testCount < 100 || testCount > 10000) {
            adminBot.sendMessage(chatId, '‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 100 –¥–æ 10000');
            return;
        }

        try {
            const settings = await getWheelSettings('normal');
            if (!settings) {
                adminBot.sendMessage(chatId, '‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }

            // –°–∏–º—É–ª—è—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏
            const results = {};
            settings.prizes.forEach(prize => {
                results[prize.name] = 0;
            });

            for (let i = 0; i < testCount; i++) {
                const random = Math.random() * 100;
                let cumulative = 0;
                
                for (const prize of settings.prizes) {
                    cumulative += prize.probability;
                    if (random < cumulative) {
                        results[prize.name]++;
                        break;
                    }
                }
            }

            let message = `üß™ **–¢–µ—Å—Ç –†–ï–ê–õ–¨–ù–´–• —à–∞–Ω—Å–æ–≤ (${testCount} –ø—Ä–æ–∫—Ä—É—Ç–æ–∫)**\n\n`;
            
            Object.entries(results).forEach(([name, count]) => {
                const percentage = ((count / testCount) * 100).toFixed(2);
                const expectedPer1000 = testCount >= 1000 ? Math.round((count / testCount) * 1000) : 'N/A';
                message += `‚Ä¢ ${name}: ${count} —Ä–∞–∑ (${percentage}%)`;
                if (testCount >= 1000) {
                    message += ` [–Ω–∞ 1000: ~${expectedPer1000}]`;
                }
                message += `\n`;
            });

            message += `\nüí° –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: /real_chances`;

            adminBot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —à–∞–Ω—Å–æ–≤:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    adminBot.onText(/\/test_sync (\d+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const testCount = parseInt(match[1]);
        if (testCount < 10 || testCount > 1000) {
            adminBot.sendMessage(chatId, '‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000');
            return;
        }

        try {
            const settings = await getWheelSettings('normal');
            if (!settings) {
                adminBot.sendMessage(chatId, '‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—É–ª–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }

            let message = `üß™ **–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞**\n`;
            message += `–¢–µ—Å—Ç–æ–≤: ${testCount}\n\n`;

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤
            const results = {
                empty: 0,
                stars: 0,
                certificate: 0
            };

            for (let i = 0; i < testCount; i++) {
                const random = Math.random() * 100;
                let cumulative = 0;
                
                for (const prize of settings.prizes) {
                    cumulative += prize.probability;
                    if (random < cumulative) {
                        if (prize.type === 'empty') results.empty++;
                        else if (prize.type === 'stars') results.stars++;
                        else if (prize.type === 'certificate') results.certificate++;
                        break;
                    }
                }
            }

            message += `üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤:**\n`;
            message += `‚Ä¢ –ü—É—Å—Ç–æ: ${results.empty} (${((results.empty/testCount)*100).toFixed(1)}%)\n`;
            message += `‚Ä¢ –ó–≤–µ–∑–¥—ã: ${results.stars} (${((results.stars/testCount)*100).toFixed(1)}%)\n`;
            message += `‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: ${results.certificate} (${((results.certificate/testCount)*100).toFixed(1)}%)\n\n`;

            message += `‚úÖ **–ì–∞—Ä–∞–Ω—Ç–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:**\n`;
            message += `‚Ä¢ –ï—Å–ª–∏ –≤—ã–ø–∞–¥–∞—é—Ç –∑–≤–µ–∑–¥—ã ‚Üí —Ä—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–µ ‚≠ê 20\n`;
            message += `‚Ä¢ –ï—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ‚Üí —Ä—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞ –ª—é–±–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ üèÜ\n`;
            message += `‚Ä¢ –ï—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç –ø—É—Å—Ç–æ ‚Üí —Ä—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞ —á–µ—Ä–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ\n\n`;

            message += `üí° –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (100% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)`;

            adminBot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ /set_wheel_prob mega|normal index probability
    adminBot.onText(/\/set_wheel_prob (mega|normal) (\d+) (\d+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, wheelType, prizeIndex, probability] = match;
        const index = parseInt(prizeIndex) - 1; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å 1, –∞ –≤ –º–∞—Å—Å–∏–≤–µ —Å 0
        const prob = parseInt(probability);
        
        try {
            await updateWheelProbability(wheelType, index, prob);
            
            adminBot.sendMessage(chatId, 
                `‚úÖ **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n` +
                `üé∞ –†—É–ª–µ—Ç–∫–∞: ${wheelType === 'mega' ? '–ú–ï–ì–ê' : '–æ–±—ã—á–Ω–∞—è'}\n` +
                `üéÅ –ü—Ä–∏–∑ ‚Ññ${prizeIndex}\n` +
                `üìä –ù–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${prob}%`, 
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ /automation
    adminBot.onText(/\/automation/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            const stats = await getAutomationStats();
            
            const message = `
ü§ñ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏**\n\n` +
                `üì∫ **–ö–∞–Ω–∞–ª—ã:**\n` +
                `‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalChannels}\n` +
                `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeChannels}\n` +
                `‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: ${stats.expiredChannels}\n` +
                `‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: ${stats.completedChannels}\n` +
                `‚Ä¢ –° –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º: ${stats.autoRenewalChannels}\n\n` +
                `üí° **–ö–æ–º–∞–Ω–¥—ã:**\n` +
                `/enable_auto channel_id - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ\n` +
                `/disable_auto channel_id - –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ`;

            adminBot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π /wins_stats
    adminBot.onText(/\/wins_stats/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            const stats = await getWinsChannelStats();
            
            const message = `
üèÜ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π**\n\n` +
                `üìä **–ü—É–±–ª–∏–∫–∞—Ü–∏–∏:**\n` +
                `‚Ä¢ –í—Å–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${stats.totalWinsPosted}\n` +
                `‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: ${stats.todayWinsPosted}\n` +
                `‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: ${stats.weekWinsPosted}\n\n` +
                `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞:**\n` +
                `ID –∫–∞–Ω–∞–ª–∞: \`${process.env.WINS_CHANNEL_ID || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\`\n\n` +
                `üí° **–ö–æ–º–∞–Ω–¥—ã:**\n` +
                `/post_win prize_id - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à –≤—Ä—É—á–Ω—É—é\n` +
                `/test_wins_channel - —Ç–µ—Å—Ç –∫–∞–Ω–∞–ª–∞`;

            adminBot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    });

    // –ó–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É /help –Ω–∞ —ç—Ç—É:

    adminBot.onText(/\/help/, (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const helpMessage = `
üîß **–ü–û–õ–ù–´–ô –ö–û–ù–¢–†–û–õ–¨ –ê–î–ú–ò–ù-–ë–û–¢–ê**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
/stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/users - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏  
/prizes - –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–¥–∞—á–∏ –ø—Ä–∏–∑—ã
/activity - –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
/system - —Å–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
/logs - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤

üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:**
/find —Ç–µ–∫—Å—Ç - –ø–æ–∏—Å–∫ –ø–æ ID/–∏–º–µ–Ω–∏
/user 123456 - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 
/ban 123456 –ø—Ä–∏—á–∏–Ω–∞ - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
/unban 123456 - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
/stars 123456 +100 - –∏–∑–º–µ–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã
/transactions 123456 - –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

üé´ **–ü—Ä–æ–º–æ–∫–æ–¥—ã:**
/promo_create –ö–û–î –ó–í–ï–ó–î–´ - —Å–æ–∑–¥–∞—Ç—å
/promo_list - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö

üóÑÔ∏è **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
/backup - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
/cleanup 30 - –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π

üñ•Ô∏è **–°–∏—Å—Ç–µ–º–∞:**
/restart - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)

üé∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—É–ª–µ—Ç–∫–∏:**
/real_chances - —Ç–µ–∫—É—â–∏–µ —à–∞–Ω—Å—ã
/reset_real_chances - —Å–±—Ä–æ—Å –∫ —É–º–æ–ª—á–∞–Ω–∏—é

‚úÖ **–ü–û–õ–ù–´–ô –ö–û–ù–¢–†–û–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢!**
        `;

        adminBot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
    });

    // === –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –ü–û–õ–ù–û–ì–û –ö–û–ù–¢–†–û–õ–Ø ===

    // –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    adminBot.onText(/\/transactions (\d+)(?:\s(\d+))?/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, targetUserId, limitStr] = match;
        const limit = parseInt(limitStr) || 20;

        try {
            const user = await getUserInfo(parseInt(targetUserId));
            if (!user) {
                adminBot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const transactions = await getUserTransactions(parseInt(targetUserId), limit);
            
            if (transactions.length === 0) {
                adminBot.sendMessage(chatId, `üí≥ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.first_name} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                return;
            }

            let message = `üí≥ **–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${user.first_name}** (${transactions.length})\n\n`;
            
            transactions.forEach((trans, index) => {
                const date = new Date(trans.transaction_date).toLocaleString('ru-RU');
                const amount = trans.amount > 0 ? `+${trans.amount}` : trans.amount;
                const type = getTransactionTypeIcon(trans.transaction_type);
                
                message += `${index + 1}. ${type} **${amount} ‚≠ê**\n`;
                message += `   ‚Ä¢ –¢–∏–ø: ${trans.transaction_type}\n`;
                message += `   ‚Ä¢ –î–∞—Ç–∞: ${date}\n`;
                message += `   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${trans.status}\n`;
                
                if (trans.metadata) {
                    try {
                        const meta = JSON.parse(trans.metadata);
                        if (meta.source) message += `   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: ${meta.source}\n`;
                        if (meta.taskId) message += `   ‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ: ${meta.taskId}\n`;
                    } catch (e) {}
                }
                message += '\n';
            });

            adminBot.sendMessage(chatId, message, { 
                parse_mode: 'Markdown',
                disable_web_page_preview: true 
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    adminBot.onText(/\/ban (\d+)(?:\s(.+))?/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, targetUserId, reason] = match;
        const banReason = reason || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª';

        try {
            await banUser(parseInt(targetUserId), banReason);
            const user = await getUserInfo(parseInt(targetUserId));
            
            adminBot.sendMessage(chatId, 
                `üîí **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**\n\n` +
                `üë§ ${user.first_name} (${targetUserId})\n` +
                `üìù –ü—Ä–∏—á–∏–Ω–∞: ${banReason}`, 
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    adminBot.onText(/\/unban (\d+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, targetUserId] = match;

        try {
            await unbanUser(parseInt(targetUserId));
            const user = await getUserInfo(parseInt(targetUserId));
            
            adminBot.sendMessage(chatId, 
                `üîì **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**\n\n` +
                `üë§ ${user.first_name} (${targetUserId})`, 
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ –∏–º–µ–Ω–∏
    adminBot.onText(/\/find (.+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, searchTerm] = match;

        try {
            const users = await findUsers(searchTerm);
            
            if (users.length === 0) {
                adminBot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: "${searchTerm}"`);
                return;
            }

            let message = `üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${searchTerm}"**\n\n`;
            
            users.slice(0, 10).forEach((user, index) => {
                const lastActivity = new Date(user.last_activity).toLocaleString('ru-RU');
                message += `${index + 1}. **${user.first_name}**\n`;
                message += `   ‚Ä¢ ID: \`${user.telegram_id}\`\n`;
                message += `   ‚Ä¢ Username: ${user.username ? `@${user.username}` : '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
                message += `   ‚Ä¢ –ó–≤–µ–∑–¥: ${user.stars} ‚≠ê\n`;
                message += `   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity}\n`;
                message += `   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${user.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n`;
            });

            if (users.length > 10) {
                message += `\n... –∏ –µ—â–µ ${users.length - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
            }

            adminBot.sendMessage(chatId, message, { 
                parse_mode: 'Markdown',
                disable_web_page_preview: true 
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    adminBot.onText(/\/user (\d+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, targetUserId] = match;

        try {
            const user = await getUserInfo(parseInt(targetUserId));
            if (!user) {
                adminBot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const joinDate = new Date(user.join_date).toLocaleString('ru-RU');
            const lastActivity = new Date(user.last_activity).toLocaleString('ru-RU');
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const referralsCount = await db.getUserReferralsCount(parseInt(targetUserId));
            const prizes = await getUserPendingPrizes(parseInt(targetUserId));

            let message = `üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n`;
            message += `üìù **–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n`;
            message += `‚Ä¢ –ò–º—è: ${user.first_name}\n`;
            message += `‚Ä¢ Username: ${user.username ? `@${user.username}` : '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
            message += `‚Ä¢ ID: \`${user.telegram_id}\`\n`;
            message += `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${user.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n`;
            
            message += `üí∞ **–ë–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
            message += `‚Ä¢ –ó–≤–µ–∑–¥: ${user.stars} ‚≠ê\n`;
            message += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${user.total_stars_earned} ‚≠ê\n`;
            message += `‚Ä¢ –ü—Ä–æ–∫—Ä—É—Ç–æ–∫: ${user.total_spins}\n`;
            message += `‚Ä¢ –ü—Ä–∏–∑–æ–≤ –≤—ã–∏–≥—Ä–∞–Ω–æ: ${user.prizes_won}\n\n`;
            
            message += `üìÖ **–î–∞—Ç—ã:**\n`;
            message += `‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${joinDate}\n`;
            message += `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity}\n\n`;
            
            message += `üë• **–†–µ—Ñ–µ—Ä–∞–ª—ã:**\n`;
            message += `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${referralsCount}\n`;
            message += `‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ —Å–ø–∏–Ω–æ–≤ –∑–∞ –¥—Ä—É–≥–∞: ${user.available_friend_spins || 0}\n\n`;
            
            if (prizes.length > 0) {
                message += `üéÅ **–û–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–∏–∑—ã (${prizes.length}):**\n`;
                prizes.slice(0, 3).forEach(prize => {
                    message += `‚Ä¢ ${prize.prize_name}\n`;
                });
                if (prizes.length > 3) {
                    message += `... –∏ –µ—â–µ ${prizes.length - 3}\n`;
                }
            } else {
                message += `üéÅ **–ü—Ä–∏–∑—ã:** –û–∂–∏–¥–∞—é—â–∏—Ö –Ω–µ—Ç\n`;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã', callback_data: `admin_stars_${targetUserId}` },
                        { text: 'üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑', callback_data: `admin_prize_${targetUserId}` }
                    ],
                    [
                        { text: 'üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', callback_data: `admin_trans_${targetUserId}` },
                        { text: 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: `admin_ban_${targetUserId}` }
                    ]
                ]
            };

            adminBot.sendMessage(chatId, message, { 
                parse_mode: 'Markdown',
                reply_markup: keyboard,
                disable_web_page_preview: true 
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    adminBot.onText(/\/system/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            const systemInfo = await getSystemInfo();
            
            let message = `üñ•Ô∏è **–°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞**\n\n`;
            message += `üü¢ **–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:**\n`;
            message += `‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${systemInfo.database ? '‚úÖ' : '‚ùå'}\n`;
            message += `‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${systemInfo.mainBot ? '‚úÖ' : '‚ùå'}\n`;
            message += `‚Ä¢ –ê–¥–º–∏–Ω-–±–æ—Ç: ‚úÖ (—Ä–∞–±–æ—Ç–∞–µ—Ç)\n`;
            message += `‚Ä¢ WebApp: ${systemInfo.webapp ? '‚úÖ' : '‚ùå'}\n\n`;
            
            message += `üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**\n`;
            message += `‚Ä¢ –¢–∏–ø: ${systemInfo.dbType}\n`;
            message += `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${systemInfo.totalUsers}\n`;
            message += `‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${systemInfo.totalTransactions}\n`;
            message += `‚Ä¢ –ü—Ä–∏–∑–æ–≤: ${systemInfo.totalPrizes}\n\n`;
            
            message += `üîß **–°–∏—Å—Ç–µ–º–∞:**\n`;
            message += `‚Ä¢ Node.js: ${process.version}\n`;
            message += `‚Ä¢ –ü–∞–º—è—Ç—å: ${Math.round(process.memoryUsage().rss / 1024 / 1024)} MB\n`;
            message += `‚Ä¢ –ê–ø—Ç–∞–π–º: ${Math.round(process.uptime() / 60)} –º–∏–Ω\n\n`;
            
            message += `‚öôÔ∏è **–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n`;
            message += `/restart - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É\n`;
            message += `/logs - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤\n`;
            message += `/backup - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î`;

            adminBot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
    adminBot.onText(/\/promo_create (\w+) (\d+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, promoCode, stars] = match;
        const starsAmount = parseInt(stars);

        if (starsAmount < 1 || starsAmount > 10000) {
            adminBot.sendMessage(chatId, '‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10000');
            return;
        }

        try {
            await createPromoCode(promoCode, starsAmount);
            
            adminBot.sendMessage(chatId, 
                `‚úÖ **–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!**\n\n` +
                `üé´ –ö–æ–¥: \`${promoCode}\`\n` +
                `‚≠ê –ó–≤–µ–∑–¥: ${starsAmount}\n` +
                `üîó –ê–∫—Ç–∏–≤–∞—Ü–∏—è: /promo ${promoCode}`, 
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    adminBot.onText(/\/promo_list/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            const promos = await getActivePromoCodes();
            
            if (promos.length === 0) {
                adminBot.sendMessage(chatId, 'üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç\n\n–°–æ–∑–¥–∞—Ç—å: /promo_create –ö–û–î_–ó–í–ï–ó–î–´');
                return;
            }

            let message = `üé´ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:**\n\n`;
            
            promos.forEach((promo, index) => {
                message += `${index + 1}. **${promo.code}**\n`;
                message += `   ‚Ä¢ –ó–≤–µ–∑–¥: ${promo.stars} ‚≠ê\n`;
                message += `   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${promo.used_count}\n`;
                message += `   ‚Ä¢ –°–æ–∑–¥–∞–Ω: ${new Date(promo.created_date).toLocaleDateString('ru-RU')}\n\n`;
            });

            message += `üí° **–ö–æ–º–∞–Ω–¥—ã:**\n`;
            message += `/promo_create –ö–û–î –ó–í–ï–ó–î–´ - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π\n`;
            message += `/promo_disable –ö–û–î - –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥`;

            adminBot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    adminBot.onText(/\/cleanup (\d+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, daysStr] = match;
        const days = parseInt(daysStr);

        if (days < 7 || days > 365) {
            adminBot.sendMessage(chatId, '‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 7 –¥–æ 365');
            return;
        }

        try {
            adminBot.sendMessage(chatId, `üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ ${days} –¥–Ω–µ–π...`);
            
            const result = await db.cleanupOldData(days);
            
            adminBot.sendMessage(chatId, 
                `‚úÖ **–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n` +
                `üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${result.transactions_deleted}\n` +
                `üé∞ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å–ø–∏–Ω–æ–≤: ${result.spins_deleted}\n` +
                `üíæ –ú–µ—Å—Ç–æ –≤ –ë–î –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ`, 
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
            adminBot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    adminBot.onText(/\/backup/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            adminBot.sendMessage(chatId, 'üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
            
            const users = await db.backupUsers();
            const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');
            const filename = `users_backup_${timestamp}.json`;
            
            // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
            const fs = require('fs');
            fs.writeFileSync(filename, JSON.stringify(users, null, 2));
            
            adminBot.sendMessage(chatId, 
                `‚úÖ **–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω**\n\n` +
                `üìÅ –§–∞–π–ª: ${filename}\n` +
                `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n` +
                `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`,
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
            adminBot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: ${error.message}`);
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    adminBot.onText(/\/activity/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            const activity = await db.getRecentActivity(15);
            
            let message = 'üìä **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**\n\n';
            
            if (activity.length === 0) {
                message += '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏';
            } else {
                activity.forEach(record => {
                    const name = record.first_name || record.username || `ID${record.telegram_id}`;
                    const amount = record.amount > 0 ? `+${record.amount}` : record.amount;
                    const date = new Date(record.transaction_date).toLocaleString('ru-RU');
                    
                    message += `üë§ ${name}\n`;
                    message += `üí∞ ${amount} ‚≠ê (${record.transaction_type})\n`;
                    message += `‚è∞ ${date}\n\n`;
                });
            }
            
            adminBot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
            adminBot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    });

    // === –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–û–ô ===

    // –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã  
    adminBot.onText(/\/restart/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        adminBot.sendMessage(chatId, 
            'üîÑ **–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n' +
            '‚ö†Ô∏è –≠—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç –≤–µ—Å—å —Å–µ—Ä–≤–µ—Ä\n' +
            '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ: /restart_confirm',
            { parse_mode: 'Markdown' }
        );
    });

    adminBot.onText(/\/restart_confirm/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) return;

        try {
            adminBot.sendMessage(chatId, 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
            
            setTimeout(() => {
                console.log('üîÑ –ê–¥–º–∏–Ω –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É');
                process.exit(0);
            }, 3000);
        } catch (error) {
            adminBot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    adminBot.onText(/\/logs/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) return;

        try {
            const systemInfo = await getSystemInfo();
            
            let message = `üìã **–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏**\n\n`;
            message += `üñ•Ô∏è **–ü—Ä–æ—Ü–µ—Å—Å:**\n`;
            message += `‚Ä¢ PID: ${process.pid}\n`;
            message += `‚Ä¢ Node.js: ${process.version}\n`;
            message += `‚Ä¢ –ü–∞–º—è—Ç—å: ${Math.round(process.memoryUsage().rss / 1024 / 1024)} MB\n`;
            message += `‚Ä¢ –ê–ø—Ç–∞–π–º: ${Math.round(process.uptime() / 60)} –º–∏–Ω\n\n`;
            
            if (systemInfo.totalUsers) {
                message += `üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**\n`;
                message += `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${systemInfo.totalUsers}\n`;
                message += `‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${systemInfo.totalTransactions}\n`;
                message += `‚Ä¢ –ü—Ä–∏–∑–æ–≤: ${systemInfo.totalPrizes}\n\n`;
            }
            
            message += `‚öôÔ∏è **–ö–æ–º–∞–Ω–¥—ã:**\n`;
            message += `/system - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n`;
            message += `/restart - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞`;

            adminBot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } catch (error) {
            adminBot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
    adminBot.on('callback_query', async (callbackQuery) => {
        const chatId = callbackQuery.message.chat.id;
        const userId = callbackQuery.from.id;
        const data = callbackQuery.data;

        if (!isAdmin(userId)) {
            adminBot.answerCallbackQuery(callbackQuery.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            if (data.startsWith('admin_stars_')) {
                const targetUserId = data.split('_')[2];
                adminBot.sendMessage(chatId, 
                    `üí∞ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}**\n\n` +
                    `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n` +
                    `\`/stars ${targetUserId} +100\` - –¥–æ–±–∞–≤–∏—Ç—å 100 –∑–≤–µ–∑–¥\n` +
                    `\`/stars ${targetUserId} -50\` - –∑–∞–±—Ä–∞—Ç—å 50 –∑–≤–µ–∑–¥`, 
                    { parse_mode: 'Markdown' }
                );
            }
            else if (data.startsWith('admin_trans_')) {
                const targetUserId = data.split('_')[2];
                adminBot.sendMessage(chatId, 
                    `üí≥ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n\`/transactions ${targetUserId}\``, 
                    { parse_mode: 'Markdown' }
                );
            }

            adminBot.answerCallbackQuery(callbackQuery.id);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ callback:', error);
            adminBot.answerCallbackQuery(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞');
        }
    });
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async function getQuickStats() {
    return new Promise((resolve, reject) => {
        db.db.get(`
            SELECT 
                COUNT(*) as totalUsers,
                SUM(CASE WHEN date(last_activity) = date('now') THEN 1 ELSE 0 END) as activeToday,
                SUM(CASE WHEN date(join_date) > date('now', '-7 days') THEN 1 ELSE 0 END) as newThisWeek,
                SUM(total_spins) as totalSpins
            FROM users
        `, (err, userStats) => {
            if (err) {
                reject(err);
                return;
            }

            db.db.get(`
                SELECT 
                    COUNT(*) as pendingPrizes,
                    SUM(CASE WHEN prize_type LIKE '%certificate%' THEN 1 ELSE 0 END) as pendingCertificates
                FROM user_prizes WHERE is_claimed = 0
            `, (err, prizeStats) => {
                if (err) {
                    reject(err);
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                db.db.get(`
                    SELECT 
                        (SELECT COUNT(*) FROM user_prizes WHERE is_claimed = 1) as totalGiven,
                        (SELECT COUNT(*) FROM stars_transactions WHERE date(transaction_date) = date('now')) as depositsToday,
                        (SELECT IFNULL(SUM(amount), 0) FROM stars_transactions WHERE date(transaction_date) = date('now') AND transaction_type = 'deposit') as depositAmountToday,
                        (SELECT COUNT(*) FROM partner_channels WHERE is_active = 1) as activeChannels,
                        (SELECT COUNT(*) FROM partner_channels WHERE is_hot_offer = 1 AND is_active = 1) as hotOffers
                `, (err, additionalStats) => {
                    if (err) {
                        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        resolve({
                            ...userStats,
                            ...prizeStats,
                            spinsToday: userStats.totalSpins || 0,
                            activeChannels: 0,
                            hotOffers: 0,
                            depositsToday: 0,
                            depositAmountToday: 0,
                            totalGiven: 0
                        });
                    } else {
                        resolve({
                            ...userStats,
                            ...prizeStats,
                            spinsToday: userStats.totalSpins || 0,
                            activeChannels: additionalStats.activeChannels || 0,
                            hotOffers: additionalStats.hotOffers || 0,
                            depositsToday: additionalStats.depositsToday || 0,
                            depositAmountToday: additionalStats.depositAmountToday || 0,
                            totalGiven: additionalStats.totalGiven || 0
                        });
                    }
                });
            });
        });
    });
}

async function getRecentUsers(limit = 10) {
    return new Promise((resolve, reject) => {
        db.db.all(`
            SELECT telegram_id, first_name, stars, last_activity
            FROM users 
            ORDER BY last_activity DESC 
            LIMIT ?
        `, [limit], (err, rows) => {
            if (err) reject(err);
            else resolve(rows || []);
        });
    });
}

async function getPendingPrizes(limit = 5) {
    return new Promise((resolve, reject) => {
        db.db.all(`
            SELECT p.*, u.first_name as user_name, u.telegram_id as user_telegram_id
            FROM user_prizes p
            JOIN users u ON p.user_id = u.id
            WHERE p.is_claimed = 0
            ORDER BY p.won_date DESC
            LIMIT ?
        `, [limit], (err, rows) => {
            if (err) reject(err);
            else resolve(rows || []);
        });
    });
}

function getPrizeIcon(type) {
    const icons = {
        'certificate': 'üèÜ',
        'cosmetics': 'üíÑ',
        'stars': '‚≠ê',
        'empty': '‚ùå'
    };
    return icons[type] || 'üéÅ';
}

async function sendBroadcast(message) {
    return new Promise((resolve, reject) => {
        db.db.all('SELECT telegram_id FROM users WHERE is_active = 1', async (err, users) => {
            if (err) {
                reject(err);
                return;
            }

            let sent = 0;
            let errors = 0;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
            const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
            
            for (const user of users) {
                try {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                    if (global.mainBot) {
                        await global.mainBot.sendMessage(user.telegram_id, message);
                    } else {
                        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω-–±–æ—Ç–∞
                        await adminBot.sendMessage(user.telegram_id, message);
                    }
                    sent++;
                    
                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
                    if (sent % 30 === 0) {
                        await delay(1000); // 1 —Å–µ–∫—É–Ω–¥–∞ –∫–∞–∂–¥—ã–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π
                    }
                    
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, error.message);
                    errors++;
                }
            }
            
            resolve({
                sent,
                errors,
                total: users.length,
                message: `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sent}, –æ—à–∏–±–æ–∫ ${errors}`
            });
        });
    });
}

// === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===

async function adjustUserStars(telegramId, amount) {
    return new Promise((resolve, reject) => {
        db.db.run(`
            UPDATE users 
            SET stars = stars + ?, 
                total_stars_earned = total_stars_earned + ?
            WHERE telegram_id = ?
        `, [amount, Math.max(0, amount), telegramId], (err) => {
            if (err) reject(err);
            else resolve();
        });
    });
}

async function getUserInfo(telegramId) {
    return new Promise((resolve, reject) => {
        db.db.get(`
            SELECT * FROM users WHERE telegram_id = ?
        `, [telegramId], (err, row) => {
            if (err) reject(err);
            else resolve(row);
        });
    });
}

async function addUserPrize(telegramId, prizeData) {
    return new Promise((resolve, reject) => {
        db.db.run(`
            INSERT INTO user_prizes (user_id, prize_type, prize_name, prize_value) 
            SELECT id, ?, ?, ? FROM users WHERE telegram_id = ?
        `, [prizeData.type, prizeData.name, prizeData.value, telegramId], function(err) {
            if (err) reject(err);
            else resolve(this.lastID);
        });
    });
}

// === –§–£–ù–ö–¶–ò–ò –†–£–õ–ï–¢–ö–ò ===

async function getWheelSettings(wheelType) {
    return new Promise((resolve, reject) => {
        db.db.get(`
            SELECT * FROM wheel_settings WHERE wheel_type = ?
        `, [wheelType], (err, row) => {
            if (err) {
                reject(err);
            } else if (row) {
                try {
                    resolve({
                        prizes: JSON.parse(row.settings_data)
                    });
                } catch (parseErr) {
                    reject(new Error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + parseErr.message));
                }
            } else {
                resolve(null);
            }
        });
    });
}

async function updateWheelProbability(wheelType, prizeIndex, probability) {
    return new Promise(async (resolve, reject) => {
        try {
            const settings = await getWheelSettings(wheelType);
            if (!settings || !settings.prizes[prizeIndex]) {
                reject(new Error('–ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'));
                return;
            }

            settings.prizes[prizeIndex].probability = probability;
            const settingsData = JSON.stringify(settings.prizes);

            db.db.run(`
                INSERT OR REPLACE INTO wheel_settings (wheel_type, settings_data, updated_at) 
                VALUES (?, ?, datetime('now'))
            `, [wheelType, settingsData], (err) => {
                if (err) reject(err);
                else resolve();
            });
        } catch (error) {
            reject(error);
        }
    });
}

function getPrizeIconByType(type) {
    const icons = {
        'certificate': 'üèÜ',
        'cert5000': 'üíé',
        'cert3000': 'üíç', 
        'cert2000': 'üí∞',
        'cert1000': 'üèÖ',
        'cosmetics': 'üíÑ',
        'airpods4': 'üéß',
        'powerbank': 'üîã',
        'charger': '‚ö°',
        'golden-apple': 'üçé',
        'dolce': 'üíÑ',
        'stars': '‚≠ê',
        'empty': '‚ùå'
    };
    return icons[type] || 'üéÅ';
}

// === –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò ===

async function getAutomationStats() {
    return new Promise((resolve, reject) => {
        db.db.get(`
            SELECT 
                COUNT(*) as totalChannels,
                COUNT(CASE WHEN is_active = 1 THEN 1 END) as activeChannels,
                COUNT(CASE WHEN is_active = 0 AND deactivation_reason = 'time_expired' THEN 1 END) as expiredChannels,
                COUNT(CASE WHEN is_active = 0 AND deactivation_reason = 'target_reached' THEN 1 END) as completedChannels,
                COUNT(CASE WHEN auto_renewal = 1 THEN 1 END) as autoRenewalChannels
            FROM partner_channels
        `, (err, row) => {
            if (err) reject(err);
            else resolve(row || {});
        });
    });
}

async function getWinsChannelStats() {
    return new Promise((resolve, reject) => {
        db.db.get(`
            SELECT 
                COUNT(*) as totalWinsPosted,
                COUNT(CASE WHEN posted_to_channel_date >= datetime('now', '-24 hours') THEN 1 END) as todayWinsPosted,
                COUNT(CASE WHEN posted_to_channel_date >= datetime('now', '-7 days') THEN 1 END) as weekWinsPosted
            FROM user_prizes 
            WHERE is_posted_to_channel = 1
        `, (err, row) => {
            if (err) reject(err);
            else resolve(row || { totalWinsPosted: 0, todayWinsPosted: 0, weekWinsPosted: 0 });
        });
    });
}

// === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–ù–ê–õ–ê–ú–ò ===

async function getActiveChannels() {
    return new Promise((resolve, reject) => {
        db.db.all(`
            SELECT * FROM partner_channels 
            WHERE is_active = 1 
            ORDER BY is_hot_offer DESC, created_date DESC
        `, (err, rows) => {
            if (err) reject(err);
            else resolve(rows || []);
        });
    });
}

async function addChannel(channelData) {
    return new Promise((resolve, reject) => {
        const { username, name, stars, hours } = channelData;
        
        db.db.run(`
            INSERT INTO partner_channels 
            (channel_username, channel_name, reward_stars, placement_duration, placement_type, is_active, created_date) 
            VALUES (?, ?, ?, ?, 'time', 1, CURRENT_TIMESTAMP)
        `, [username, name, stars, hours], function(err) {
            if (err) reject(err);
            else resolve(this.lastID);
        });
    });
}

async function removeChannel(username) {
    return new Promise((resolve, reject) => {
        db.db.run(`
            UPDATE partner_channels 
            SET is_active = 0 
            WHERE channel_username = ?
        `, [username], function(err) {
            if (err) reject(err);
            else resolve(this.changes);
        });
    });
}

async function setHotChannel(username) {
    return new Promise((resolve, reject) => {
        // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –≥–æ—Ä—è—á–∏–π —Å—Ç–∞—Ç—É—Å —É –≤—Å–µ—Ö
        db.db.run(`UPDATE partner_channels SET is_hot_offer = 0`, (err) => {
            if (err) {
                reject(err);
                return;
            }
            
            // –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä—è—á–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            db.db.run(`
                UPDATE partner_channels 
                SET is_hot_offer = 1, end_date = datetime('now', '+1 hour')
                WHERE channel_username = ? AND is_active = 1
            `, [username], function(err) {
                if (err) reject(err);
                else resolve(this.changes);
            });
        });
    });
}

// === –ù–ï –ó–ê–ü–£–°–ö–ê–ï–ú –û–¢–î–ï–õ–¨–ù–´–ô –°–ï–†–í–ï–† ===
// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä telegram-bot-server.js
console.log(`‚úÖ –ê–¥–º–∏–Ω-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞)`);
console.log(`üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä: ${ADMIN_URL}/admin/`);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception in Admin Bot:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection in Admin Bot:', reason);
});

// === –ù–û–í–´–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserTransactions(telegramId, limit = 20) {
    return await db.getUserTransactions(telegramId, limit);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserPendingPrizes(telegramId) {
    return await db.getUserPrizes(telegramId);
}

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID –∏–ª–∏ –∏–º–µ–Ω–∏
async function findUsers(searchTerm) {
    return await db.searchUsers(searchTerm);
}

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function banUser(telegramId, reason) {
    return await db.banUser(telegramId, reason);
}

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
async function unbanUser(telegramId) {
    return await db.unbanUser(telegramId);
}

// –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
async function getSystemInfo() {
    try {
        const stats = await db.getSystemStats();
        const memUsage = process.memoryUsage();
        
        return {
            database: true,
            mainBot: true,
            webapp: true,
            dbType: process.env.DATABASE_URL ? 'PostgreSQL' : 'SQLite',
            totalUsers: stats.users.total_users,
            totalTransactions: stats.today_transactions.count,
            totalPrizes: 0, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
            memory: {
                rss: memUsage.rss,
                heapUsed: memUsage.heapUsed,
                external: memUsage.external
            },
            uptime: process.uptime()
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
        return {
            database: false,
            mainBot: false,
            webapp: false,
            dbType: 'Unknown',
            totalUsers: 0,
            totalTransactions: 0,
            totalPrizes: 0
        };
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
async function createPromoCode(code, stars) {
    return await db.createPromoCode(code, stars);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
async function getActivePromoCodes() {
    return await db.getActivePromoCodes();
}

// –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function cleanupInactiveUsers(days) {
    return new Promise((resolve, reject) => {
        const cutoffDate = new Date();
        cutoffDate.setDate(cutoffDate.getDate() - days);
        
        // –°–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–æ
        db.db.get(
            'SELECT COUNT(*) as count FROM users WHERE last_activity < ? AND is_active = 1',
            [cutoffDate.toISOString()],
            (err, countResult) => {
                if (err) {
                    reject(err);
                    return;
                }
                
                // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö (–Ω–µ —É–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é)
                db.db.run(
                    'UPDATE users SET is_active = 0 WHERE last_activity < ? AND is_active = 1',
                    [cutoffDate.toISOString()],
                    function(err) {
                        if (err) reject(err);
                        else resolve({
                            found: countResult.count,
                            cleaned: this.changes
                        });
                    }
                );
            }
        );
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
async function createBackup() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `backup-${timestamp}.sql`;
    
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —ç–∫—Å–ø–æ—Ä—Ç –ë–î
    return {
        filename: filename,
        size: '2.5',
        date: new Date().toLocaleString('ru-RU')
    };
}

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function getTransactionTypeIcon(type) {
    const icons = {
        'spin_cost': 'üé∞',
        'prize_won': 'üéÅ',
        'referral_bonus': 'üë•',
        'task_reward': '‚úÖ',
        'channel_subscription': 'üì∫',
        'partner_channel': 'ü§ù',
        'achievement': 'üèÜ',
        'deposit': 'üí≥',
        'admin_adjustment': '‚öôÔ∏è',
        'promo_code': 'üé´',
        'bonus': 'üéâ'
    };
    return icons[type] || 'üí∞';
}

console.log('‚úÖ –ê–¥–º–∏–Ω-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
