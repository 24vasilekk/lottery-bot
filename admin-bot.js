// admin-bot.js - –û—Ç–¥–µ–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const path = require('path');
const fs = require('fs');
const Database = require('./database');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (fs.existsSync('.env')) {
    require('dotenv').config();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
const ADMIN_BOT_TOKEN = process.env.ADMIN_BOT_TOKEN;
if (!ADMIN_BOT_TOKEN) {
    console.error('‚ùå ADMIN_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.error('–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–±–æ—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ ADMIN_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.error('–í Render: Settings -> Environment -> Add Environment Variable');
    console.log('\n‚ö†Ô∏è  –ê–¥–º–∏–Ω-–±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –±–µ–∑ —Ç–æ–∫–µ–Ω–∞');
    process.exit(0); // –í—ã—Ö–æ–¥–∏–º —Å –∫–æ–¥–æ–º 0, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
}

const ADMIN_IDS = (process.env.ADMIN_IDS || '').split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));
if (ADMIN_IDS.length === 0) {
    console.error('‚ùå ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.error('–î–æ–±–∞–≤—å—Ç–µ ADMIN_IDS=123456789,987654321 –≤ .env —Ñ–∞–π–ª');
    process.exit(1);
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
const PORT = process.env.ADMIN_PORT || 3001;
const ADMIN_URL = process.env.ADMIN_URL || 
    (process.env.RAILWAY_PUBLIC_DOMAIN 
        ? `https://${process.env.RAILWAY_PUBLIC_DOMAIN}` 
        : `http://localhost:${PORT}`);

console.log('üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù-–ë–û–¢–ê');
console.log('===============================');
console.log(`   ü§ñ –ê–¥–º–∏–Ω –±–æ—Ç —Ç–æ–∫–µ–Ω: ${ADMIN_BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù ‚ùå'}`);
console.log(`   üë• –ê–¥–º–∏–Ω—ã: ${ADMIN_IDS.join(', ')}`);
console.log(`   üåê –ê–¥–º–∏–Ω URL: ${ADMIN_URL}`);
console.log(`   üîß –ü–æ—Ä—Ç: ${PORT}`);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const app = express();
const db = new Database();
let adminBot = null;

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, 'admin')));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
try {
    adminBot = new TelegramBot(ADMIN_BOT_TOKEN, { polling: true });
    console.log('‚úÖ –ê–¥–º–∏–Ω-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–±–æ—Ç–∞:', error.message);
    process.exit(1);
}

// === MIDDLEWARES ===

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
function isAdmin(userId) {
    return ADMIN_IDS.includes(userId);
}

// === –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù-–ë–û–¢–ê ===

if (adminBot) {
    // –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞
    adminBot.onText(/\/start/, (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–±–æ—Ç—É');
            return;
        }

        const welcomeMessage = `
üîß **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Kosmetichka Lottery Bot**

üëã –ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}!

üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/panel - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø–∞–Ω–µ–ª—å
/stats - –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
/users - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
/channels - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
/prizes - –û–∂–∏–¥–∞—é—â–∏–µ –≤—ã–¥–∞—á–∏ –ø—Ä–∏–∑—ã
/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
/backup - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
/help - –ü–æ–º–æ—â—å

üåê **–í–µ–±-–ø–∞–Ω–µ–ª—å:** ${ADMIN_URL}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π.
        `;

        adminBot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /panel - –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø–∞–Ω–µ–ª—å
    adminBot.onText(/\/panel/, (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const keyboard = {
            inline_keyboard: [
                [
                    { 
                        text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 
                        url: ADMIN_URL 
                    }
                ]
            ]
        };

        adminBot.sendMessage(chatId, 'üîß –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø–∞–Ω–µ–ª—å:', {
            reply_markup: keyboard
        });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stats - –±—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    adminBot.onText(/\/stats/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
            const stats = await getQuickStats();
            
            const message = `
üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalUsers}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.activeToday}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.newThisWeek}

üé∞ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –ü—Ä–æ–∫—Ä—É—Ç–æ–∫ —Å–µ–≥–æ–¥–Ω—è: ${stats.spinsToday}
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫: ${stats.totalSpins}

üéÅ **–ü—Ä–∏–∑—ã:**
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –≤—ã–¥–∞—á–∏: ${stats.pendingPrizes}
‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: ${stats.pendingCertificates}
‚Ä¢ –í—ã–¥–∞–Ω–æ –≤—Å–µ–≥–æ: ${stats.totalGiven}

üì∫ **–ö–∞–Ω–∞–ª—ã:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeChannels}
‚Ä¢ –ì–æ—Ä—è—á–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${stats.hotOffers}

üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**
‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: ${stats.depositsToday}
‚Ä¢ –°—É–º–º–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${stats.depositAmountToday} ‚≠ê

üìÖ **–î–∞—Ç–∞:** ${new Date().toLocaleString('ru-RU')}
            `;

            adminBot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /users - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    adminBot.onText(/\/users/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            const users = await getRecentUsers(10);
            
            if (users.length === 0) {
                adminBot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }

            let message = 'üë• **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n';
            
            users.forEach((user, index) => {
                const lastActivity = new Date(user.last_activity).toLocaleString('ru-RU');
                message += `${index + 1}. **${user.first_name}**\n`;
                message += `   ‚Ä¢ ID: \`${user.telegram_id}\`\n`;
                message += `   ‚Ä¢ –ó–≤–µ–∑–¥: ${user.stars} ‚≠ê\n`;
                message += `   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity}\n\n`;
            });

            adminBot.sendMessage(chatId, message, { 
                parse_mode: 'Markdown',
                disable_web_page_preview: true 
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /prizes - –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–∏–∑—ã
    adminBot.onText(/\/prizes/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            const prizes = await getPendingPrizes(5);
            
            if (prizes.length === 0) {
                adminBot.sendMessage(chatId, 'üéâ –í—Å–µ –ø—Ä–∏–∑—ã –≤—ã–¥–∞–Ω—ã!');
                return;
            }

            let message = 'üéÅ **–ü—Ä–∏–∑—ã –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–¥–∞—á–∏:**\n\n';
            
            prizes.forEach((prize, index) => {
                const wonDate = new Date(prize.won_date).toLocaleString('ru-RU');
                const prizeIcon = getPrizeIcon(prize.prize_type);
                
                message += `${index + 1}. ${prizeIcon} **${prize.prize_name}**\n`;
                message += `   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${prize.user_name}\n`;
                message += `   ‚Ä¢ ID: \`${prize.user_telegram_id}\`\n`;
                message += `   ‚Ä¢ –í—ã–∏–≥—Ä–∞–ª: ${wonDate}\n\n`;
            });

            if (prizes.length >= 5) {
                message += `\nüåê [–û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –∞–¥–º–∏–Ω–∫–µ](${ADMIN_URL})`;
            }

            adminBot.sendMessage(chatId, message, { 
                parse_mode: 'Markdown',
                disable_web_page_preview: true 
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞
    adminBot.onText(/\/broadcast (.+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const message = match[1];

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            const result = await sendBroadcast(message);
            adminBot.sendMessage(chatId, 
                `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n` +
                `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.sent}\n` +
                `‚ùå –û—à–∏–±–æ–∫: ${result.errors}\n` +
                `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.total}`
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
    adminBot.onText(/\/channels/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        try {
            const channels = await getActiveChannels();
            
            if (channels.length === 0) {
                const helpMessage = `
üì∫ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏**

–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:

**–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:**
\`/add_channel @username "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞" 50 24\`

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚Ä¢ @username - —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞
‚Ä¢ "–ù–∞–∑–≤–∞–Ω–∏–µ" - –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö  
‚Ä¢ 50 - –Ω–∞–≥—Ä–∞–¥–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö
‚Ä¢ 24 - —á–∞—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

**–ü—Ä–∏–º–µ—Ä:**
\`/add_channel @beauty_channel "–ö–∞–Ω–∞–ª –∫—Ä–∞—Å–æ—Ç—ã" 50 24\`

**–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:**
/remove_channel @username - —É–¥–∞–ª–∏—Ç—å
/hot_channel @username - —Å–¥–µ–ª–∞—Ç—å –≥–æ—Ä—è—á–∏–º (—Ö2 –∑–≤–µ–∑–¥ –Ω–∞ —á–∞—Å)
                `;
                adminBot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
                return;
            }

            let message = 'üì∫ **–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:**\n\n';
            
            channels.forEach((channel, index) => {
                const isHot = channel.is_hot_offer ? 'üî• ' : '';
                const status = channel.is_active ? '‚úÖ' : '‚ùå';
                
                message += `${index + 1}. ${isHot}**${channel.channel_name}**\n`;
                message += `   ‚Ä¢ @${channel.channel_username} ${status}\n`;
                message += `   ‚Ä¢ –ù–∞–≥—Ä–∞–¥–∞: ${channel.reward_stars} ‚≠ê\n`;
                message += `   ‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${channel.current_subscribers || 0}\n`;
                
                if (channel.placement_type === 'time' && channel.placement_duration) {
                    message += `   ‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: ${channel.placement_duration}—á\n`;
                }
                
                message += '\n';
            });

            message += `\nüìä **–ò—Ç–æ–≥–æ:** ${channels.length} –∫–∞–Ω–∞–ª–æ–≤\n`;
            message += `üî• **–ì–æ—Ä—è—á–∏—Ö:** ${channels.filter(c => c.is_hot_offer).length}\n\n`;
            message += `üí° **–ö–æ–º–∞–Ω–¥—ã:**\n`;
            message += `/add_channel @username "–ù–∞–∑–≤–∞–Ω–∏–µ" 50 24\n`;
            message += `/remove_channel @username\n`;
            message += `/hot_channel @username`;

            adminBot.sendMessage(chatId, message, { 
                parse_mode: 'Markdown',
                disable_web_page_preview: true 
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ /add_channel @username "Name" stars hours
    adminBot.onText(/\/add_channel @(\w+) "([^"]+)" (\d+) (\d+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, username, name, stars, hours] = match;
        
        try {
            await addChannel({
                username: username,
                name: name,
                stars: parseInt(stars),
                hours: parseInt(hours)
            });
            
            adminBot.sendMessage(chatId, 
                `‚úÖ **–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n` +
                `üì∫ @${username}\n` +
                `üìã ${name}\n` +
                `‚≠ê ${stars} –∑–≤–µ–∑–¥\n` +
                `‚è∞ ${hours} —á–∞—Å–æ–≤`, 
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    adminBot.onText(/\/remove_channel @(\w+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, username] = match;
        
        try {
            await removeChannel(username);
            adminBot.sendMessage(chatId, `‚úÖ –ö–∞–Ω–∞–ª @${username} —É–¥–∞–ª–µ–Ω`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –≥–æ—Ä—è—á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    adminBot.onText(/\/hot_channel @(\w+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const [, username] = match;
        
        try {
            await setHotChannel(username);
            adminBot.sendMessage(chatId, `üî• –ö–∞–Ω–∞–ª @${username} —Ç–µ–ø–µ—Ä—å –≥–æ—Ä—è—á–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (—Ö2 –∑–≤–µ–∑–¥ –Ω–∞ —á–∞—Å)!`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä—è—á–µ–≥–æ –∫–∞–Ω–∞–ª–∞:', error);
            adminBot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä—è—á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    adminBot.onText(/\/help/, (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isAdmin(userId)) {
            adminBot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const helpMessage = `
üîß **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–±–æ—Ç—É**

üìä **–ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:**
/stats - –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/users - –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
/prizes - –ü—Ä–∏–∑—ã –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–¥–∞—á–∏

üõ†Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
/panel - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø–∞–Ω–µ–ª—å
/channels - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
/broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ> - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

üíæ **–°–∏—Å—Ç–µ–º–∞:**
/backup - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üåê **–í–µ–±-–ø–∞–Ω–µ–ª—å:** ${ADMIN_URL}

üí° **–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:**
\`/broadcast üéâ –ù–æ–≤—ã–µ –ø—Ä–∏–∑—ã –≤ —Ä—É–ª–µ—Ç–∫–µ!\`
        `;

        adminBot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
    });
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async function getQuickStats() {
    return new Promise((resolve, reject) => {
        db.db.get(`
            SELECT 
                COUNT(*) as totalUsers,
                SUM(CASE WHEN date(last_activity) = date('now') THEN 1 ELSE 0 END) as activeToday,
                SUM(CASE WHEN date(join_date) > date('now', '-7 days') THEN 1 ELSE 0 END) as newThisWeek,
                SUM(total_spins) as totalSpins
            FROM users
        `, (err, userStats) => {
            if (err) {
                reject(err);
                return;
            }

            db.db.get(`
                SELECT 
                    COUNT(*) as pendingPrizes,
                    SUM(CASE WHEN prize_type LIKE '%certificate%' THEN 1 ELSE 0 END) as pendingCertificates
                FROM user_prizes WHERE is_claimed = 0
            `, (err, prizeStats) => {
                if (err) {
                    reject(err);
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                db.db.get(`
                    SELECT 
                        (SELECT COUNT(*) FROM user_prizes WHERE is_claimed = 1) as totalGiven,
                        (SELECT COUNT(*) FROM stars_transactions WHERE date(transaction_date) = date('now')) as depositsToday,
                        (SELECT IFNULL(SUM(amount), 0) FROM stars_transactions WHERE date(transaction_date) = date('now') AND transaction_type = 'deposit') as depositAmountToday,
                        (SELECT COUNT(*) FROM partner_channels WHERE is_active = 1) as activeChannels,
                        (SELECT COUNT(*) FROM partner_channels WHERE is_hot_offer = 1 AND is_active = 1) as hotOffers
                `, (err, additionalStats) => {
                    if (err) {
                        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        resolve({
                            ...userStats,
                            ...prizeStats,
                            spinsToday: userStats.totalSpins || 0,
                            activeChannels: 0,
                            hotOffers: 0,
                            depositsToday: 0,
                            depositAmountToday: 0,
                            totalGiven: 0
                        });
                    } else {
                        resolve({
                            ...userStats,
                            ...prizeStats,
                            spinsToday: userStats.totalSpins || 0,
                            activeChannels: additionalStats.activeChannels || 0,
                            hotOffers: additionalStats.hotOffers || 0,
                            depositsToday: additionalStats.depositsToday || 0,
                            depositAmountToday: additionalStats.depositAmountToday || 0,
                            totalGiven: additionalStats.totalGiven || 0
                        });
                    }
                });
            });
        });
    });
}

async function getRecentUsers(limit = 10) {
    return new Promise((resolve, reject) => {
        db.db.all(`
            SELECT telegram_id, first_name, stars, last_activity
            FROM users 
            ORDER BY last_activity DESC 
            LIMIT ?
        `, [limit], (err, rows) => {
            if (err) reject(err);
            else resolve(rows || []);
        });
    });
}

async function getPendingPrizes(limit = 5) {
    return new Promise((resolve, reject) => {
        db.db.all(`
            SELECT p.*, u.first_name as user_name, u.telegram_id as user_telegram_id
            FROM user_prizes p
            JOIN users u ON p.user_id = u.id
            WHERE p.is_claimed = 0
            ORDER BY p.won_date DESC
            LIMIT ?
        `, [limit], (err, rows) => {
            if (err) reject(err);
            else resolve(rows || []);
        });
    });
}

function getPrizeIcon(type) {
    const icons = {
        'certificate': 'üèÜ',
        'cosmetics': 'üíÑ',
        'stars': '‚≠ê',
        'empty': '‚ùå'
    };
    return icons[type] || 'üéÅ';
}

async function sendBroadcast(message) {
    return new Promise((resolve, reject) => {
        db.db.all('SELECT telegram_id FROM users WHERE is_active = 1', async (err, users) => {
            if (err) {
                reject(err);
                return;
            }

            let sent = 0;
            let errors = 0;
            
            // TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç, –∞ –Ω–µ –∞–¥–º–∏–Ω-–±–æ—Ç
            // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            resolve({
                sent: 0,
                errors: 0,
                total: users.length,
                message: '–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'
            });
        });
    });
}

// === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–ù–ê–õ–ê–ú–ò ===

async function getActiveChannels() {
    return new Promise((resolve, reject) => {
        db.db.all(`
            SELECT * FROM partner_channels 
            WHERE is_active = 1 
            ORDER BY is_hot_offer DESC, created_date DESC
        `, (err, rows) => {
            if (err) reject(err);
            else resolve(rows || []);
        });
    });
}

async function addChannel(channelData) {
    return new Promise((resolve, reject) => {
        const { username, name, stars, hours } = channelData;
        
        db.db.run(`
            INSERT INTO partner_channels 
            (channel_username, channel_name, reward_stars, placement_duration, placement_type, is_active, created_date) 
            VALUES (?, ?, ?, ?, 'time', 1, CURRENT_TIMESTAMP)
        `, [username, name, stars, hours], function(err) {
            if (err) reject(err);
            else resolve(this.lastID);
        });
    });
}

async function removeChannel(username) {
    return new Promise((resolve, reject) => {
        db.db.run(`
            UPDATE partner_channels 
            SET is_active = 0 
            WHERE channel_username = ?
        `, [username], function(err) {
            if (err) reject(err);
            else resolve(this.changes);
        });
    });
}

async function setHotChannel(username) {
    return new Promise((resolve, reject) => {
        // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –≥–æ—Ä—è—á–∏–π —Å—Ç–∞—Ç—É—Å —É –≤—Å–µ—Ö
        db.db.run(`UPDATE partner_channels SET is_hot_offer = 0`, (err) => {
            if (err) {
                reject(err);
                return;
            }
            
            // –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä—è—á–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            db.db.run(`
                UPDATE partner_channels 
                SET is_hot_offer = 1, end_date = datetime('now', '+1 hour')
                WHERE channel_username = ? AND is_active = 1
            `, [username], function(err) {
                if (err) reject(err);
                else resolve(this.changes);
            });
        });
    });
}

// === –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ===

app.listen(PORT, () => {
    console.log(`üöÄ –ê–¥–º–∏–Ω-–±–æ—Ç —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞: ${ADMIN_URL}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception in Admin Bot:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection in Admin Bot:', reason);
});

console.log('‚úÖ –ê–¥–º–∏–Ω-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');