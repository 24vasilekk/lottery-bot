// test-wheel-settings-fix.js - –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã wheel_settings
console.log('üõ†Ô∏è ========== –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø WHEEL_SETTINGS ==========\n');

// –ò–º–∏—Ç–∏—Ä—É–µ–º Railway –æ–∫—Ä—É–∂–µ–Ω–∏–µ
process.env.DATABASE_URL = "postgresql://postgres:xoIMWOtNInnWGHXnxiYCEBVmpUBcisbo@postgres.railway.internal:5432/railway";

const createDatabase = require('./database-selector');

async function testWheelSettingsFix() {
    console.log('üîß –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã wheel_settings...\n');
    
    try {
        console.log('üêò –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
        const db = createDatabase();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—ã)
        if (db.init && typeof db.init === 'function') {
            await db.init();
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã wheel_settings...');
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null)
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        const existingNormal = await db.getWheelSettings('normal');
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç getWheelSettings("normal"):', existingNormal === null ? 'null (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)' : existingNormal);
        
        // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        const testSettings = {
            prizes: [
                {
                    id: 'test',
                    name: '–¢–µ—Å—Ç',
                    type: 'stars',
                    probability: 100,
                    value: 10
                }
            ]
        };
        
        await db.saveWheelSettings('test', testSettings);
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        const savedSettings = await db.getWheelSettings('test');
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', savedSettings);
        
        if (savedSettings && savedSettings.prizes && savedSettings.prizes.length > 0) {
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –±–∞–∑—ã');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
        
        // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∞–ª—å–Ω—ã—Ö —à–∞–Ω—Å–æ–≤
        console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º initializeRealWheelChances...');
        const initResult = await db.initializeRealWheelChances();
        
        if (initResult) {
            console.log('‚úÖ initializeRealWheelChances –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤ initializeRealWheelChances');
        }
        
        console.log('\n‚úÖ ========== –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ ==========');
        
        if (db.close) await db.close();
        process.exit(0);
        
    } catch (error) {
        console.error('\n‚ùå ========== –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê ==========');
        console.error('–û—à–∏–±–∫–∞:', error.message);
        console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
        console.error('–°—Ç–µ–∫:', error.stack);
        process.exit(1);
    }
}

testWheelSettingsFix();