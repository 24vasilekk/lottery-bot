#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞
const { exec } = require('child_process');

console.log('üîç –ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞...');

// –ò—â–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å telegram-bot-server
exec('ps aux | grep -i "telegram-bot-server" | grep -v grep', (error, stdout, stderr) => {
    if (error) {
        console.log('‚úÖ –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞');
        return;
    }

    const lines = stdout.trim().split('\n');
    if (lines.length === 0) {
        console.log('‚úÖ –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞');
        return;
    }

    console.log(`üö® –ù–∞–π–¥–µ–Ω–æ ${lines.length} –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤:`);
    
    lines.forEach(line => {
        const parts = line.split(/\s+/);
        const pid = parts[1];
        const command = parts.slice(10).join(' ');
        
        console.log(`   PID: ${pid} - ${command}`);
        
        // –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        exec(`kill -9 ${pid}`, (killError) => {
            if (killError) {
                console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${pid}: ${killError.message}`);
            } else {
                console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${pid} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
            }
        });
    });
});

// –¢–∞–∫–∂–µ –∏—â–µ–º node –ø—Ä–æ—Ü–µ—Å—Å—ã
exec('ps aux | grep -i "node.*lottery" | grep -v grep', (error, stdout, stderr) => {
    if (error) {
        return;
    }

    const lines = stdout.trim().split('\n').filter(line => line.length > 0);
    if (lines.length === 0) {
        return;
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${lines.length} node –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å lottery:`);
    
    lines.forEach(line => {
        const parts = line.split(/\s+/);
        const pid = parts[1];
        const command = parts.slice(10).join(' ');
        
        console.log(`   PID: ${pid} - ${command}`);
        
        // –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        exec(`kill -9 ${pid}`, (killError) => {
            if (killError) {
                console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${pid}: ${killError.message}`);
            } else {
                console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${pid} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
            }
        });
    });
});

// –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
setTimeout(() => {
    console.log('\nüéØ –í—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
    console.log('‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä');
}, 2000);