// wins-channel.js - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π
// üèÜ –ö–∞–Ω–∞–ª –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π –¥–ª—è Kosmetichka Lottery Bot
// 
// üì¢ –ù–ê–°–¢–†–û–ô–ö–ê –ö–ê–ù–ê–õ–ê –í–´–ò–ì–†–´–®–ï–ô:
// 1. –ö–∞–Ω–∞–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π: https://t.me/kosmetichkolive
// 2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ @kosmetichkolive
// 3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: WINS_CHANNEL_ID=-1001234567890 (ID –∫–∞–Ω–∞–ª–∞ —Å –º–∏–Ω—É—Å–æ–º)
// 4. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã

const createDatabase = require('./database-selector');

class WinsChannelManager {
    constructor(bot) {
        this.bot = bot;
        this.db = createDatabase();
        this.channelId = process.env.WINS_CHANNEL_ID; // ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π
        this.checkInterval = 2 * 60 * 1000; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        
        console.log('üèÜ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π...');
        this.startWinPosting();
    }

    startWinPosting() {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        setInterval(() => {
            this.checkAndPostNewWins();
        }, this.checkInterval);

        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        setTimeout(() => {
            this.checkAndPostNewWins();
        }, 30 * 1000);

        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π –∑–∞–ø—É—â–µ–Ω–∞');
    }

    async checkAndPostNewWins() {
        if (!this.channelId || !this.bot) {
            console.log('‚ö†Ô∏è –ö–∞–Ω–∞–ª –≤—ã–∏–≥—Ä—ã—à–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–∏–Ω–≥');
            return;
        }

        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞...');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã
            const unpostedWins = await this.getUnpostedWins();
            
            if (unpostedWins.length === 0) {
                console.log('üìù –ù–æ–≤—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ—Ç');
                return;
            }

            console.log(`üéâ –ù–∞–π–¥–µ–Ω–æ ${unpostedWins.length} –Ω–æ–≤—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞`);

            // –ü–æ—Å—Ç–∏–º –∫–∞–∂–¥—ã–π –≤—ã–∏–≥—Ä—ã—à
            for (const win of unpostedWins) {
                await this.postWinToChannel(win);
                await this.markAsPosted(win.id);
                
                // –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                await this.sleep(3000);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π:', error);
        }
    }

    async getUnpostedWins() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            const wins = await this.db.pool.query(`
                SELECT p.*, u.first_name, u.username, u.telegram_id
                FROM prizes p
                JOIN users u ON p.user_id = u.id
                WHERE p.created_at >= NOW() - INTERVAL '24 hours'
                    AND (p.is_posted_to_channel IS NULL OR p.is_posted_to_channel = false)
                    AND p.type IN ('airpods4', 'cert5000', 'cert3000', 'cert2000', 'cert1000', 'powerbank', 'charger', 'golden-apple', 'dolce')
                ORDER BY p.created_at DESC
                LIMIT 10
            `);

            return wins.rows || [];
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π:', error);
            return [];
        }
    }

    async postWinToChannel(win) {
        try {
            const message = this.formatWinMessage(win);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
            await this.bot.sendMessage(this.channelId, message, {
                parse_mode: 'HTML',
                disable_web_page_preview: true
            });

            console.log(`üèÜ –í—ã–∏–≥—Ä—ã—à –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª: ${win.prize_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${win.first_name}`);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –∫–∞–Ω–∞–ª:', error);
            throw error;
        }
    }

    formatWinMessage(win) {
        const prizeEmojis = {
            'airpods4': 'üéß',
            'cert5000': 'üíé', 
            'cert3000': 'üíç',
            'cert2000': 'üí∞',
            'cert1000': 'üèÖ',
            'powerbank': 'üîã',
            'charger': '‚ö°',
            'golden-apple': 'üçé',
            'dolce': 'üíÑ'
        };

        const emoji = prizeEmojis[win.type] || 'üéÅ';
        const userName = win.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const userHandle = win.username ? `@${win.username}` : `ID: ${win.telegram_id}`;
        const prizeValue = this.getPrizeValue(win.type);
        
        const winTime = new Date(win.created_at).toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            day: '2-digit',
            month: '2-digit', 
            hour: '2-digit',
            minute: '2-digit'
        });

        return `üéâ <b>–ù–û–í–´–ô –í–´–ò–ì–†–´–®!</b> üéâ

${emoji} <b>${win.description || this.getPrizeName(win.type)}</b>
üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>${prizeValue}</b>

üë§ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>${userName}</b> (${userHandle})
üïê –í—Ä–µ–º—è: ${winTime}

üé∞ –•–æ—á–µ—à—å —Ç–æ–∂–µ –≤—ã–∏–≥—Ä–∞—Ç—å? –ü–æ–ø—Ä–æ–±—É–π —Å–≤–æ—é —É–¥–∞—á—É!
üîó –ò–≥—Ä–∞—Ç—å: @kosmetichkalottery_bot

#–≤—ã–∏–≥—Ä—ã—à #—É–¥–∞—á–∞ #kosmetichka`;
    }

    getPrizeValue(prizeType) {
        const values = {
            'airpods4': '12 000‚ÇΩ',
            'cert5000': '5 000‚ÇΩ',
            'cert3000': '3 000‚ÇΩ', 
            'cert2000': '2 000‚ÇΩ',
            'cert1000': '1 000‚ÇΩ',
            'powerbank': '2 500‚ÇΩ',
            'charger': '3 500‚ÇΩ',
            'golden-apple': '15 000‚ÇΩ',
            'dolce': '8 000‚ÇΩ'
        };
        
        return values[prizeType] || '–ë–µ—Å—Ü–µ–Ω–Ω–æ';
    }

    getPrizeName(prizeType) {
        const names = {
            'airpods4': 'AirPods 4',
            'cert5000': '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 5000‚ÇΩ',
            'cert3000': '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 3000‚ÇΩ',
            'cert2000': '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 2000‚ÇΩ', 
            'cert1000': '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 1000‚ÇΩ',
            'powerbank': 'PowerBank',
            'charger': '–ó–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
            'golden-apple': '–ó–æ–ª–æ—Ç–æ–µ —è–±–ª–æ–∫–æ',
            'dolce': 'Dolce –∫–æ—Å–º–µ—Ç–∏–∫–∞'
        };
        
        return names[prizeType] || '–ü—Ä–∏–∑';
    }

    async markAsPosted(prizeId) {
        try {
            await this.db.pool.query(`
                UPDATE prizes 
                SET is_posted_to_channel = true, 
                    posted_to_channel_date = NOW()
                WHERE id = $1
            `, [prizeId]);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏–∑–∞ –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ:', error);
        }
    }

    async addPostedColumn() {
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ –∫–∞–Ω–∞–ª (PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
            await this.db.pool.query(`
                ALTER TABLE prizes 
                ADD COLUMN IF NOT EXISTS is_posted_to_channel BOOLEAN DEFAULT FALSE
            `);
            
            await this.db.pool.query(`
                ALTER TABLE prizes 
                ADD COLUMN IF NOT EXISTS posted_to_channel_date TIMESTAMP
            `);
            
            console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        } catch (error) {
            // –ö–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ  
            if (!error.message.includes('already exists')) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:', error);
            }
        }
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    async getChannelStats() {
        try {
            const stats = await this.db.pool.query(`
                SELECT 
                    COUNT(*) as total_wins_posted,
                    COUNT(CASE WHEN posted_to_channel_date >= NOW() - INTERVAL '24 hours' THEN 1 END) as today_wins_posted,
                    COUNT(CASE WHEN posted_to_channel_date >= NOW() - INTERVAL '7 days' THEN 1 END) as week_wins_posted
                FROM prizes 
                WHERE is_posted_to_channel = true
            `);

            const row = stats.rows[0] || {};
            return {
                totalWinsPosted: parseInt(row.total_wins_posted) || 0,
                todayWinsPosted: parseInt(row.today_wins_posted) || 0,
                weekWinsPosted: parseInt(row.week_wins_posted) || 0
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞:', error);
            return { totalWinsPosted: 0, todayWinsPosted: 0, weekWinsPosted: 0 };
        }
    }

    async getRecentPostedWins() {
        try {
            const wins = await this.db.pool.query(`
                SELECT p.*, u.first_name, u.username
                FROM prizes p
                JOIN users u ON p.user_id = u.id
                WHERE p.is_posted_to_channel = true
                ORDER BY p.posted_to_channel_date DESC
                LIMIT 20
            `);

            return wins.rows || [];
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤:', error);
            return [];
        }
    }

    async manualPostWin(prizeId) {
        try {
            const winResult = await this.db.pool.query(`
                SELECT p.*, u.first_name, u.username, u.telegram_id
                FROM prizes p
                JOIN users u ON p.user_id = u.id
                WHERE p.id = $1
            `, [prizeId]);

            const win = winResult.rows[0];
            if (!win) {
                throw new Error('–ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            await this.postWinToChannel(win);
            await this.markAsPosted(prizeId);

            console.log(`‚úÖ –í—ã–∏–≥—Ä—ã—à ${prizeId} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é`);
            return true;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–∞ ${prizeId}:`, error);
            throw error;
        }
    }

    async testChannelConnection() {
        if (!this.channelId || !this.bot) {
            throw new Error('–ö–∞–Ω–∞–ª –≤—ã–∏–≥—Ä—ã—à–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        try {
            const testMessage = `üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

–°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
–í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${new Date().toLocaleString('ru-RU')}

#—Ç–µ—Å—Ç #—Å–∏—Å—Ç–µ–º–∞`;

            await this.bot.sendMessage(this.channelId, testMessage, {
                parse_mode: 'HTML'
            });

            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –≤—ã–∏–≥—Ä—ã—à–µ–π');
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            throw error;
        }
    }
}

module.exports = WinsChannelManager;