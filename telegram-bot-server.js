// telegram-bot-server.js - –ü–û–õ–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è Railway

const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const crypto = require('crypto');
const path = require('path');
const cors = require('cors');
const fs = require('fs');
const rateLimit = require('express-rate-limit');
const Database = require('./database');
const { validateRequest, validateTelegramId, validateSpinType, validateStarsAmount } = require('./utils/validation');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (fs.existsSync('.env')) {
    require('dotenv').config();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN environment variable is required for Railway deployment');
    console.error('Set BOT_TOKEN in Railway dashboard environment variables');
    process.exit(1);
}
const DEBUG_MODE = process.env.DEBUG_MODE === 'true' || false;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è Railway
let WEBAPP_URL = process.env.WEBAPP_URL;
if (!WEBAPP_URL) {
    if (process.env.RAILWAY_PUBLIC_DOMAIN) {
        WEBAPP_URL = `https://${process.env.RAILWAY_PUBLIC_DOMAIN}`;
    } else if (process.env.RAILWAY_PRIVATE_DOMAIN) {
        WEBAPP_URL = `https://${process.env.RAILWAY_PRIVATE_DOMAIN}`;
    } else {
        console.error('‚ùå WEBAPP_URL not configured for Railway');
        console.error('Railway should auto-provide RAILWAY_PUBLIC_DOMAIN');
        console.error('Manual setup: Set WEBAPP_URL=https://your-app-name.railway.app');
        process.exit(1);
    }
}

const BOT_USERNAME = process.env.BOT_USERNAME || 'kosmetichkalottery_bot';
const PORT = process.env.PORT || 3000;

console.log('üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø KOSMETICHKA LOTTERY BOT');
console.log('==========================================');
console.log(`   üîß –ü–æ—Ä—Ç: ${PORT}`);
console.log(`   üåê WebApp URL: ${WEBAPP_URL}`);
console.log(`   ü§ñ –ë–æ—Ç —Ç–æ–∫–µ–Ω: ${BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù ‚ùå'}`);
console.log(`   üë§ –ò–º—è –±–æ—Ç–∞: @${BOT_USERNAME}`);

// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
if (!process.env.BOT_TOKEN || !process.env.ADMIN_IDS) {
    console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú');
    console.log('==========================================');
    if (!process.env.BOT_TOKEN) {
        console.log('   üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ö–∞—Ä–¥–∫–æ–¥ BOT_TOKEN');
    }
    if (!process.env.ADMIN_IDS) {
        console.log('   üë§ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π ADMIN_ID');
    }
    console.log('   üìù –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    console.log('==========================================\n');
}

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();

// Middleware
// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const allowedOrigins = process.env.ALLOWED_ORIGINS 
    ? process.env.ALLOWED_ORIGINS.split(',').map(origin => origin.trim())
    : [
        'https://lottery-bot.railway.app',
        'https://*.railway.app',
        ...(process.env.NODE_ENV === 'development' ? ['http://localhost:3000', 'http://127.0.0.1:3000'] : [])
    ];

app.use(cors({
    origin: function (origin, callback) {
        // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
        if (!origin) return callback(null, true);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ origin
        const isAllowed = allowedOrigins.some(allowedOrigin => {
            if (allowedOrigin.includes('*')) {
                const pattern = allowedOrigin.replace('*', '.*');
                return new RegExp(`^${pattern}$`).test(origin);
            }
            return allowedOrigin === origin;
        });
        
        if (isAllowed) {
            callback(null, true);
        } else {
            console.warn(`üö´ CORS: Blocked origin ${origin}`);
            callback(new Error('Not allowed by CORS'));
        }
    },
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Telegram-Init-Data'],
    credentials: true,
    maxAge: 86400 // 24 —á–∞—Å–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è preflight –∑–∞–ø—Ä–æ—Å–æ–≤
}));

// Content Security Policy –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use((req, res, next) => {
    res.setHeader('Content-Security-Policy', 
        "default-src 'self'; " +
        "script-src 'self' 'unsafe-inline' https://telegram.org https://*.telegram.org; " +
        "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdnjs.cloudflare.com; " +
        "font-src 'self' https://fonts.gstatic.com https://cdnjs.cloudflare.com; " +
        "img-src 'self' data: https: blob:; " +
        "connect-src 'self' https://api.telegram.org wss: ws:; " +
        "media-src 'self' data: blob:; " +
        "object-src 'none'; " +
        "base-uri 'self'; " +
        "form-action 'self'; " +
        "frame-ancestors 'none';"
    );
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('X-Frame-Options', 'DENY');
    res.setHeader('X-XSS-Protection', '1; mode=block');
    res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');
    
    next();
});

// –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ endpoints –≤ telegram-bot-server.js –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
app.get('/api/leaderboard/referrals', async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 20;
        
        console.log(`üìä –ó–∞–ø—Ä–æ—Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º, –ª–∏–º–∏—Ç: ${limit}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ database.js
        const leaderboard = await db.getGlobalReferralsLeaderboard(limit);
        
        console.log(`‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –∑–∞–≥—Ä—É–∂–µ–Ω: ${leaderboard.length} –∑–∞–ø–∏—Å–µ–π`);
        
        res.json(leaderboard);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
app.get('/api/leaderboard/referrals/position/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        console.log(`üë§ –ó–∞–ø—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ database.js
        const rank = await db.getUserReferralRank(parseInt(userId));
        
        res.json({ 
            position: rank?.position,
            score: rank?.referrals_count || 0
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - endpoint —Å –¥–µ—Ñ–∏—Å–æ–º
app.get('/api/leaderboard-referrals', async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 20;
        
        console.log(`üìä –ó–∞–ø—Ä–æ—Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º (–¥–µ—Ñ–∏—Å), –ª–∏–º–∏—Ç: ${limit}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ database.js
        const leaderboard = await db.getGlobalReferralsLeaderboard(limit);
        
        console.log(`‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –∑–∞–≥—Ä—É–∂–µ–Ω: ${leaderboard.length} –∑–∞–ø–∏—Å–µ–π`);
        
        res.json({ 
            leaderboard: leaderboard,
            total: leaderboard.length
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - endpoint –¥–ª—è —Ä–∞–Ω–≥–∞
app.get('/api/user-referral-rank/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        console.log(`üë§ –ó–∞–ø—Ä–æ—Å —Ä–∞–Ω–≥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ database.js
        const rank = await db.getUserReferralRank(parseInt(userId));
        
        res.json({ rank });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Rate limiting –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const generalLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP –∑–∞ 15 –º–∏–Ω—É—Ç
    message: {
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—à–µ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
        retryAfter: 900
    },
    standardHeaders: true,
    legacyHeaders: false,
    // –ö–∞—Å—Ç–æ–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª—é—á–µ–π –¥–ª—è —É—á–µ—Ç–∞ user_id –∏–∑ Telegram
    keyGenerator: (req) => {
        return req.headers['x-telegram-user-id'] || req.ip;
    }
});

// –¢–∞–∫–∂–µ —Å–º—è–≥—á–∏—Ç–µ –æ–±—â–∏–π –ª–∏–º–∏—Ç–µ—Ä:
const apiLimiter = rateLimit({
    windowMs: 1 * 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
    max: 50, // –£–í–ï–õ–ò–ß–ï–ù–û —Å 30 –¥–æ 50 API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    message: {
        error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É',
        retryAfter: 60
    },
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    onLimitReached: (req, res, options) => {
        console.log(`‚ö†Ô∏è Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è ${req.ip}, URL: ${req.url}, User: ${req.body?.userId || 'unknown'}`);
    }
});

const spinLimiter = rateLimit({
    windowMs: 1 * 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
    max: 10, // –£–í–ï–õ–ò–ß–ï–ù–û —Å 5 –¥–æ 10 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ –≤ –º–∏–Ω—É—Ç—É
    message: {
        error: '–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ',
        retryAfter: 60
    },
    keyGenerator: (req) => {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ user_id –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
        return req.body?.userId?.toString() || req.ip;
    },
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—Å–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    skip: (req) => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è sync –∑–∞–ø—Ä–æ—Å–æ–≤
        return req.url.includes('/sync') || req.url.includes('/health');
    }
});

// –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
app.use(generalLimiter);
app.use('/api/', apiLimiter);

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    const timestamp = new Date().toISOString();
    console.log(`üì• ${timestamp} - ${req.method} ${req.url} - ${req.ip}`);
    next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const publicPath = path.join(__dirname, 'public');
app.use(express.static(publicPath, {
    etag: false,
    maxAge: 0,
    setHeaders: (res, filePath) => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ MIME —Ç–∏–ø—ã
        if (filePath.endsWith('.html')) {
            res.setHeader('Content-Type', 'text/html; charset=utf-8');
        } else if (filePath.endsWith('.js')) {
            res.setHeader('Content-Type', 'application/javascript; charset=utf-8');
        } else if (filePath.endsWith('.css')) {
            res.setHeader('Content-Type', 'text/css; charset=utf-8');
        }
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è WebApp
        res.setHeader('X-Frame-Options', 'ALLOWALL');
        res.setHeader('X-Content-Type-Options', 'nosniff');
    }
}));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new Database();

// –ò–º–ø–æ—Ä—Ç —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
const BackgroundTaskManager = require('./admin/background-tasks.js');

// –ò–º–ø–æ—Ä—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤  
const SponsorAutomation = require('./sponsor-automation.js');
const WinsChannelManager = require('./wins-channel.js');

// –ü—Ä–æ–º–æ–∫–æ–¥—ã
const PROMO_CODES = {
    'WELCOME2024': { crystals: 100, used: new Set() },
    'LUCKY777': { crystals: 77, used: new Set() },
    'FRIENDS': { crystals: 50, used: new Set() },
    'NEWBIE': { crystals: 200, used: new Set() },
    'DOLCEDEALS': { crystals: 150, used: new Set() }
};

// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const ADMIN_IDS = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim())) : [];
if (ADMIN_IDS.length === 0) {
    console.error('‚ùå ADMIN_IDS environment variable is required for Railway deployment');
    console.error('Set ADMIN_IDS=your_telegram_id in Railway dashboard');
    process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
let bot;
let botPolling = false;

try {
    bot = new TelegramBot(BOT_TOKEN, { 
        polling: false,  // –û—Ç–∫–ª—é—á–∞–µ–º polling –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        request: {
            agentOptions: {
                keepAlive: true,
                family: 4
            }
        }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if (bot.options) {
        bot.options.request = {
            ...bot.options.request,
            // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            verbose: false
        };
    }
    
    console.log('ü§ñ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error.message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ polling
async function startPolling() {
    if (botPolling || !bot) return;
    
    try {
        // –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        await bot.stopPolling();
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await bot.startPolling();
        botPolling = true;
        console.log('‚úÖ Polling –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling:', error.message);
        botPolling = false;
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(startPolling, 5000);
    }
}

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
app.get('/api/referral-link/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        const userIdValidation = validateTelegramId(userId);
        if (!userIdValidation.isValid) {
            return res.status(400).json({ error: 'Invalid user ID' });
        }
        
        const telegramId = userIdValidation.value;
        const user = await db.getUser(telegramId);
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }
        
        const referralLink = `https://t.me/${BOT_USERNAME}?start=ref_${telegramId}`;
        const referralsCount = await db.getUserReferralsCount(telegramId);
        
        res.json({
            success: true,
            referralLink: referralLink,
            statistics: {
                totalReferrals: referralsCount,
                potentialEarnings: {
                    totalEarned: referralsCount * 120 // 100 + 20 –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é
                }
            },
            shareText: '–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Kosmetichka Lottery Bot - –∫—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –ø—Ä–∏–∑—ã! üíÑ‚ú®\n\nüí´ –¢–æ—Ç –∫—Ç–æ —Ç–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ–ª—É—á–∏—Ç 100 –∑–≤–µ–∑–¥!'
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

app.get('/api/debug/referrals', async (req, res) => {
    try {
        const debug = await db.debugReferrals();
        
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:');
        debug.forEach(user => {
            console.log(`üë§ ${user.first_name} (${user.telegram_id}): –ø–æ–ª–µ=${user.referrals_field}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏=${user.actual_referrals_count}`);
        });
        
        res.json({
            users: debug,
            total: debug.length
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
app.post('/api/activate-referral', async (req, res) => {
    try {
        const { userId, referrerId } = req.body;
        
        if (!userId || !referrerId) {
            return res.status(400).json({ 
                error: '–¢—Ä–µ–±—É—é—Ç—Å—è userId –∏ referrerId' 
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        const user = await db.getUser(userId);
        const referrer = await db.getUser(referrerId);
        
        if (!user || !referrer) {
            return res.status(404).json({ error: 'User not found' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω —ç—Ç–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª
        const existingReferral = await db.getReferral(referrerId, userId);
        if (existingReferral) {
            return res.json({ 
                success: false, 
                message: '–†–µ—Ñ–µ—Ä–∞–ª —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' 
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª
        const added = await db.addReferral(referrerId, userId);
        
        if (added) {
            // –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            await db.updateUserStars(referrerId, 100);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            try {
                await bot.sendMessage(referrerId, 
                    `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –¥—Ä—É–≥ ${user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—Ç—É!\n` +
                    `üí´ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –∑–≤–µ–∑–¥ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!`
                );
                
                await bot.sendMessage(userId,
                    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –æ—Ç ${referrer.first_name}!\n` +
                    `üéÅ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã!`
                );
            } catch (notifyError) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notifyError.message);
            }
            
            res.json({
                success: true,
                message: '–†–µ—Ñ–µ—Ä–∞–ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
                starsEarned: 100
            });
        } else {
            res.json({
                success: false,
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª'
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –î–æ–±–∞–≤–∏—Ç—å –≤ telegram-bot-server.js

// –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ endpoints –≤ telegram-bot-server.js

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
app.get('/api/leaderboard-referrals', async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 20;
        
        console.log(`üìä –ó–∞–ø—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –ª–∏–º–∏—Ç: ${limit}`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª–µ–π –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º SQLite
        const query = `
            SELECT 
                u.telegram_id,
                u.first_name,
                u.username,
                COUNT(r.referred_id) as referrals_count,
                u.total_stars_earned,
                u.join_date
            FROM users u
            LEFT JOIN referrals r ON u.telegram_id = r.referrer_id
            WHERE u.is_active = 1
            GROUP BY u.telegram_id, u.first_name, u.username, u.total_stars_earned, u.join_date
            HAVING referrals_count > 0
            ORDER BY referrals_count DESC, u.total_stars_earned DESC, u.join_date ASC
            LIMIT ?
        `;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å SQLite
        db.db.all(query, [limit], (error, results) => {
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
                return res.status(500).json({ error: 'Internal server error' });
            }
            
            console.log(`üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω: ${results.length} –∑–∞–ø–∏—Å–µ–π`);
            
            res.json({ 
                leaderboard: results || [],
                total: results ? results.length : 0
            });
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
app.get('/api/user-referral-rank/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        console.log(`üë§ –ó–∞–ø—Ä–æ—Å —Ä–∞–Ω–≥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ database.js
        const rank = await db.getUserReferralRank(parseInt(userId));
        
        res.json({ rank });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});


// === –ú–ê–†–®–†–£–¢–´ ===

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    console.log('üè† –ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    
    const indexPath = path.join(publicPath, 'index.html');
    
    if (fs.existsSync(indexPath)) {
        res.sendFile(indexPath);
    } else {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const htmlContent = createBasicHTML();
        res.send(htmlContent);
    }
});

// Health check
app.get('/health', (req, res) => {
    const health = {
        status: 'OK',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        users: 'database',
        webapp_url: WEBAPP_URL,
        bot_status: bot ? 'connected' : 'disconnected',
        memory: process.memoryUsage(),
        env: process.env.NODE_ENV || 'development'
    };
    
    console.log('üíä Health check –∑–∞–ø—Ä–æ—à–µ–Ω');
    res.json(health);
});

// Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
app.get('/debug', (req, res) => {
    const debugInfo = {
        timestamp: new Date().toISOString(),
        environment: {
            NODE_ENV: process.env.NODE_ENV,
            PORT: PORT,
            WEBAPP_URL: WEBAPP_URL,
            RAILWAY_PUBLIC_DOMAIN: process.env.RAILWAY_PUBLIC_DOMAIN,
            RAILWAY_PRIVATE_DOMAIN: process.env.RAILWAY_PRIVATE_DOMAIN
        },
        paths: {
            __dirname: __dirname,
            publicPath: publicPath,
            indexExists: fs.existsSync(path.join(publicPath, 'index.html'))
        },
        bot: {
            connected: !!bot,
            username: BOT_USERNAME
        },
        users: 'database',
        uptime: process.uptime()
    };
    
    res.json(debugInfo);
});

// API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å WebApp
// API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å WebApp - –û–¢–ö–õ–Æ–ß–ê–ï–ú –õ–ò–ú–ò–¢–ï–† –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
app.post('/api/telegram-webhook', async (req, res) => {  // –£–±—Ä–∞–ª–∏ spinLimiter
    try {
        const { action, data, user } = req.body;
        
        console.log(`üì° WebApp API: ${action} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user?.id}`);
        console.log('üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify({ action, data, user }, null, 2));
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê
        console.log('üîç === –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ó–ê–ü–†–û–°–ê ===');
        console.log('Request body keys:', Object.keys(req.body));
        console.log('Action type:', typeof action, action);
        console.log('Data type:', typeof data);
        console.log('User type:', typeof user);
        if (user) {
            console.log('User.id type:', typeof user.id, user.id);
        }
        if (action === 'wheel_spin' && data) {
            console.log('Spin data keys:', Object.keys(data));
            console.log('spinType:', data.spinType, typeof data.spinType);
            console.log('prize:', data.prize);
            if (data.prize) {
                console.log('Prize keys:', Object.keys(data.prize));
                console.log('Prize.id:', data.prize.id, typeof data.prize.id);
                console.log('Prize.name:', data.prize.name, typeof data.prize.name);
                console.log('Prize.type:', data.prize.type, typeof data.prize.type);
            }
        }
        console.log('=== –ö–û–ù–ï–¶ –î–ï–¢–ê–õ–¨–ù–û–ô –û–¢–õ–ê–î–ö–ò ===');
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
        const requestValidation = validateRequest(req.body, {
            action: { type: 'string', required: true, minLength: 1, maxLength: 50 },
            user: { type: 'object', required: true },
            data: { type: 'object', required: false }
        });
        
        if (!requestValidation.isValid) {
            console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø—Ä–æ—à–ª–∞:', requestValidation.errors);
            return res.status(400).json({ 
                error: 'Invalid request data',
                details: requestValidation.errors
            });
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userIdValidation = validateTelegramId(user.id);
        if (!userIdValidation.isValid) {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userIdValidation.error);
            return res.status(400).json({ error: 'Invalid user ID' });
        }
        
        const userId = userIdValidation.value;
        
        switch (action) {
            case 'wheel_spin':
                try {
                    console.log('üé∞ –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é wheel_spin...');
                    
                    // –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    if (!data.spinType) {
                        console.log('‚ö†Ô∏è spinType –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º normal');
                        data.spinType = 'normal';
                    }
                    
                    if (!data.prize) {
                        console.error('‚ùå prize –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö');
                        return res.status(400).json({ 
                            error: 'Prize data missing',
                            details: 'data.prize is required'
                        });
                    }
                    
                    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö spin - –£–ü–†–û–©–ï–ù–ù–ê–Ø
                    const spinValidation = validateRequest(data, {
                        spinType: { type: 'spin_type', required: true },
                        prize: { type: 'prize', required: true }
                    });
                    
                    if (!spinValidation.isValid) {
                        console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö spin –Ω–µ –ø—Ä–æ—à–ª–∞:', spinValidation.errors);
                        return res.status(400).json({ 
                            error: 'Invalid spin data',
                            details: spinValidation.errors
                        });
                    }
                    
                    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º handleWheelSpin...');
                    
                    console.log('üé∞ WHEEL_SPIN - –í—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', {
                        userId: userId,
                        data: spinValidation.data,
                        prize: spinValidation.data.prize,
                        spinType: spinValidation.data.spinType
                    });
                    
                    await handleWheelSpin(userId, spinValidation.data);
                    console.log('‚úÖ wheel_spin –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                    return res.json({ success: true, message: 'Prize saved successfully' });
                } catch (wheelError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleWheelSpin:', wheelError);
                    console.error('Stack trace:', wheelError.stack);
                    return res.status(500).json({ 
                        success: false, 
                        error: 'Failed to save prize to database',
                        details: wheelError.message
                    });
                }
            case 'task_completed':
                await handleTaskCompleted(userId, data);
                break;
            case 'sync_user':
                const userData = await syncUserData(userId, data.userData);
                return res.json({ userData });
            case 'subscribe_channel':
                await handleChannelSubscription(userId, data);
                break;
            default:
                console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
        }
        
        res.json({ success: true });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ webhook:', error);
        console.error('Stack trace:', error.stack);
        res.status(500).json({ 
            error: 'Internal server error',
            details: error.message
        });
    }
});

// –í–†–ï–ú–ï–ù–ù–´–ô ENDPOINT –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ –ª–∏–º–∏—Ç–µ—Ä–æ–≤
app.post('/api/debug/wheel-spin', async (req, res) => {
    console.log('üö® === DEBUG ENDPOINT –í–´–ó–í–ê–ù ===');
    console.log('Body:', req.body);
    console.log('Headers:', req.headers);
    
    try {
        const { userId, prize, spinType } = req.body;
        
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { userId, prize, spinType });
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (!userId || !prize) {
            return res.status(400).json({ 
                error: 'userId –∏ prize –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
                received: { userId: !!userId, prize: !!prize, spinType }
            });
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        const result = await handleWheelSpin(userId, { prize, spinType: spinType || 'normal' });
        
        res.json({ 
            success: true, 
            message: '–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ',
            result 
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ debug endpoint:', error);
        res.status(500).json({ 
            error: 'Debug endpoint error',
            details: error.message 
        });
    }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã
app.post('/api/check-subscriptions', async (req, res) => {
    try {
        const { userId } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è userId
        const userIdValidation = validateTelegramId(userId);
        if (!userIdValidation.isValid) {
            return res.status(400).json({ 
                error: 'Invalid user ID',
                details: userIdValidation.error
            });
        }
        
        const subscriptions = await db.getUserSubscriptions(userIdValidation.value);
        
        res.json({ 
            subscriptions: {
                channel1: subscriptions.is_subscribed_channel1 || false,
                channel2: subscriptions.is_subscribed_channel2 || false,
                dolcedeals: subscriptions.is_subscribed_dolcedeals || false
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
app.get('/api/leaderboard', async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 10;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        await db.updateLeaderboard();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
        const leaderboard = await db.getLeaderboard(limit);
        
        res.json({ leaderboard });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/referrals-leaderboard/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        const limit = parseInt(req.query.limit) || 10;
        
        const referralsLeaderboard = await db.getReferralsLeaderboard(parseInt(userId), limit);
        
        res.json({ 
            leaderboard: referralsLeaderboard,
            total: referralsLeaderboard.length 
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
app.get('/api/user-rank/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        const rank = await db.getUserRank(parseInt(userId));
        
        res.json({ rank });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ - –£–õ–£–ß–®–ï–ù–ù–´–ô
app.get('/api/user/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        console.log(`üë§ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        
        const user = await db.getUser(parseInt(userId));
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        let referralsCount = 0;
        try {
            referralsCount = await new Promise((resolve, reject) => {
                const query = `
                    SELECT COUNT(*) as count 
                    FROM referrals 
                    WHERE referrer_id = ?
                `;
                
                if (db.pool) {
                    db.pool.query(query, [parseInt(userId)], (error, results) => {
                        if (error) reject(error);
                        else resolve(results[0]?.count || 0);
                    });
                } else if (db.db) {
                    db.db.get(query, [parseInt(userId)], (error, result) => {
                        if (error) reject(error);
                        else resolve(result?.count || 0);
                    });
                } else {
                    resolve(0);
                }
            });
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
            referralsCount = 0;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        const userData = {
            id: user.telegram_id,
            username: user.username,
            first_name: user.first_name,
            last_name: user.last_name,
            stars: user.stars || 0,
            total_stars_earned: user.total_stars_earned || 0,
            join_date: user.join_date,
            stats: {
                stars: user.stars || 0,
                totalStars: user.total_stars_earned || 0,
                totalStarsEarned: user.total_stars_earned || 0,
                totalSpins: user.total_spins || 0,
                prizesWon: user.prizes_won || 0,
                referrals: referralsCount,
                referralsCount: referralsCount,
                starsFromReferrals: referralsCount * 100, // 100 –∑–≤–µ–∑–¥ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                level: Math.floor((user.total_stars_earned || 0) / 1000) + 1
            },
            referrals: referralsCount,
            achievements: user.achievements ? JSON.parse(user.achievements) : [],
            settings: user.settings ? JSON.parse(user.settings) : {},
            is_active: user.is_active
        };
        
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∑–∞–≥—Ä—É–∂–µ–Ω—ã:`, {
            stars: userData.stars,
            referrals: userData.stats.referrals,
            totalEarned: userData.total_stars_earned
        });
        
        res.json(userData);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.params.userId}:`, error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/debug-user/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        console.log(`üîç –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        const user = await db.getUser(parseInt(userId));
        const prizes = await db.getUserPrizes(parseInt(userId));
        const completedTasks = await db.getUserCompletedTasks(parseInt(userId));
        
        const debugData = {
            user: user,
            prizesCount: prizes ? prizes.length : 0,
            prizes: prizes,
            completedTasks: completedTasks,
            timestamp: new Date().toISOString()
        };
        
        console.log('üîç –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î:', JSON.stringify(debugData, null, 2));
        
        res.json(debugData);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// ===================== API ENDPOINTS –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ó–ê–î–ê–ù–ò–ô =====================

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
app.get('/api/channels/active', async (req, res) => {
    try {
        const channels = await db.getActiveChannels();
        res.json({ channels });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
app.post('/api/subscription/check', async (req, res) => {
    try {
        const { userId, channelUsername } = req.body;
        
        if (!userId || !channelUsername) {
            return res.status(400).json({ 
                error: '–¢—Ä–µ–±—É—é—Ç—Å—è userId –∏ channelUsername' 
            });
        }

        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ –∫–∞–Ω–∞–ª ${channelUsername}`);
        
        const isSubscribed = await checkUserChannelSubscription(userId, channelUsername);
        
        res.json({ 
            isSubscribed,
            userId,
            channel: channelUsername,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
app.post('/api/subscription/complete', async (req, res) => {
    try {
        const { userId, channelId, userData } = req.body;
        
        if (!userId || !channelId) {
            return res.status(400).json({ 
                error: '–¢—Ä–µ–±—É—é—Ç—Å—è userId –∏ channelId' 
            });
        }

        console.log(`üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, –∫–∞–Ω–∞–ª ${channelId}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        const result = await handleChannelSubscriptionTask(userId, channelId, userData);
        
        if (result.success) {
            res.json({
                success: true,
                reward: result.reward,
                message: result.message,
                userStats: result.userStats
            });
        } else {
            res.status(400).json({
                success: false,
                error: result.error,
                banUntil: result.banUntil
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/subscriptions/check-all', async (req, res) => {
    try {
        const { userId } = req.body;
        
        if (!userId) {
            return res.status(400).json({ 
                error: '–¢—Ä–µ–±—É–µ—Ç—Å—è userId' 
            });
        }

        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        const violations = await checkAllUserSubscriptions(userId);
        
        if (violations.length > 0) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è
            const user = await db.getUser(userId);
            const result = await handleSubscriptionViolations(user, violations);
            
            res.json({
                hasViolations: true,
                violations,
                banApplied: result.banApplied,
                banUntil: result.banUntil,
                message: result.message
            });
        } else {
            res.json({
                hasViolations: false,
                message: '–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã'
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/tasks/available/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const user = await db.getUser(parseInt(userId));
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        if (user.tasks_ban_until && new Date(user.tasks_ban_until) > new Date()) {
            return res.json({
                blocked: true,
                banUntil: user.tasks_ban_until,
                message: '–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –æ—Ç–ø–∏—Å–∫—É –æ—Ç –∫–∞–Ω–∞–ª–æ–≤'
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        const channels = await db.getActiveChannels();
        
        // –ü–æ–ª—É—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        const dailyTasks = await db.getDailyTasksForUser(parseInt(userId));
        
        // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        const hotOffers = await db.getActiveHotOffers();
        
        res.json({
            blocked: false,
            channels: channels || [],
            dailyTasks: dailyTasks || [],
            hotOffers: hotOffers || []
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
app.get('/api/referral/stats/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        const stats = await db.getReferralStats(parseInt(userId));
        
        res.json({ stats });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
app.post('/api/referral/activate', async (req, res) => {
    try {
        const { userId, referrerId } = req.body;
        
        if (!userId || !referrerId) {
            return res.status(400).json({ 
                error: '–¢—Ä–µ–±—É—é—Ç—Å—è userId –∏ referrerId' 
            });
        }
        
        const result = await db.activateReferral(parseInt(userId), parseInt(referrerId));
        
        res.json(result);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// ===================== ADMIN API ENDPOINTS =====================

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ –∞–¥–º–∏–Ω–∫–∏
app.use('/admin', express.static('admin'));

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function requireAdmin(req, res, next) {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    const adminToken = req.headers['admin-token'] || req.query.token;
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
    // if (adminToken !== process.env.ADMIN_TOKEN) {
    //     return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    // }
    
    next();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/admin/stats', requireAdmin, async (req, res) => {
    try {
        console.log('üìä –ê–¥–º–∏–Ω: –∑–∞–ø—Ä–æ—Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const totalUsers = await new Promise((resolve, reject) => {
            db.db.get('SELECT COUNT(*) as count FROM users', (err, row) => {
                if (err) reject(err);
                else resolve(row.count);
            });
        });

        // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 24 —á–∞—Å–∞
        const activeUsers = await new Promise((resolve, reject) => {
            db.db.get(
                'SELECT COUNT(*) as count FROM users WHERE last_activity > datetime("now", "-1 day")',
                (err, row) => {
                    if (err) reject(err);
                    else resolve(row.count);
                }
            );
        });

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        const totalChannels = await new Promise((resolve, reject) => {
            db.db.get('SELECT COUNT(*) as count FROM partner_channels WHERE is_active = 1', (err, row) => {
                if (err) reject(err);
                else resolve(row.count);
            });
        });

        const hotChannels = await new Promise((resolve, reject) => {
            db.db.get(
                'SELECT COUNT(*) as count FROM partner_channels WHERE is_active = 1 AND is_hot_offer = 1',
                (err, row) => {
                    if (err) reject(err);
                    else resolve(row.count);
                }
            );
        });

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        const totalSubscriptions = await new Promise((resolve, reject) => {
            db.db.get('SELECT COUNT(*) as count FROM user_channel_subscriptions', (err, row) => {
                if (err) reject(err);
                else resolve(row.count);
            });
        });

        const todaySubscriptions = await new Promise((resolve, reject) => {
            db.db.get(
                'SELECT COUNT(*) as count FROM user_channel_subscriptions WHERE created_date > date("now")',
                (err, row) => {
                    if (err) reject(err);
                    else resolve(row.count);
                }
            );
        });

        // –ü—Ä–∏–∑—ã –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–¥–∞—á–∏
        const pendingPrizes = await new Promise((resolve, reject) => {
            db.db.get('SELECT COUNT(*) as count FROM prizes WHERE is_given = 0', (err, row) => {
                if (err) reject(err);
                else resolve(row.count);
            });
        });

        const pendingCertificates = await new Promise((resolve, reject) => {
            db.db.get(
                'SELECT COUNT(*) as count FROM prizes WHERE is_given = 0 AND type LIKE "%certificate%"',
                (err, row) => {
                    if (err) reject(err);
                    else resolve(row.count);
                }
            );
        });

        const stats = {
            totalUsers,
            activeUsers,
            totalChannels,
            hotChannels,
            totalSubscriptions,
            todaySubscriptions,
            pendingPrizes,
            pendingCertificates
        };

        res.json(stats);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–æ–º:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
app.get('/api/admin/channels', requireAdmin, async (req, res) => {
    try {
        console.log('üì∫ –ê–¥–º–∏–Ω: –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤');

        const channels = await new Promise((resolve, reject) => {
            db.db.all(`
                SELECT pc.*,
                       COUNT(ucs.id) as current_subscribers
                FROM partner_channels pc
                LEFT JOIN user_channel_subscriptions ucs ON pc.id = ucs.channel_id AND ucs.is_active = 1
                GROUP BY pc.id
                ORDER BY pc.created_date DESC
            `, (err, rows) => {
                if (err) reject(err);
                else resolve(rows);
            });
        });

        res.json(channels);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
app.post('/api/admin/channels', requireAdmin, async (req, res) => {
    try {
        const {
            channel_username,
            channel_name,
            reward_stars,
            placement_type,
            placement_duration,
            subscribers_target,
            is_hot_offer
        } = req.body;

        console.log(`üì∫ –ê–¥–º–∏–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @${channel_username}`);

        // –í—ã—á–∏—Å–ª—è–µ–º end_date
        let endDate = null;
        if (placement_type === 'time') {
            endDate = new Date(Date.now() + (placement_duration * 60 * 60 * 1000)).toISOString();
        }

        const channelId = await new Promise((resolve, reject) => {
            db.db.run(`
                INSERT INTO partner_channels (
                    channel_username, channel_name, reward_stars, placement_type,
                    placement_duration, target_subscribers, is_hot_offer, end_date
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            `, [
                channel_username, channel_name, reward_stars, placement_type,
                placement_duration, subscribers_target, is_hot_offer ? 1 : 0, endDate
            ], function(err) {
                if (err) reject(err);
                else resolve(this.lastID);
            });
        });

        res.json({ success: true, id: channelId });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ä—è—á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
app.patch('/api/admin/channels/:id/hot-offer', requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const { is_hot_offer } = req.body;

        console.log(`üî• –ê–¥–º–∏–Ω: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä—è—á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ${id} –Ω–∞ ${is_hot_offer}`);

        await new Promise((resolve, reject) => {
            db.db.run(
                'UPDATE partner_channels SET is_hot_offer = ? WHERE id = ?',
                [is_hot_offer ? 1 : 0, id],
                (err) => {
                    if (err) reject(err);
                    else resolve();
                }
            );
        });

        res.json({ success: true });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä—è—á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞
app.delete('/api/admin/channels/:id', requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;

        console.log(`‚ùå –ê–¥–º–∏–Ω: –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ ${id}`);

        await new Promise((resolve, reject) => {
            db.db.run(
                'UPDATE partner_channels SET is_active = 0 WHERE id = ?',
                [id],
                (err) => {
                    if (err) reject(err);
                    else resolve();
                }
            );
        });

        res.json({ success: true });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
app.get('/api/admin/automation/stats', requireAdmin, async (req, res) => {
    try {
        const stats = await db.get(`
            SELECT 
                COUNT(*) as totalChannels,
                COUNT(CASE WHEN is_active = 1 THEN 1 END) as activeChannels,
                COUNT(CASE WHEN is_active = 0 AND deactivation_reason = 'time_expired' THEN 1 END) as expiredChannels,
                COUNT(CASE WHEN is_active = 0 AND deactivation_reason = 'target_reached' THEN 1 END) as completedChannels,
                COUNT(CASE WHEN auto_renewal = 1 THEN 1 END) as autoRenewalChannels,
                AVG(priority_score) as avgPriorityScore
            FROM partner_channels
        `);

        const recentNotifications = await db.all(`
            SELECT an.*, pc.channel_username 
            FROM admin_notifications an
            LEFT JOIN partner_channels pc ON an.channel_id = pc.id
            ORDER BY an.created_at DESC 
            LIMIT 10
        `);

        res.json({
            stats: stats || {},
            recentNotifications: recentNotifications || []
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏  
app.get('/api/admin/automation/channels', requireAdmin, async (req, res) => {
    try {
        const channels = await db.all(`
            SELECT * FROM partner_channels 
            ORDER BY priority_score DESC, created_at DESC
        `);

        res.json(channels || []);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
app.get('/api/admin/automation/notifications', requireAdmin, async (req, res) => {
    try {
        const notifications = await db.all(`
            SELECT an.*, pc.channel_username 
            FROM admin_notifications an
            LEFT JOIN partner_channels pc ON an.channel_id = pc.id
            ORDER BY an.created_at DESC 
            LIMIT 20
        `);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const formattedNotifications = notifications.map(notification => ({
            ...notification,
            message: notification.message || `–ö–∞–Ω–∞–ª @${notification.channel_username}: ${notification.notification_type}`
        }));

        res.json(formattedNotifications || []);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
app.patch('/api/admin/automation/channels/:id/auto-renewal', requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const { auto_renewal } = req.body;

        await db.run(`
            UPDATE partner_channels 
            SET auto_renewal = ? 
            WHERE id = ?
        `, [auto_renewal ? 1 : 0, id]);

        console.log(`üîÑ –ê–¥–º–∏–Ω: –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ ${id} ${auto_renewal ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}`);
        res.json({ success: true });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

app.post('/api/admin/automation/force-check', requireAdmin, async (req, res) => {
    try {
        console.log('üîÑ –ê–¥–º–∏–Ω: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');
        
        if (sponsorAutomation) {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            await sponsorAutomation.performAutomatedTasks();
            console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        } else {
            console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        res.json({ 
            success: true, 
            message: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω–∞' 
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –¥–ª—è –∫–∞–Ω–∞–ª–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π
app.get('/api/admin/wins-channel/stats', requireAdmin, async (req, res) => {
    try {
        if (!winsChannelManager) {
            return res.status(503).json({ error: '–°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' });
        }

        const stats = await winsChannelManager.getChannelStats();
        res.json({ stats });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

app.get('/api/admin/wins-channel/recent', requireAdmin, async (req, res) => {
    try {
        if (!winsChannelManager) {
            return res.status(503).json({ error: '–°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' });
        }

        const recentWins = await winsChannelManager.getRecentPostedWins();
        res.json(recentWins);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

app.post('/api/admin/wins-channel/post/:prizeId', requireAdmin, async (req, res) => {
    try {
        const { prizeId } = req.params;
        
        if (!winsChannelManager) {
            return res.status(503).json({ error: '–°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' });
        }

        await winsChannelManager.manualPostWin(prizeId);
        console.log(`‚úÖ –ê–¥–º–∏–Ω: –≤—ã–∏–≥—Ä—ã—à ${prizeId} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é`);
        
        res.json({ success: true, message: '–í—ã–∏–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–∞:', error);
        res.status(500).json({ error: error.message || 'Internal server error' });
    }
});

app.post('/api/admin/wins-channel/test', requireAdmin, async (req, res) => {
    try {
        if (!winsChannelManager) {
            return res.status(503).json({ error: '–°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' });
        }

        await winsChannelManager.testChannelConnection();
        console.log('‚úÖ –ê–¥–º–∏–Ω: —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –≤—ã–∏–≥—Ä—ã—à–µ–π');
        
        res.json({ success: true, message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π:', error);
        res.status(500).json({ error: error.message || 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–¥–∞—á–∏
app.get('/api/admin/pending-prizes', requireAdmin, async (req, res) => {
    try {
        console.log('üéÅ –ê–¥–º–∏–Ω: –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–∑–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–¥–∞—á–∏');

        const prizes = await new Promise((resolve, reject) => {
            db.db.all(`
                SELECT p.*, u.first_name as user_name, u.username, u.telegram_id as user_telegram_id
                FROM prizes p
                JOIN users u ON p.user_id = u.id
                WHERE p.is_given = 0
                ORDER BY p.created_at DESC
            `, (err, rows) => {
                if (err) reject(err);
                else resolve(rows);
            });
        });

        res.json(prizes);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏–∑–∞ –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ
app.patch('/api/admin/prizes/:id/given', requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;

        console.log(`‚úÖ –ê–¥–º–∏–Ω: –æ—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏–∑–∞ ${id} –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ`);

        await new Promise((resolve, reject) => {
            db.db.run(
                'UPDATE prizes SET is_given = 1, given_date = CURRENT_TIMESTAMP WHERE id = ?',
                [id],
                (err) => {
                    if (err) reject(err);
                    else resolve();
                }
            );
        });

        res.json({ success: true });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏–∑–∞:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/admin/users', requireAdmin, async (req, res) => {
    try {
        console.log('üë• –ê–¥–º–∏–Ω: –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

        const users = await new Promise((resolve, reject) => {
            db.db.all(`
                SELECT u.*,
                       COUNT(DISTINCT ucs.id) as subscription_count,
                       COUNT(DISTINCT p.id) as prizes_won
                FROM users u
                LEFT JOIN user_channel_subscriptions ucs ON u.id = ucs.user_id
                LEFT JOIN prizes p ON u.id = p.user_id
                GROUP BY u.id
                ORDER BY u.created_date DESC
                LIMIT 100
            `, (err, rows) => {
                if (err) reject(err);
                else resolve(rows);
            });
        });

        res.json(users);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
app.get('/api/admin/analytics', requireAdmin, async (req, res) => {
    try {
        console.log('üìà –ê–¥–º–∏–Ω: –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');

        // –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –¥–Ω—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        const subscriptionsData = await new Promise((resolve, reject) => {
            db.db.all(`
                SELECT DATE(created_date) as date, COUNT(*) as count
                FROM user_channel_subscriptions
                WHERE created_date > datetime('now', '-7 days')
                GROUP BY DATE(created_date)
                ORDER BY date
            `, (err, rows) => {
                if (err) reject(err);
                else resolve({
                    labels: rows.map(r => r.date),
                    values: rows.map(r => r.count)
                });
            });
        });

        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤
        const prizesData = await new Promise((resolve, reject) => {
            db.db.all(`
                SELECT type, COUNT(*) as count
                FROM prizes
                GROUP BY type
            `, (err, rows) => {
                if (err) reject(err);
                else resolve({
                    labels: rows.map(r => r.type),
                    values: rows.map(r => r.count)
                });
            });
        });

        res.json({
            subscriptionsData,
            prizesData
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Endpoint –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.post('/api/admin/users/stars', requireAdmin, async (req, res) => {
    const { telegramId, operation, amount, reason } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validation = validateRequest(req.body, {
        telegramId: { type: 'telegram_id', required: true },
        operation: { type: 'stars_operation', required: true },
        amount: { type: 'stars_amount', required: true },
        reason: { type: 'string', required: true, minLength: 1, maxLength: 500 }
    });
    
    if (!validation.isValid) {
        return res.status(400).json({ 
            success: false, 
            error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞',
            details: validation.errors
        });
    }

    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const validatedData = validation.data;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await db.getUser(validatedData.telegramId);
        if (!user) {
            return res.status(404).json({ 
                success: false, 
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        const currentStars = user.stars || 0;
        let newStars = 0;
        let starsChange = 0;

        switch (validatedData.operation) {
            case 'add':
                starsChange = validatedData.amount;
                newStars = currentStars + validatedData.amount;
                break;
            case 'subtract':
                starsChange = -validatedData.amount;
                newStars = Math.max(0, currentStars - validatedData.amount);
                break;
            case 'set':
                starsChange = validatedData.amount - currentStars;
                newStars = validatedData.amount;
                break;
            default:
                return res.status(400).json({ 
                    success: false, 
                    error: '–ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è' 
                });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥
        await db.updateUserStars(validatedData.telegramId, starsChange);

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        await db.addStarsTransaction({
            user_id: validatedData.telegramId,
            amount: starsChange,
            transaction_type: 'admin_adjustment',
            description: `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${validatedData.reason}`
        });

        console.log(`‚úÖ –ê–¥–º–∏–Ω –æ–±–Ω–æ–≤–∏–ª –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${validatedData.telegramId}: ${currentStars} -> ${newStars} (${validatedData.operation} ${validatedData.amount})`);

        res.json({ 
            success: true, 
            oldBalance: currentStars,
            newBalance: newStars,
            change: starsChange
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞' 
        });
    }
});

// API –¥–ª—è —Ä—É—á–Ω—ã—Ö –ø–æ–¥–∫—Ä—É—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
app.post('/api/admin/manual-spin', requireAdmin, async (req, res) => {
    const { userId, spinType, reason } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validation = validateRequest(req.body, {
        userId: { type: 'telegram_id', required: true },
        spinType: { type: 'spin_type', required: true },
        reason: { type: 'string', required: true, minLength: 1, maxLength: 500 }
    });
    
    if (!validation.isValid) {
        return res.status(400).json({ 
            success: false, 
            error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞',
            details: validation.errors
        });
    }

    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const validatedData = validation.data;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await db.getUser(validatedData.userId);
        if (!user) {
            return res.status(404).json({ 
                success: false, 
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        console.log(`üé≤ –ê–¥–º–∏–Ω –≤—ã–¥–∞–µ—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫—É ${validatedData.spinType} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${validatedData.userId}: ${validatedData.reason}`);

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ä—É—á–Ω–æ–π –ø–æ–¥–∫—Ä—É—Ç–∫–µ –≤ —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤
        await new Promise((resolve, reject) => {
            db.db.run(`
                INSERT INTO admin_actions (
                    action_type, 
                    target_user_id, 
                    details, 
                    admin_id, 
                    created_at
                ) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
            `, ['manual_spin', validatedData.userId, JSON.stringify({spinType: validatedData.spinType, reason: validatedData.reason}), 'admin'], (err) => {
                if (err) reject(err);
                else resolve();
            });
        });

        // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–∫—Ä—É—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        switch (spinType) {
            case 'normal':
                // –î–æ–±–∞–≤–ª—è–µ–º 20 –∑–≤–µ–∑–¥ –¥–ª—è –æ–±—ã—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                await db.updateUserStars(userId, 20);
                break;
                
            case 'mega':
                // –î–æ–±–∞–≤–ª—è–µ–º 5000 –∑–≤–µ–∑–¥ –¥–ª—è –º–µ–≥–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                await db.updateUserStars(userId, 5000);
                break;
                
            case 'friend':
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ –∑–∞ –¥—Ä—É–≥–∞
                await new Promise((resolve, reject) => {
                    db.db.run(`
                        UPDATE users 
                        SET available_friend_spins = available_friend_spins + 1 
                        WHERE telegram_id = ?
                    `, [userId], (err) => {
                        if (err) reject(err);
                        else resolve();
                    });
                });
                break;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        if (bot && userId) {
            try {
                let message = '';
                switch (spinType) {
                    case 'normal':
                        message = `üéÅ –í–∞–º –≤—ã–¥–∞–Ω–∞ –æ–±—ã—á–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ä—É–ª–µ—Ç–∫–∏!\nüí∞ –ü–æ–ª—É—á–µ–Ω–æ: 20 –∑–≤–µ–∑–¥\nüìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
                        break;
                    case 'mega':
                        message = `üëë –í–∞–º –≤—ã–¥–∞–Ω–∞ –ú–ï–ì–ê –ø—Ä–æ–∫—Ä—É—Ç–∫–∞!\nüíé –ü–æ–ª—É—á–µ–Ω–æ: 5000 –∑–≤–µ–∑–¥\nüìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
                        break;
                    case 'friend':
                        message = `‚ù§Ô∏è –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞ –¥—Ä—É–≥–∞!\nüéØ –î–æ—Å—Ç—É–ø–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞\nüìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
                        break;
                }
                
                await bot.sendMessage(userId, message);
            } catch (botError) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', botError.message);
            }
        }

        res.json({
            success: true,
            message: '–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ä—É—á–Ω–æ–π –ø–æ–¥–∫—Ä—É—Ç–∫–∏:', error);
        res.status(500).json({ 
            success: false, 
            error: 'Internal server error' 
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ä—É—á–Ω—ã—Ö –ø–æ–¥–∫—Ä—É—Ç–æ–∫
app.get('/api/admin/manual-spins/recent', requireAdmin, async (req, res) => {
    try {
        const spins = await new Promise((resolve, reject) => {
            db.db.all(`
                SELECT aa.*, u.first_name, u.username
                FROM admin_actions aa
                LEFT JOIN users u ON aa.target_user_id = u.telegram_id
                WHERE aa.action_type = 'manual_spin'
                ORDER BY aa.created_at DESC
                LIMIT 20
            `, (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });

        // –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const formattedSpins = spins.map(spin => {
            const details = JSON.parse(spin.details || '{}');
            return {
                ...spin,
                spin_type: details.spinType,
                reason: details.reason,
                user_id: spin.target_user_id
            };
        });

        res.json({ spins: formattedSpins });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—á–Ω—ã—Ö –ø–æ–¥–∫—Ä—É—Ç–æ–∫:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Endpoints –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä—É–ª–µ—Ç–∫–∏
app.get('/api/admin/wheel-settings/mega', requireAdmin, async (req, res) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ë–î
        const settings = await db.getWheelSettings('mega');
        res.json(settings || { prizes: [] });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

app.post('/api/admin/wheel-settings/mega', requireAdmin, async (req, res) => {
    const { prizes } = req.body;
    
    if (!prizes || !Array.isArray(prizes)) {
        return res.status(400).json({ 
            success: false, 
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' 
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Ä–∞–≤–Ω–∞ 100%
    const totalChance = prizes.reduce((sum, prize) => sum + (prize.chance || 0), 0);
    if (Math.abs(totalChance - 100) > 0.1) {
        return res.status(400).json({ 
            success: false, 
            error: '–°—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è 100%' 
        });
    }

    try {
        await db.saveWheelSettings('mega', { prizes });
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        res.json({ success: true });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫' 
        });
    }
});

app.get('/api/admin/wheel-settings/normal', requireAdmin, async (req, res) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ã—á–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ë–î
        const settings = await db.getWheelSettings('normal');
        res.json(settings || { prizes: [] });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—ã—á–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

app.post('/api/admin/wheel-settings/normal', requireAdmin, async (req, res) => {
    const { prizes } = req.body;
    
    if (!prizes || !Array.isArray(prizes)) {
        return res.status(400).json({ 
            success: false, 
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' 
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Ä–∞–≤–Ω–∞ 100%
    const totalChance = prizes.reduce((sum, prize) => sum + (prize.chance || 0), 0);
    if (Math.abs(totalChance - 100) > 0.1) {
        return res.status(400).json({ 
            success: false, 
            error: '–°—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è 100%' 
        });
    }

    try {
        await db.saveWheelSettings('normal', { prizes });
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ã—á–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        res.json({ success: true });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—ã—á–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫' 
        });
    }
});

// –î–û–ë–ê–í–¨–¢–ï —ç—Ç–æ—Ç endpoint –≤ telegram-bot-server.js –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:

app.get('/api/debug/referrals', async (req, res) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        const referrals = await new Promise((resolve, reject) => {
            db.db.all(`
                SELECT 
                    r.id,
                    ref.telegram_id as referrer_id,
                    ref.first_name as referrer_name,
                    rfd.telegram_id as referred_id,
                    rfd.first_name as referred_name,
                    r.referral_date
                FROM referrals r
                JOIN users ref ON r.referrer_id = ref.id
                JOIN users rfd ON r.referred_id = rfd.id
                ORDER BY r.referral_date DESC
                LIMIT 10
            `, (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });

        // –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const userCounts = await new Promise((resolve, reject) => {
            db.db.all(`
                SELECT 
                    u.telegram_id,
                    u.first_name,
                    u.referrals as referrals_field,
                    u.stars,
                    u.total_stars_earned,
                    COUNT(r.referred_id) as actual_referrals_count
                FROM users u
                LEFT JOIN referrals r ON u.telegram_id = r.referrer_id
                WHERE u.is_active = 1
                GROUP BY u.telegram_id, u.first_name, u.referrals, u.stars, u.total_stars_earned
                HAVING actual_referrals_count > 0 OR u.referrals > 0
                ORDER BY actual_referrals_count DESC
            `, (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });
        
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:');
        userCounts.forEach(user => {
            console.log(`üë§ ${user.first_name} (${user.telegram_id}): –ø–æ–ª–µ=${user.referrals_field}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏=${user.actual_referrals_count}, –∑–≤–µ–∑–¥=${user.stars}, –≤—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ=${user.total_stars_earned}`);
        });
        
        res.json({
            referrals: referrals,
            userCounts: userCounts,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// === –ü–£–ë–õ–ò–ß–ù–´–ï ENDPOINTS –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö –†–£–õ–ï–¢–ö–ò ===

// –ü—É–±–ª–∏—á–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
app.get('/api/wheel-settings/mega', async (req, res) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (—Ç–æ–ª—å–∫–æ prize chances)
        const settings = await db.getWheelSettings('mega');
        
        if (settings && settings.prizes) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —à–∞–Ω—Å—ã –ø—Ä–∏–∑–æ–≤, –±–µ–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            const publicSettings = {
                prizes: settings.prizes.map(prize => ({
                    id: prize.id,
                    chance: prize.chance
                }))
            };
            res.json(publicSettings);
        } else {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
            res.json({ prizes: [] });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–≥–∞ —Ä—É–ª–µ—Ç–∫–∏:', error);
        res.json({ prizes: [] }); // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    }
});

// === –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===

if (bot) {
    // –ö–æ–º–∞–Ω–¥–∞ /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    bot.onText(/\/start(?:\s(.+))?/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const startParam = match ? match[1] : null;
        
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${msg.from.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞${startParam ? ` —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: ${startParam}` : ''}`);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            let user = await db.getUser(userId);
            
            if (!user) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                console.log(`üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
                await db.createUser({
                    telegram_id: userId,
                    username: msg.from.username || '',
                    first_name: msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    last_name: msg.from.last_name || ''
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
                user = await db.getUser(userId);
                if (user) {
                    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: ${user.id}`);
                } else {
                    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                    return;
                }
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                console.log(`üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–µ—Ä–Ω—É–ª—Å—è (–ë–î ID: ${user.id})`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ
                if (user.first_name !== msg.from.first_name || 
                    user.username !== (msg.from.username || '')) {
                    await db.updateUserProfile(userId, {
                        username: msg.from.username || '',
                        first_name: msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        last_name: msg.from.last_name || ''
                    });
                    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                }
                
                await db.updateUserActivity(userId);
            }
            
            // –ù–ê–ô–î–ò–¢–ï —ç—Ç–æ—Ç –±–ª–æ–∫ –≤ telegram-bot-server.js –≤ –∫–æ–º–∞–Ω–¥–µ /start –∏ –ó–ê–ú–ï–ù–ò–¢–ï –µ–≥–æ:

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
            if (startParam && startParam.startsWith('ref_')) {
                const referrerId = parseInt(startParam.substring(4));
                if (referrerId && referrerId !== userId) {
                    try {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        const referrer = await db.getUser(referrerId);
                        if (referrer) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω —ç—Ç–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª
                            const existingReferral = await db.getReferral(referrerId, userId);
                            if (!existingReferral) {
                                // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª
                                const added = await db.addReferral(referrerId, userId);
                                
                                if (added) {
                                    console.log(`ü§ù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${referrerId}`);
                                    
                                    // –í–ê–ñ–ù–û: –°—Ä–∞–∑—É –Ω–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                                    await db.updateUserStars(referrerId, 100);
                                    
                                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥
                                    await db.incrementTotalStarsEarned(referrerId, 100);
                                    
                                    console.log(`‚≠ê –†–µ—Ñ–µ—Ä–µ—Ä—É ${referrerId} –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100 –∑–≤–µ–∑–¥ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ`);
                                    
                                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                                    try {
                                        await bot.sendMessage(referrerId, 
                                            `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –¥—Ä—É–≥ ${msg.from.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—Ç—É!\n` +
                                            `‚≠ê –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –∑–≤–µ–∑–¥ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!`
                                        );
                                    } catch (notifyError) {
                                        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:', notifyError.message);
                                    }
                                    
                                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
                                    try {
                                        await bot.sendMessage(userId,
                                            `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –æ—Ç ${referrer.first_name}!\n` +
                                            `üéÅ –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã!`
                                        );
                                    } catch (notifyError) {
                                        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ:', notifyError.message);
                                    }
                                }
                            } else {
                                console.log(`‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª ${userId} —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${referrerId}`);
                            }
                        }
                    } catch (refError) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', refError);
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return;
        }
        
        const welcomeMessage = `üé∞ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kosmetichka Lottery Bot\\!*

üíÑ *–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–≤—É—à–µ–∫\\!*
üå∏ –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –ø—Ä–∏–∑—ã\\!
üíé –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∑–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤
üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã

‚ú® *–ü—Ä–∏–∑—ã:*
üçé –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –ó–æ–ª–æ—Ç–æ–µ —è–±–ª–æ–∫–æ
üöö –î–æ—Å—Ç–∞–≤–∫–∞ Dolce Deals
üíé –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –∏ –±–æ–Ω—É—Å—ã

üì± *–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ @dolcedeals –¥–ª—è —Å–∫–∏–¥–æ–∫\\!*

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å\\! ‚¨áÔ∏è`;
        
        const keyboard = {
            inline_keyboard: [
                [
                    {
                        text: 'üé∞ –ó–∞–ø—É—Å—Ç–∏—Ç—å Kosmetichka Lottery',
                        web_app: { url: WEBAPP_URL }
                    }
                ],
                [
                    { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
                    { text: 'üéÅ –ú–æ–∏ –ø—Ä–∏–∑—ã', callback_data: 'prizes' }
                ],
                [
                    { text: 'üíé –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: 'promo' },
                    { text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }
                ]
            ]
        };
        
        bot.sendMessage(chatId, welcomeMessage, { 
            reply_markup: keyboard,
            parse_mode: 'MarkdownV2'
        });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /test –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    bot.onText(/\/test/, (msg) => {
        const chatId = msg.chat.id;
        bot.sendMessage(chatId, `üß™ *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞*\n\nüåê WebApp URL: \`${WEBAPP_URL}\`\n‚ö° –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç`, {
            parse_mode: 'MarkdownV2'
        });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    bot.onText(/\/admin/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        
        console.log(`üëë –ó–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ (—Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤)
        const adminIds = [
            parseInt(process.env.ADMIN_ID) || 0,
            // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
        ];
        
        if (!adminIds.includes(userId)) {
            await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
            return;
        }
        
        const serverUrl = process.env.SERVER_URL || 'http://localhost:3000';
        const adminUrl = `${serverUrl}/admin`;
        
        await bot.sendMessage(
            chatId,
            `üëë **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Kosmetichka Lottery**\n\n` +
            `üîó [–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è](${adminUrl})\n\n` +
            `üìä –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∫–∏:\n` +
            `‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n` +
            `‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–∑–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏\n` +
            `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
            `‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏\n` +
            `‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n` +
            `‚ö° –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏`,
            { 
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[
                        { text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É', url: adminUrl }
                    ]]
                }
            }
        );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stats
    bot.onText(/\/stats/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        
        try {
            const user = await db.getUser(userId);
            
            if (!user) {
                bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                return;
            }
            
            const registrationDate = new Date(user.join_date).toLocaleDateString('ru-RU');
            
            const message = `
üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**

üÜî ID: ${userId}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${registrationDate}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üé∞ –ü—Ä–æ–∫—Ä—É—Ç–æ–∫: ${user.total_spins || 0}
üéÅ –ü—Ä–∏–∑–æ–≤: ${user.prizes_won || 0}
‚≠ê –ó–≤–µ–∑–¥: ${user.stars || 20}
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referrals || 0}

üéÆ –ò–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!
            `;
            
            bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /promo –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    bot.onText(/\/promo (.+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const promoCode = match[1].toUpperCase();
        
        try {
            const user = await db.getUser(userId);
            if (!user) {
                bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                return;
            }
            
            const promo = PROMO_CODES[promoCode];
            if (!promo) {
                bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
                return;
            }
            
            if (promo.used.has(userId)) {
                bot.sendMessage(chatId, '‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥');
                return;
            }
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
            promo.used.add(userId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.updateUserStars(userId, promo.crystals);
            
            bot.sendMessage(chatId, `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n‚≠ê –ü–æ–ª—É—á–µ–Ω–æ ${promo.crystals} –∑–≤–µ–∑–¥`);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            notifyAdmins(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name} (${userId}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ ${promoCode}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    bot.onText(/\/help/, (msg) => {
        const chatId = msg.chat.id;
        const helpMessage = `
ü§ñ **–ü–æ–º–æ—â—å –ø–æ Kosmetichka Lottery Bot**

üé∞ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/balance - –ú–æ–π –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥
/deposit - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã
/promo <–∫–æ–¥> - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üéØ **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å Kosmetichka Lottery"
2. –ö—Ä—É—Ç–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É –∑–∞ –∑–≤–µ–∑–¥—ã (20 ‚≠ê –∑–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫—É)
3. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥
4. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∑–∞ –±–æ–Ω—É—Å—ã

‚≠ê **–ó–≤–µ–∑–¥—ã:**
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –¢—Ä–∞—Ç—å—Ç–µ –Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ä—É–ª–µ—Ç–∫–∏
‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π
‚Ä¢ –ü–æ–ø–æ–ª–Ω—è–π—Ç–µ —á–µ—Ä–µ–∑ Telegram Stars

üéÅ **–ü—Ä–∏–∑—ã:**
‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –ó–æ–ª–æ—Ç–æ–µ —è–±–ª–æ–∫–æ
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ Dolce Deals
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤–µ–∑–¥—ã

üì± **–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ @dolcedeals –¥–ª—è —Å–∫–∏–¥–æ–∫!**

‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
        `;
        
        bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /testprize –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤
    bot.onText(/\/testprize/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        
        try {
            const user = await db.getUser(userId);
            if (!user) {
                bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–∑
            const testPrize = {
                type: 'stars-50',
                name: '‚≠ê 50 –∑–≤–µ–∑–¥ (—Ç–µ—Å—Ç)',
                value: 50,
                description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î'
            };
            
            console.log(`üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–∑ —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await db.addUserPrizeWithTransaction(userId, testPrize, 'test');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–∑ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
            const prizes = await db.getUserPrizes(userId);
            
            bot.sendMessage(chatId, `‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${prizes.length} –ø—Ä–∏–∑–æ–≤ –≤ –ë–î.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "üéÅ –ú–æ–∏ –ø—Ä–∏–∑—ã"`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–∑–∞');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /debug –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è)
    bot.onText(/\/debug/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        
        try {
            console.log(`üîç Debug –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            
            const user = await db.getUser(userId);
            console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);
            
            const prizes = await db.getUserPrizes(userId);
            console.log(`üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤: ${prizes ? prizes.length : 0}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
            const allUsersCount = await new Promise((resolve) => {
                db.db.get('SELECT COUNT(*) as count FROM users', (err, row) => {
                    resolve(row ? row.count : 0);
                });
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤ –≤ –ë–î
            const allPrizesCount = await new Promise((resolve) => {
                db.db.get('SELECT COUNT(*) as count FROM user_prizes', (err, row) => {
                    resolve(row ? row.count : 0);
                });
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ spin_history
            const lastSpins = await new Promise((resolve) => {
                db.db.all('SELECT * FROM spin_history ORDER BY spin_date DESC LIMIT 5', (err, rows) => {
                    resolve(rows || []);
                });
            });
            
            const debugMessage = `
üîç **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î:** ${user ? '–î–∞' : '–ù–µ—Ç'}
üÜî **–í–∞—à Telegram ID:** ${userId}
${user ? `
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚≠ê –ó–≤–µ–∑–¥: ${user.stars}
üéØ –ü—Ä–æ–∫—Ä—É—Ç–æ–∫: ${user.total_spins}
üéÅ –ü—Ä–∏–∑–æ–≤: ${user.prizes_won}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.join_date).toLocaleDateString('ru-RU')}
` : ''}

üéÅ **–ü—Ä–∏–∑—ã –≤ –ë–î:** ${prizes ? prizes.length : 0}
${prizes && prizes.length > 0 ? `
–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–∑—ã:
${prizes.slice(0, 3).map((p, i) => `${i+1}. ${p.prize_name}`).join('\n')}
` : ''}

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:**
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsersCount}
üéÅ –í—Å–µ–≥–æ –ø—Ä–∏–∑–æ–≤: ${allPrizesCount}

üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏:**
${lastSpins.length > 0 ? lastSpins.map((spin, i) => 
    `${i+1}. User ID: ${spin.user_id}, Prize: ${spin.won_prize || 'none'}`
).join('\n') : '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π'}
            `;
            
            bot.sendMessage(chatId, debugMessage, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
        }
    });

    // –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
    bot.onText(/\/top/, async (msg) => {
        const chatId = msg.chat.id;
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
            await db.updateLeaderboard();
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
            const topUsers = await db.getLeaderboard(10);
            
            if (topUsers.length === 0) {
                bot.sendMessage(chatId, 'üìä –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!');
                return;
            }
            
            let message = 'üèÜ **–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:**\n\n';
            
            topUsers.forEach((user, index) => {
                const position = index + 1;
                const medal = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : `${position}.`;
                const name = user.first_name || '–ò–≥—Ä–æ–∫';
                const stars = user.total_stars || 0;
                const prizes = user.total_prizes || 0;
                
                message += `${medal} ${name} - ${stars} ‚≠ê, ${prizes} –ø—Ä–∏–∑–æ–≤\n`;
            });
            
            bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞:', error);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    bot.on('callback_query', async (query) => {
        const chatId = query.message.chat.id;
        const userId = query.from.id;
        const data = query.data;
        
        await bot.answerCallbackQuery(query.id);
        
        try {
            const user = await db.getUser(userId);
            
            switch (data) {
                case 'stats':
                    if (user) {
                        bot.sendMessage(chatId, `üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\nüé∞ –ü—Ä–æ–∫—Ä—É—Ç–æ–∫: ${user.total_spins || 0}\nüéÅ –ü—Ä–∏–∑–æ–≤: ${user.prizes_won || 0}\n‚≠ê –ó–≤–µ–∑–¥: ${user.stars || 20}`, {
                            parse_mode: 'Markdown'
                        });
                    } else {
                        bot.sendMessage(chatId, 'üìä –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                    }
                    break;
                    
                case 'prizes':
                    if (user) {
                        console.log(`üîç –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                        const prizes = await db.getUserPrizes(userId);
                        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–∑–æ–≤ –≤ –ë–î: ${prizes ? prizes.length : 0}`);
                        
                        if (prizes && prizes.length > 0) {
                            let message = 'üéÅ **–í–∞—à–∏ –ø—Ä–∏–∑—ã:**\n\n';
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 15 –ø—Ä–∏–∑–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                            prizes.slice(0, 15).forEach((prize, index) => {
                                const date = new Date(prize.won_date).toLocaleDateString('ru-RU');
                                const claimed = prize.is_claimed ? '‚úÖ' : '‚è≥';
                                
                                message += `${index + 1}. **${prize.prize_name}** ${claimed}\n`;
                                if (prize.prize_value) {
                                    message += `   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${prize.prize_value}\n`;
                                }
                                message += `   üìÖ –í—ã–∏–≥—Ä–∞–Ω–æ: ${date}\n\n`;
                            });
                            
                            if (prizes.length > 15) {
                                message += `... –∏ –µ—â–µ ${prizes.length - 15} –ø—Ä–∏–∑–æ–≤\n\n`;
                            }
                            
                            message += 'üí° –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –ø—Ä–∏–∑–∞–º–∏.';
                            
                            const keyboard = {
                                inline_keyboard: [[
                                    { text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: WEBAPP_URL } }
                                ]]
                            };
                            
                            bot.sendMessage(chatId, message, { 
                                parse_mode: 'Markdown',
                                reply_markup: keyboard
                            });
                        } else {
                            bot.sendMessage(chatId, 'üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∑–æ–≤.\n\nüéÆ –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∫—Ä—É—Ç–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É!', {
                                reply_markup: {
                                    inline_keyboard: [[
                                        { text: 'üé∞ –ò–≥—Ä–∞—Ç—å', web_app: { url: WEBAPP_URL } }
                                    ]]
                                }
                            });
                        }
                    } else {
                        bot.sendMessage(chatId, 'üéÅ –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                    }
                    break;
                
            case 'promo':
                bot.sendMessage(chatId, 'üíé **–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/promo –í–ê–®_–ö–û–î`\n\n–ü—Ä–∏–º–µ—Ä: `/promo WELCOME2024`', {
                    parse_mode: 'Markdown'
                });
                break;
                
            // –í —Ñ–∞–π–ª–µ telegram-bot-server.js
// –ó–∞–º–µ–Ω–∏—Ç—å —Å–ª—É—á–∞–π 'invite' –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query

            // –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query, —Å–ª—É—á–∞–π 'invite':
            case 'invite':
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                const referralLink = `https://t.me/${BOT_USERNAME}?start=ref_${userId}`;
                const shareText = 'üé∞ –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Kosmetichka Lottery Bot - –∫—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –ø—Ä–∏–∑—ã! üíÑ‚ú®';
                const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(shareText)}`;
                
                const inviteKeyboard = {
                    inline_keyboard: [
                        [
                            {
                                text: 'üë• –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π',
                                url: shareUrl
                            }
                        ],
                        [
                            {
                                text: 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É',
                                callback_data: `copy_link_${userId}`
                            }
                        ]
                    ]
                };
                
                const inviteMessage = `üë• **–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!**

üéÅ **–í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã:**
‚Ä¢ 100 ‚≠ê –∑–≤–µ–∑–¥ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ –ø—Ä–∏–∑—ã

üîó **–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
\`${referralLink}\`

üí° **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏
2. –î—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
3. –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç–µ 100 –∑–≤–µ–∑–¥!

üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:`;
                
                bot.sendMessage(chatId, inviteMessage, {
                    reply_markup: inviteKeyboard,
                    parse_mode: 'Markdown'
                });
                break;
                
            // –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
            default:
                if (data.startsWith('copy_link_')) {
                    const linkUserId = data.split('_')[2];
                    const referralLink = `https://t.me/${BOT_USERNAME}?start=ref_${linkUserId}`;
                    
                    const copyMessage = `üìã **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**

\`${referralLink}\`

üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ!`;

                    bot.sendMessage(chatId, copyMessage, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º',
                                        callback_data: 'invite'
                                    }
                                ]
                            ]
                        }
                    });
                }
                break;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ callback query:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
    bot.on('error', (error) => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
        if (error.code === 'ETELEGRAM') {
            console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', error.message);
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error.message);
        }
        
        // –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
        if (DEBUG_MODE) {
            console.error('üêõ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:', error);
        }
    });

    bot.on('polling_error', (error) => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—É—Ç—å
        if (error.code === 'ETELEGRAM') {
            console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error.message);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç 409, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if (error.message.includes('409')) {
                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç polling, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
                botPolling = false;
                
                // –ñ–¥–µ–º –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                setTimeout(() => {
                    startPolling();
                }, 10000); // 10 —Å–µ–∫—É–Ω–¥
            }
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error.message);
        }
        
        // –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
        if (DEBUG_MODE) {
            console.error('üêõ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ polling:', error);
        }
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot.onText(/\/admin_stats/, (msg) => {
        const userId = msg.from.id;
        
        if (!ADMIN_IDS.includes(userId)) {
            bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
            return;
        }
        
        const totalUsers = users.size;
        const activeUsers = Array.from(users.values()).filter(u => u.webapp_data).length;
        const totalSpins = Array.from(users.values())
            .reduce((sum, u) => sum + (u.webapp_data?.stats?.totalSpins || 0), 0);
        
        const message = `
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}
üéÆ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${activeUsers}
üé∞ –í—Å–µ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫: ${totalSpins}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
        `;
        
        bot.sendMessage(msg.chat.id, message, { parse_mode: 'Markdown' });
    });

    // –†–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    bot.onText(/\/broadcast (.+)/, (msg, match) => {
        const userId = msg.from.id;
        
        if (!ADMIN_IDS.includes(userId)) {
            bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
            return;
        }
        
        const message = match[1];
        let sent = 0;
        
        users.forEach(async (user) => {
            try {
                await bot.sendMessage(user.chat_id, `üì¢ ${message}`);
                sent++;
            } catch (error) {
                console.log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, error.message);
            }
        });
        
        bot.sendMessage(msg.chat.id, `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
    });

    // ===== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –î–ï–ü–û–ó–ò–¢–ê TELEGRAM STARS =====

    // –ö–æ–º–∞–Ω–¥–∞ /balance - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
    bot.onText(/\/balance/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        try {
            const user = await db.getUser(userId);
            
            if (!user) {
                bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                return;
            }

            const balance = user.stars || 0;
            const totalEarned = user.total_stars_earned || 20;
            const totalSpent = totalEarned - balance;

            const message = `
üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥**

‚≠ê –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **${balance} –∑–≤–µ–∑–¥**
üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: **${totalEarned} –∑–≤–µ–∑–¥**
üìâ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: **${totalSpent} –∑–≤–µ–∑–¥**

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /deposit –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
üé∞ 20 ‚≠ê = 1 –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ä—É–ª–µ—Ç–∫–∏
            `;

            bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /deposit - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã
    bot.onText(/\/deposit/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        try {
            const user = await db.getUser(userId);
            
            if (!user) {
                bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—É–º–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚≠ê 100 –∑–≤–µ–∑–¥ (100 ‚≠ê)', callback_data: 'deposit_100' },
                        { text: '‚≠ê 200 –∑–≤–µ–∑–¥ (200 ‚≠ê)', callback_data: 'deposit_200' }
                    ],
                    [
                        { text: '‚≠ê 500 –∑–≤–µ–∑–¥ (500 ‚≠ê)', callback_data: 'deposit_500' },
                        { text: '‚≠ê 1000 –∑–≤–µ–∑–¥ (1000 ‚≠ê)', callback_data: 'deposit_1000' }
                    ],
                    [
                        { text: '‚≠ê –î—Ä—É–≥–∞—è —Å—É–º–º–∞', callback_data: 'deposit_custom' }
                    ]
                ]
            };

            const message = `
üí∞ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Telegram Stars**

‚≠ê Telegram Stars = ‚≠ê –ò–≥—Ä–æ–≤—ã–µ –∑–≤–µ–∑–¥—ã (1:1)

üé∞ 20 –∑–≤–µ–∑–¥ = 1 –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ä—É–ª–µ—Ç–∫–∏
üéÅ –ë–æ–ª—å—à–µ –∑–≤–µ–∑–¥ = –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ –ø—Ä–∏–∑—ã!

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
            `;

            bot.sendMessage(chatId, message, { 
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞
    bot.on('callback_query', async (callbackQuery) => {
        const msg = callbackQuery.message;
        const chatId = msg.chat.id;
        const userId = callbackQuery.from.id;
        const data = callbackQuery.data;

        try {
            // –î–µ–ø–æ–∑–∏—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—É–º–º
            if (data.startsWith('deposit_')) {
                const amount = data.split('_')[1];
                
                if (amount === 'custom') {
                    bot.sendMessage(chatId, `
üí∞ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—É–º–º—É**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`/pay 250\` - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 250 –∑–≤–µ–∑–¥

–ú–∏–Ω–∏–º—É–º: 50 –∑–≤–µ–∑–¥
–ú–∞–∫—Å–∏–º—É–º: 2500 –∑–≤–µ–∑–¥
                    `, { parse_mode: 'Markdown' });
                    
                } else {
                    const starsAmount = parseInt(amount);
                    await handleStarsPayment(userId, starsAmount, chatId);
                }
            }
            
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–ª–±—ç–∫–∞
            bot.answerCallbackQuery(callbackQuery.id);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞:', error);
            bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' });
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /pay –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
    bot.onText(/\/pay (\d+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const amount = parseInt(match[1]);

        if (amount < 50 || amount > 2500) {
            bot.sendMessage(chatId, '‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 50 –¥–æ 2500 –∑–≤–µ–∑–¥');
            return;
        }

        await handleStarsPayment(userId, amount, chatId);
    });

    // === API ENDPOINTS –î–õ–Ø –î–ï–ü–û–ó–ò–¢–ê ===
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–∞–ø–ø
    app.post('/api/deposit/create', async (req, res) => {
        try {
            const { userId, amount, userData } = req.body;

            if (!userId || !amount || amount < 50 || amount > 2500) {
                return res.json({ 
                    success: false, 
                    error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è' 
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await db.getUser(userId);
            if (!user) {
                return res.json({ 
                    success: false, 
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
                });
            }

            // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            if (bot) {
                await handleStarsPayment(userId, amount, userId);
                res.json({ 
                    success: true, 
                    message: '–°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º' 
                });
            } else {
                res.json({ 
                    success: false, 
                    error: '–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' 
                });
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
            res.json({ 
                success: false, 
                error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
            });
        }
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.get('/api/user/:userId/transactions', async (req, res) => {
        try {
            const { userId } = req.params;
            const transactions = await db.getUserTransactions(userId, 50);

            res.json({
                success: true,
                transactions: transactions
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
            res.json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'
            });
        }
    });
}

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø TELEGRAM STARS ===

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Stars
async function handleStarsPayment(userId, starsAmount, chatId) {
    try {
        console.log(`üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ ${starsAmount} –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        const user = await db.getUser(userId);
        if (!user) {
            bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Bot API
        const invoice = {
            title: `üé∞ Kosmetichka Lottery - ${starsAmount} –∑–≤–µ–∑–¥`,
            description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${starsAmount} –∑–≤–µ–∑–¥ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ—Ä–µ–µ`,
            payload: JSON.stringify({
                userId: userId,
                amount: starsAmount,
                type: 'stars_deposit',
                timestamp: Date.now()
            }),
            provider_token: '', // –î–ª—è Telegram Stars —ç—Ç–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            currency: 'XTR', // Telegram Stars currency
            prices: [
                {
                    label: `‚≠ê ${starsAmount} –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥`,
                    amount: starsAmount // –°—É–º–º–∞ –≤ Telegram Stars
                }
            ],
            need_name: false,
            need_phone_number: false,
            need_email: false,
            need_shipping_address: false,
            send_phone_number_to_provider: false,
            send_email_to_provider: false,
            is_flexible: false
        };

        const message = `
üí∞ **–°—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω**

‚≠ê –°—É–º–º–∞: ${starsAmount} Telegram Stars
üé∞ –ü–æ–ª—É—á–∏—Ç–µ: ${starsAmount} –∏–≥—Ä–æ–≤—ã—Ö –∑–≤–µ–∑–¥
üí∞ –ö—É—Ä—Å: 1:1 (Telegram Stars = –∏–≥—Ä–æ–≤—ã–µ –∑–≤–µ–∑–¥—ã)

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:
        `;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await bot.sendInvoice(chatId, invoice.title, invoice.description, 
            invoice.payload, invoice.provider_token, invoice.currency, 
            invoice.prices, {
                need_name: invoice.need_name,
                need_phone_number: invoice.need_phone_number,
                need_email: invoice.need_email,
                need_shipping_address: invoice.need_shipping_address,
                send_phone_number_to_provider: invoice.send_phone_number_to_provider,
                send_email_to_provider: invoice.send_email_to_provider,
                is_flexible: invoice.is_flexible
            });

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π)
if (bot) {
    bot.on('pre_checkout_query', async (preCheckoutQuery) => {
        console.log('üí≥ Pre-checkout query –ø–æ–ª—É—á–µ–Ω:', preCheckoutQuery);
        
        try {
            const payload = JSON.parse(preCheckoutQuery.invoice_payload);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞
            if (payload.type === 'stars_deposit' && payload.userId && payload.amount) {
                const user = await db.getUser(payload.userId);
                
                if (user) {
                    // –û–¥–æ–±—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
                    await bot.answerPreCheckoutQuery(preCheckoutQuery.id, true);
                    console.log('‚úÖ Pre-checkout –æ–¥–æ–±—Ä–µ–Ω');
                } else {
                    await bot.answerPreCheckoutQuery(preCheckoutQuery.id, false, {
                        error_message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                    });
                }
            } else {
                await bot.answerPreCheckoutQuery(preCheckoutQuery.id, false, {
                    error_message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞'
                });
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ pre-checkout:', error);
            await bot.answerPreCheckoutQuery(preCheckoutQuery.id, false, {
                error_message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞'
            });
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    bot.on('successful_payment', async (msg) => {
        console.log('üéâ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω:', msg.successful_payment);
        
        try {
            const payment = msg.successful_payment;
            const payload = JSON.parse(payment.invoice_payload);
            const userId = payload.userId;
            const starsAmount = payload.amount;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await db.updateUserStars(userId, starsAmount);
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
            await db.addStarsTransaction({
                user_id: userId,
                amount: starsAmount,
                type: 'deposit',
                telegram_payment_id: payment.telegram_payment_charge_id,
                provider_payment_id: payment.provider_payment_charge_id,
                currency: payment.currency,
                total_amount: payment.total_amount
            });
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
            const user = await db.getUser(userId);
            const newBalance = user ? user.stars : 0;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const confirmMessage = `
üéâ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!**

‚≠ê –ó–∞—á–∏—Å–ª–µ–Ω–æ: **${starsAmount} –∑–≤–µ–∑–¥**
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: **${newBalance} –∑–≤–µ–∑–¥**

üé∞ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ä—É–ª–µ—Ç–∫–∏!
üéÅ –£–¥–∞—á–∏ –≤ –≤—ã–∏–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤!
            `;
            
            await bot.sendMessage(msg.chat.id, confirmMessage, { parse_mode: 'Markdown' });
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è—Ö
            if (starsAmount >= 1000) {
                const user = await db.getUser(userId);
                if (user) {
                    notifyAdmins(`üí∞ –ö—Ä—É–ø–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: ${user.first_name} (${userId}) –ø–æ–ø–æ–ª–Ω–∏–ª –Ω–∞ ${starsAmount} –∑–≤–µ–∑–¥`);
                }
            }
            
            console.log(`‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${userId} –ø–æ–ª—É—á–∏–ª ${starsAmount} –∑–≤–µ–∑–¥`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∑–≤–µ–∑–¥. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
        }
    });
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

// –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ HTML –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
function createBasicHTML() {
    return `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kosmetichka Lottery Bot</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #EF55A5 0%, #809EFF 50%, #CCD537 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        .container {
            text-align: center;
            max-width: 400px;
            background: rgba(0,0,0,0.3);
            padding: 40px 30px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
        }
        h1 {
            font-size: 28px;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #fff, #CCD537);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .emoji { font-size: 48px; margin-bottom: 20px; }
        .button {
            background: linear-gradient(45deg, #EF55A5, #FF6B9D);
            border: none;
            color: white;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            margin: 10px;
            transition: transform 0.2s;
        }
        .button:hover { transform: translateY(-2px); }
    </style>
</head>
<body>
    <div class="container">
        <div class="emoji">üé∞</div>
        <h1>Kosmetichka Lottery</h1>
        <p>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫—Ä–∞—Å–æ—Ç—ã –∏ –ø—Ä–∏–∑–æ–≤!</p>
        <button class="button" onclick="initApp()">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</button>
        <div id="status" style="margin-top: 20px; font-size: 14px;"></div>
    </div>
    <script>
        function initApp() {
            const tg = window.Telegram?.WebApp;
            if (tg) {
                tg.ready();
                tg.expand();
                document.getElementById('status').innerHTML = '‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!';
                console.log('WebApp –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            } else {
                document.getElementById('status').innerHTML = '‚ö†Ô∏è –û—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞';
            }
        }
        window.addEventListener('load', () => {
            console.log('üöÄ Kosmetichka Lottery –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
            const tg = window.Telegram?.WebApp;
            if (tg) {
                initApp();
            }
        });
    </script>
</body>
</html>`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ä—É–ª–µ—Ç–∫–∏
async function handleWheelSpin(userId, data) {
    try {
        console.log('üé∞ HANDLE_WHEEL_SPIN - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', {
            userId: userId,
            hasData: !!data,
            hasPrize: !!data?.prize,
            prizeType: data?.prize?.type,
            prizeName: data?.prize?.name,
            spinType: data?.spinType
        });
        
        let user = await db.getUser(userId);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î - —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        if (!user) {
            console.log(`üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ —Ä—É–ª–µ—Ç–∫–∏`);
            
            const userData = {
                telegram_id: userId,
                username: data.user?.username || '',
                first_name: data.user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                last_name: data.user?.last_name || ''
            };
            
            await db.createUser(userData);
            user = await db.getUser(userId);
            
            if (!user) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                return;
            }
        }
        
        console.log(`üé∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∫—Ä—É—Ç–∏—Ç —Ä—É–ª–µ—Ç–∫—É`);
        console.log('üéÅ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–∞:', JSON.stringify(data.prize, null, 2));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
        await db.updateUserSpinStats(userId);
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑
        if (data.prize) {
            if (data.prize.type !== 'empty') {
                console.log('üèÜ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –ø—Ä–∏–∑ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π');
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞
                await db.addUserPrizeWithTransaction(userId, data.prize, data.spinType || 'normal');
                console.log('‚úÖ –ü—Ä–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π');
                
                // –ï—Å–ª–∏ —ç—Ç–æ –∑–≤–µ–∑–¥—ã - –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                if (data.prize.type.includes('stars')) {
                    const starsAmount = data.prize.value || 0;
                    await db.updateUserStars(userId, starsAmount);
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
                if (bot) {
                    try {
                        await bot.sendMessage(userId, `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\nüéÅ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${data.prize.description || data.prize.name}!`);
                        
                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–∞—Ö (—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã)
                        if (data.prize.type.includes('golden-apple') || data.prize.type.includes('dolce')) {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            notifyAdmins(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name} (${userId}) –≤—ã–∏–≥—Ä–∞–ª: ${data.prize.name}`);
                            
                            // –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç):
                            // notifyAdmins(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name} (${userId}) –≤—ã–∏–≥—Ä–∞–ª: ${data.prize.name}`);
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
                    }
                }
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
async function handleTaskCompleted(userId, data) {
    try {
        const user = await db.getUser(userId);
        if (!user) return;
        
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ: ${data.taskId}`);
        
        // –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        const taskAdded = await db.completeTask(userId, data);
        
        if (taskAdded) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const rewardAmount = data.reward?.amount || 0;
            if (rewardAmount > 0) {
                await db.updateUserStars(userId, rewardAmount);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (bot) {
                try {
                    await bot.sendMessage(userId, `‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n‚≠ê –ü–æ–ª—É—á–µ–Ω–æ ${rewardAmount} –∑–≤–µ–∑–¥`);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
                }
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async function handleChannelSubscription(userId, data) {
    try {
        const user = await db.getUser(userId);
        if (!user) return;
        
        console.log(`üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: ${data.channel}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        let channelField;
        let bonus = 50;
        
        switch (data.channel) {
            case 'kosmetichka_channel':
                channelField = 'is_subscribed_channel1';
                bonus = 50;
                break;
            case 'kosmetichka_instagram':
                channelField = 'is_subscribed_channel2';
                bonus = 50;
                break;
            case 'dolcedeals':
                channelField = 'is_subscribed_dolcedeals';
                bonus = 75;
                break;
            default:
                console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: ${data.channel}`);
                return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        await db.updateUserSubscription(userId, channelField, true);
        
        // –î–∞–µ–º –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
        await db.updateUserStars(userId, bonus);
        
        if (bot) {
            try {
                await bot.sendMessage(userId, `üì± –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª!\n‚≠ê –ü–æ–ª—É—á–µ–Ω–æ ${bonus} –∑–≤–µ–∑–¥`);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function syncUserData(userId, webAppData) {
    try {
        let user = await db.getUser(userId);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î - —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        if (!user) {
            console.log(`üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`);
            
            // –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram WebApp –µ—Å–ª–∏ –µ—Å—Ç—å
            const telegramUser = webAppData.userData?.user || webAppData.user || {};
            const userData = {
                telegram_id: userId,
                username: telegramUser.username || '',
                first_name: telegramUser.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                last_name: telegramUser.last_name || ''
            };
            
            await db.createUser(userData);
            user = await db.getUser(userId);
            
            if (!user) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                return webAppData;
            }
        }
        
        console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.updateUserActivity(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        const prizes = await db.getUserPrizes(userId);
        const completedTasks = await db.getUserCompletedTasks(userId);
        const subscriptions = await db.getUserSubscriptions(userId);
        const actualReferralsCount = await db.getUserReferralsCount(userId);
        
        const syncedData = {
            ...webAppData,
            profile: {
                ...webAppData.profile,
                telegramId: userId,
                verified: true,
                name: user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            },
            stats: {
                stars: user.stars || 20,
                totalSpins: user.total_spins || 0,
                prizesWon: user.prizes_won || 0,
                referrals: actualReferralsCount,
                totalStarsEarned: user.total_stars_earned || 20
            },
            prizes: prizes || [],
            tasks: {
                completed: completedTasks || [],
                subscriptions: subscriptions || {}
            }
        };
        
        return syncedData;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        return webAppData;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–µ
async function notifyWinToChannel(user, prize) {
    try {
        // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–∏–∑–æ–≤
        const prizeEmojis = {
            'golden-apple-3000': 'üíé',
            'golden-apple-2000': 'üéÅ', 
            'golden-apple-1500': 'üéà',
            'golden-apple-1000': 'üéÄ',
            'golden-apple-500': 'üéä',
            'dolce-deals': 'üç∞'
        };
        
        const emoji = prizeEmojis[prize.type] || 'üéÅ';
        const userName = user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const userHandle = user.username ? `@${user.username}` : '';
        
        const winTime = new Date().toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            day: '2-digit',
            month: '2-digit', 
            hour: '2-digit',
            minute: '2-digit'
        });

        const message = `üéâ <b>–ù–û–í–´–ô –í–´–ò–ì–†–´–®!</b> üéâ

${emoji} <b>${prize.name}</b>
üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>${prize.value || 0}‚ÇΩ</b>

üë§ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>${userName}</b> ${userHandle ? `(${userHandle})` : `(${user.telegram_id})`}
üïê –í—Ä–µ–º—è: ${winTime}

üé∞ –•–æ—á–µ—à—å —Ç–æ–∂–µ –≤—ã–∏–≥—Ä–∞—Ç—å? –ü–æ–ø—Ä–æ–±—É–π —Å–≤–æ—é —É–¥–∞—á—É!
üéÆ @kosmetichka_lottery_bot`;

        await bot.sendMessage(NOTIFICATION_CHANNEL, message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });
        
        console.log(`üèÜ –í—ã–∏–≥—Ä—ã—à –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª: ${prize.name} –¥–ª—è ${userName}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –∫–∞–Ω–∞–ª:', error);
    }
}

// ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @)
const NOTIFICATION_CHANNEL = '-1002637779020'; // –∏–ª–∏ -100XXXXXXXXXX –µ—Å–ª–∏ –µ—Å—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª
async function notifyAdmins(message) {
    try {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        const channelMessage = `üîî üéâ ${message}`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        await bot.sendMessage(NOTIFICATION_CHANNEL, channelMessage, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });
        
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: ${message}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:', error);
        
        // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        const ADMIN_IDS = process.env.ADMIN_IDS ? 
            process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim())) : 
            [];
            
        ADMIN_IDS.forEach(async (adminId) => {
            try {
                await bot.sendMessage(adminId, `üîî ${message}`);
            } catch (adminError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ${adminId}:`, adminError);
            }
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Express
app.use((error, req, res, next) => {
    console.error('‚ùå Express –æ—à–∏–±–∫–∞:', error);
    res.status(500).json({ 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
        message: process.env.NODE_ENV === 'development' ? error.message : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ 404 handler
app.use((err, req, res, next) => {
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è –¥–µ–±–∞–≥–∞)
    console.error('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', {
        message: err.message,
        stack: err.stack,
        url: req.url,
        method: req.method,
        timestamp: new Date().toISOString()
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
    const statusCode = err.statusCode || err.status || 500;
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É (–±–µ–∑ stack trace)
    const errorResponse = {
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        timestamp: new Date().toISOString()
    };
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π
    if (process.env.NODE_ENV === 'development') {
        errorResponse.message = err.message;
        errorResponse.details = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π';
    }
    
    res.status(statusCode).json(errorResponse);
});

// 404 handler
app.use((req, res) => {
    console.log(`‚ùå 404: ${req.method} ${req.url}`);
    res.status(404).json({ 
        error: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 
        url: req.url,
        timestamp: new Date().toISOString()
    });
});

// === –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ===

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
let backgroundTasks = null;
let sponsorAutomation = null;
let winsChannelManager = null;

const server = app.listen(PORT, '0.0.0.0', () => {
    console.log('\nüéâ KOSMETICHKA LOTTERY BOT –ó–ê–ü–£–©–ï–ù!');
    console.log('=====================================');
    console.log(`   üì° –ü–æ—Ä—Ç: ${PORT}`);
    console.log(`   üåê URL: ${WEBAPP_URL}`);
    console.log(`   ü§ñ –ë–æ—Ç: ${bot ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞'}`);
    console.log(`   üìÅ Static: ${fs.existsSync(publicPath) ? '‚úÖ' : '‚ùå'}`);
    console.log(`   üëë Admin: ${WEBAPP_URL}/admin`);
    console.log(`   ‚ö° –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
    console.log('\nüîó –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`   ‚Ä¢ Health: ${WEBAPP_URL}/health`);
    console.log(`   ‚Ä¢ Debug: ${WEBAPP_URL}/debug`);
    console.log('=====================================\n');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (bot) {
        (async () => {
            try {
                backgroundTasks = new BackgroundTaskManager(db, bot);
                console.log('üîÑ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã');
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
                sponsorAutomation = new SponsorAutomation(bot);
                console.log('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞');
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π
                winsChannelManager = new WinsChannelManager(bot);
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ë–î –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞
                await winsChannelManager.addPostedColumn();
                console.log('üèÜ –°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π –∑–∞–ø—É—â–µ–Ω–∞');
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–æ–∫
                await startSubscriptionMonitoring();
                console.log('üîç –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á:', error);
            }
        })();
    }
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    botPolling = false;
    
    if (backgroundTasks) {
        backgroundTasks.stopAllTasks();
    }
    
    server.close(() => {
        if (bot) {
            bot.stopPolling().catch(console.error);
        }
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    botPolling = false;
    
    if (backgroundTasks) {
        backgroundTasks.stopAllTasks();
    }
    
    server.close(() => {
        if (bot) {
            bot.stopPolling().catch(console.error);
        }
        process.exit(0);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

// === –°–ò–°–¢–ï–ú–ê –®–¢–†–ê–§–û–í –ó–ê –û–¢–ü–ò–°–ö–£ ===

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
async function startSubscriptionMonitoring() {
    console.log('üîç –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–æ–∫...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤ (4 —Ä–∞–∑–∞ –∑–∞ 48 —á–∞—Å–æ–≤)
    setInterval(async () => {
        await checkAllUsersSubscriptions();
        await checkAndRewardActiveSubscriptions();
    }, 12 * 60 * 60 * 1000);

    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
    setTimeout(() => {
        checkAllUsersSubscriptions();
        checkAndRewardActiveSubscriptions();
    }, 5 * 60 * 1000);
}

async function checkAllUsersSubscriptions() {
    try {
        console.log('üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        const activeSubscriptions = await new Promise((resolve, reject) => {
            db.db.all(`
                SELECT ucs.*, u.telegram_id, pc.channel_username, pc.channel_name
                FROM user_channel_subscriptions ucs
                JOIN users u ON ucs.user_id = u.id  
                JOIN partner_channels pc ON ucs.channel_id = pc.id
                WHERE ucs.is_active = 1 AND ucs.is_verified = 1
                AND ucs.subscribed_date <= datetime('now', '-1 hour')
            `, (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${activeSubscriptions.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);

        let violationsFound = 0;
        
        for (const subscription of activeSubscriptions) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ
                const subscriptionCheck = await checkUserChannelSubscription(
                    subscription.telegram_id, 
                    subscription.channel_username
                );

                if (!subscriptionCheck.isSubscribed) {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è! –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ
                    console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${subscription.telegram_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç ${subscription.channel_username}`);
                    
                    await applyUnsubscriptionPenalty(subscription);
                    violationsFound++;
                }

            } catch (error) {
                console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, error.message);
            }
        }

        console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: ${violationsFound}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤)
async function checkAndRewardActiveSubscriptions() {
    try {
        console.log('üéÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏...');
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∏–∑ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const taskChannel = await new Promise((resolve, reject) => {
            db.db.get(`
                SELECT * FROM partner_channels 
                WHERE channel_username = 'kosmetichka_spin' 
                AND is_active = 1
                LIMIT 1
            `, (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });

        if (!taskChannel) {
            console.log('‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = await new Promise((resolve, reject) => {
            db.db.all(`
                SELECT id, telegram_id FROM users 
                WHERE is_active = 1
            `, (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });

        let rewardedCount = 0;
        let checkCount = 0;

        for (const user of users) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
                const subscriptionCheck = await checkUserChannelSubscription(
                    user.telegram_id, 
                    taskChannel.channel_username
                );

                if (subscriptionCheck.isSubscribed) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤
                    const lastReward = await new Promise((resolve, reject) => {
                        db.db.get(`
                            SELECT * FROM subscription_rewards 
                            WHERE user_id = ? 
                            AND channel_id = ?
                            AND created_at > datetime('now', '-12 hours')
                            ORDER BY created_at DESC
                            LIMIT 1
                        `, [user.id, taskChannel.id], (err, row) => {
                            if (err) reject(err);
                            else resolve(row);
                        });
                    });

                    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∞–Ω
                    if (!lastReward) {
                        // –ù–∞—á–∏—Å–ª—è–µ–º 20 –∑–≤–µ–∑–¥
                        await new Promise((resolve, reject) => {
                            db.db.run(`
                                UPDATE users 
                                SET stars = stars + 20,
                                    total_stars_earned = total_stars_earned + 20
                                WHERE id = ?
                            `, [user.id], (err) => {
                                if (err) reject(err);
                                else resolve();
                            });
                        });

                        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
                        await new Promise((resolve, reject) => {
                            db.db.run(`
                                INSERT INTO subscription_rewards (user_id, channel_id, stars_earned, created_at)
                                VALUES (?, ?, 20, datetime('now'))
                            `, [user.id, taskChannel.id], (err) => {
                                if (err) reject(err);
                                else resolve();
                            });
                        });

                        rewardedCount++;
                        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegram_id} –ø–æ–ª—É—á–∏–ª 20 –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É`);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤
                        const rewardCount = await new Promise((resolve, reject) => {
                            db.db.get(`
                                SELECT COUNT(*) as count 
                                FROM subscription_rewards 
                                WHERE user_id = ? 
                                AND channel_id = ?
                                AND created_at > datetime('now', '-48 hours')
                            `, [user.id, taskChannel.id], (err, row) => {
                                if (err) reject(err);
                                else resolve(row ? row.count : 0);
                            });
                        });

                        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª 4 –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ 48 —á–∞—Å–æ–≤, —É–≤–µ–¥–æ–º–ª—è–µ–º
                        if (rewardCount >= 4) {
                            try {
                                await bot.sendMessage(user.telegram_id, 
                                    'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –º–∞–∫—Å–∏–º—É–º –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤!\n\n' +
                                    '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å –ø—Ä–∏–∑—ã! üé∞'
                                );
                            } catch (e) {
                                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}`);
                            }
                        }
                    }
                    checkCount++;
                }
            } catch (error) {
                console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error.message);
            }
        }

        console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${checkCount}, –ù–∞–≥—Ä–∞–∂–¥–µ–Ω–æ: ${rewardedCount}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    }
}

async function applyUnsubscriptionPenalty(subscription) {
    try {
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await new Promise((resolve, reject) => {
            db.db.run(`
                UPDATE user_channel_subscriptions 
                SET is_active = 0, unsubscribed_date = datetime('now')
                WHERE id = ?
            `, [subscription.id], (err) => {
                if (err) reject(err);
                else resolve();
            });
        });

        // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        await new Promise((resolve, reject) => {
            db.db.run(`
                UPDATE partner_channels 
                SET current_subscribers = CASE 
                    WHEN current_subscribers > 0 THEN current_subscribers - 1 
                    ELSE 0 
                END
                WHERE id = ?
            `, [subscription.channel_id], (err) => {
                if (err) reject(err);
                else resolve();
            });
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userViolations = await new Promise((resolve, reject) => {
            db.db.get(`
                SELECT violation_count FROM users WHERE telegram_id = ?
            `, [subscription.telegram_id], (err, row) => {
                if (err) reject(err);
                else resolve(row?.violation_count || 0);
            });
        });

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à—Ç—Ä–∞—Ñ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
        let penaltyHours = 12; // –ë–∞–∑–æ–≤—ã–π —à—Ç—Ä–∞—Ñ 12 —á–∞—Å–æ–≤
        if (userViolations >= 1) penaltyHours = 24;
        if (userViolations >= 2) penaltyHours = 48;
        if (userViolations >= 3) penaltyHours = 72;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–∞–¥–∞–Ω–∏–π
        const banUntil = new Date(Date.now() + penaltyHours * 60 * 60 * 1000);
        
        await new Promise((resolve, reject) => {
            db.db.run(`
                UPDATE users SET 
                    tasks_ban_until = ?,
                    violation_count = violation_count + 1
                WHERE telegram_id = ?
            `, [banUntil.toISOString(), subscription.telegram_id], (err) => {
                if (err) reject(err);
                else resolve();
            });
        });

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –ª–æ–≥
        await new Promise((resolve, reject) => {
            db.db.run(`
                INSERT INTO subscription_violations 
                (user_id, channel_id, violation_type, penalty_duration) 
                VALUES (?, ?, 'early_unsubscribe', ?)
            `, [subscription.user_id, subscription.channel_id, penaltyHours], (err) => {
                if (err) reject(err);
                else resolve();
            });
        });

        console.log(`üö´ –ü—Ä–∏–º–µ–Ω–µ–Ω —à—Ç—Ä–∞—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${subscription.telegram_id}: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ ${penaltyHours} —á–∞—Å–æ–≤`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try {
            await bot.sendMessage(subscription.telegram_id, 
                `‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n` +
                `–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ "${subscription.channel_name}".\n` +
                `–ó–∞ –¥–æ—Å—Ä–æ—á–Ω—É—é –æ—Ç–ø–∏—Å–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ ${penaltyHours} —á–∞—Å–æ–≤.\n\n` +
                `–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${banUntil.toLocaleString('ru-RU')}\n\n` +
                `–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —à—Ç—Ä–∞—Ñ–æ–≤ –≤ –±—É–¥—É—â–µ–º, –Ω–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏.`,
                { parse_mode: 'HTML' }
            );
        } catch (notificationError) {
            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${subscription.telegram_id}:`, notificationError.message);
        }

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, error);
    }
}

// === API –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–û–ö ===

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã
app.post('/api/check-user-subscriptions', async (req, res) => {
    try {
        const { userId } = req.body;
        
        if (!userId) {
            return res.status(400).json({ error: 'User ID is required' });
        }

        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã-–ø–∞—Ä—Ç–Ω–µ—Ä—ã
        const channels = await new Promise((resolve, reject) => {
            db.db.all(`
                SELECT * FROM partner_channels 
                WHERE is_active = 1 
                ORDER BY created_date DESC
            `, (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });

        const results = [];
        let newSubscriptions = 0;
        let totalReward = 0;

        for (const channel of channels) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                const subscriptionCheck = await checkUserChannelSubscription(userId, channel.channel_username);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
                const existingSubscription = await new Promise((resolve, reject) => {
                    db.db.get(`
                        SELECT * FROM user_channel_subscriptions 
                        WHERE user_id = ? AND channel_id = ? AND is_active = 1
                    `, [userId, channel.id], (err, row) => {
                        if (err) reject(err);
                        else resolve(row);
                    });
                });

                if (subscriptionCheck.isSubscribed && !existingSubscription) {
                    // –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
                    await new Promise((resolve, reject) => {
                        db.db.run(`
                            INSERT INTO user_channel_subscriptions 
                            (user_id, channel_id, stars_earned, is_verified) 
                            VALUES (?, ?, ?, 1)
                        `, [userId, channel.id, channel.reward_stars], (err) => {
                            if (err) reject(err);
                            else resolve();
                        });
                    });

                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await new Promise((resolve, reject) => {
                        db.db.run(`
                            UPDATE users SET stars = stars + ? WHERE telegram_id = ?
                        `, [channel.reward_stars, userId], (err) => {
                            if (err) reject(err);
                            else resolve();
                        });
                    });

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
                    await new Promise((resolve, reject) => {
                        db.db.run(`
                            UPDATE partner_channels SET current_subscribers = current_subscribers + 1 
                            WHERE id = ?
                        `, [channel.id], (err) => {
                            if (err) reject(err);
                            else resolve();
                        });
                    });

                    newSubscriptions++;
                    totalReward += channel.reward_stars;

                    console.log(`‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ ${channel.channel_name}: ${channel.reward_stars} –∑–≤–µ–∑–¥`);
                }

                results.push({
                    channel: channel.channel_name,
                    username: channel.channel_username,
                    isSubscribed: subscriptionCheck.isSubscribed,
                    rewardGiven: subscriptionCheck.isSubscribed && !existingSubscription,
                    reward: subscriptionCheck.isSubscribed && !existingSubscription ? channel.reward_stars : 0
                });

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ ${channel.channel_username}:`, error);
                results.push({
                    channel: channel.channel_name,
                    username: channel.channel_username,
                    isSubscribed: false,
                    rewardGiven: false,
                    error: error.message
                });
            }
        }

        res.json({
            success: true,
            newSubscriptions,
            totalReward,
            results
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
        res.status(500).json({ error: error.message });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ (–≤–∫–ª—é—á–∞—è –∞–≤–∞—Ç–∞—Ä–∫—É)
app.get('/api/channel-info/:username', async (req, res) => {
    try {
        const { username } = req.params;
        const channelId = username.startsWith('@') ? username : `@${username}`;
        
        const chat = await bot.getChat(channelId);
        
        let photoUrl = null;
        if (chat.photo && chat.photo.big_file_id) {
            try {
                const file = await bot.getFile(chat.photo.big_file_id);
                photoUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
            } catch (photoError) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∫–∞–Ω–∞–ª–∞ ${channelId}:`, photoError.message);
            }
        }

        res.json({
            success: true,
            channel: {
                id: chat.id,
                title: chat.title,
                username: chat.username,
                description: chat.description,
                photo_url: photoUrl,
                member_count: chat.member_count || 0
            }
        });

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ ${username}:`, error);
        res.status(500).json({ error: error.message });
    }
});

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ó–ê–î–ê–ù–ò–ô ===

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ Bot API
async function checkUserChannelSubscription(userId, channelUsername) {
    try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ –∫–∞–Ω–∞–ª @${channelUsername}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const channelId = channelUsername.startsWith('@') ? channelUsername : `@${channelUsername}`;
        
        const chatMember = await bot.getChatMember(channelId, userId);
        console.log(`üìã –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ –∫–∞–Ω–∞–ª–µ ${channelId}:`, chatMember.status);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const isSubscribed = ['creator', 'administrator', 'member'].includes(chatMember.status);
        
        return {
            isSubscribed: isSubscribed,
            status: chatMember.status,
            channelId: channelId
        };
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª @${channelUsername}:`, error.message);
        
        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        if (error.message.includes('Bad Request: chat not found') || 
            error.message.includes('Forbidden')) {
            console.warn(`‚ö†Ô∏è –ö–∞–Ω–∞–ª @${channelUsername} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
            return {
                isSubscribed: false,
                status: 'unknown',
                error: 'channel_unavailable'
            };
        }
        
        return {
            isSubscribed: false,
            status: 'error',
            error: error.message
        };
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async function handleChannelSubscriptionTask(userId, channelId, userData) {
    try {
        console.log(`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, –∫–∞–Ω–∞–ª ${channelId}`);
        
        const user = await db.getUser(userId);
        if (!user) {
            console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î`);
            return { success: false, error: 'User not found' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –∑–∞–¥–∞–Ω–∏—è
        const isBanned = await db.isUserTasksBanned(user.id);
        if (isBanned) {
            console.log(`‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π`);
            return { success: false, error: 'Tasks banned' };
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ-–ø–∞—Ä—Ç–Ω–µ—Ä–µ
        const channels = await db.getActivePartnerChannels();
        const channel = channels.find(c => c.id == channelId);
        
        if (!channel) {
            console.error(`‚ùå –ö–∞–Ω–∞–ª —Å ID ${channelId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`);
            return { success: false, error: 'Channel not found' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ —É–∂–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        const existingSubscription = await db.checkUserSubscription(user.id, channelId);
        if (existingSubscription) {
            console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª ${channel.channel_username}`);
            return { success: false, error: 'Already subscribed' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Bot API
        const subscriptionCheck = await checkUserChannelSubscription(userId, channel.channel_username);
        
        if (!subscriptionCheck.isSubscribed) {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª @${channel.channel_username}`);
            return { 
                success: false, 
                error: 'Not subscribed',
                channelUsername: channel.channel_username
            };
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É (—Å —É—á–µ—Ç–æ–º –≥–æ—Ä—è—á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        let rewardStars = channel.reward_stars;
        if (channel.is_hot_offer) {
            rewardStars = Math.floor(rewardStars * channel.hot_offer_multiplier);
            console.log(`üî• –ì–æ—Ä—è—á–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –ù–∞–≥—Ä–∞–¥–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ ${rewardStars} –∑–≤–µ–∑–¥`);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
        await db.addUserChannelSubscription(user.id, channelId, rewardStars);
        console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, –∫–∞–Ω–∞–ª ${channel.channel_username}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        await db.updatePartnerChannelSubscribers(channelId, 1);
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await db.updateUserStars(userId, rewardStars);
        console.log(`‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–æ ${rewardStars} –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const unlockedAchievements = await db.checkAndUnlockAchievements(user.id);
        let achievementStars = 0;
        
        if (unlockedAchievements.length > 0) {
            achievementStars = unlockedAchievements.reduce((sum, ach) => sum + ach.stars, 0);
            await db.updateUserStars(userId, achievementStars);
            console.log(`üèÜ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ ${achievementStars} –∑–≤–µ–∑–¥:`, unlockedAchievements.map(a => a.key));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (–µ—Å–ª–∏ —ç—Ç–æ 2-—è –ø–æ–¥–ø–∏—Å–∫–∞)
        const userSubscriptions = await db.getUserChannelSubscriptions(user.id);
        if (userSubscriptions.length === 2 && user.referrer_id && !user.is_referrer_verified) {
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            await new Promise((resolve, reject) => {
                db.db.run(
                    'UPDATE users SET is_referrer_verified = 1 WHERE id = ?',
                    [user.id],
                    (err) => err ? reject(err) : resolve()
                );
            });
            
            // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 20 –∑–≤–µ–∑–¥–∞–º–∏
            await db.updateUserStars(user.referrer_id, 20);
            
            console.log(`üë• –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø–æ—Å–ª–µ 2-–π –ø–æ–¥–ø–∏—Å–∫–∏, –≤—ã–¥–∞–Ω–æ 20 –∑–≤–µ–∑–¥`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            try {
                const referrer = await db.getUser(user.referrer_id);
                if (referrer) {
                    await bot.sendMessage(
                        referrer.telegram_id,
                        `üéâ –í–∞—à –¥—Ä—É–≥ –≤—ã–ø–æ–ª–Ω–∏–ª 2 –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è!\n\n+20 –∑–≤–µ–∑–¥ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!\n\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –µ—â–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥! üéÅ`
                    );
                }
            } catch (notifyError) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:', notifyError.message);
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        await db.updateDailyTaskProgress(user.id, 'daily_login', 1); // –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        
        if (channel.is_hot_offer) {
            await db.updateDailyTaskProgress(user.id, 'daily_hot_offer', 1);
        }
        
        console.log(`üéâ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${rewardStars} –∑–≤–µ–∑–¥ + ${achievementStars} –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è`);
        
        return {
            success: true,
            starsEarned: rewardStars,
            achievementStars: achievementStars,
            achievements: unlockedAchievements,
            channelName: channel.channel_name,
            isHotOffer: channel.is_hot_offer
        };
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:`, error);
        return { success: false, error: 'Internal error' };
    }
}

// –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)
async function checkAllUserSubscriptions(userId) {
    try {
        console.log(`üîÑ –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        const user = await db.getUser(userId);
        if (!user) return;
        
        const userSubscriptions = await db.getUserChannelSubscriptions(user.id);
        const violations = [];
        
        for (const subscription of userSubscriptions) {
            const subscriptionAge = Date.now() - new Date(subscription.subscribed_date).getTime();
            const minAge = 72 * 60 * 60 * 1000; // 72 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫–∏ —Å—Ç–∞—Ä—à–µ 72 —á–∞—Å–æ–≤
            if (subscriptionAge >= minAge) {
                const checkResult = await checkUserChannelSubscription(
                    user.telegram_id, 
                    subscription.channel_username
                );
                
                if (!checkResult.isSubscribed) {
                    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ @${subscription.channel_username}`);
                    violations.push({
                        channelId: subscription.channel_id,
                        channelUsername: subscription.channel_username,
                        subscriptionDate: subscription.subscribed_date
                    });
                }
            }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è
        if (violations.length > 0) {
            await handleSubscriptionViolations(user, violations);
        }
        
        return violations.length;
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        return -1;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫
async function handleSubscriptionViolations(user, violations) {
    try {
        console.log(`‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ ${violations.length} –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id}`);
        
        const currentViolationCount = user.violation_count || 0;
        let penaltyHours = 12; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 12 —á–∞—Å–æ–≤ (—É–º–µ–Ω—å—à–µ–Ω–æ)
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à—Ç—Ä–∞—Ñ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ (—É–º–µ–Ω—å—à–µ–Ω–æ)
        if (currentViolationCount === 0) {
            penaltyHours = 12; // 1-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - 12 —á–∞—Å–æ–≤
        } else if (currentViolationCount === 1) {
            penaltyHours = 24; // 2-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - 1 –¥–µ–Ω—å
        } else {
            penaltyHours = 72; // 3+ –Ω–∞—Ä—É—à–µ–Ω–∏–π - 3 –¥–Ω—è
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –ë–î
        for (const violation of violations) {
            await db.addSubscriptionViolation(
                user.id, 
                violation.channelId, 
                'early_unsubscribe', 
                penaltyHours
            );
            
            // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await new Promise((resolve, reject) => {
                db.db.run(
                    'UPDATE user_channel_subscriptions SET is_active = 0, unsubscribed_date = CURRENT_TIMESTAMP WHERE user_id = ? AND channel_id = ?',
                    [user.id, violation.channelId],
                    (err) => err ? reject(err) : resolve()
                );
            });
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–Ω –Ω–∞ –∑–∞–¥–∞–Ω–∏—è
        await db.updateUserTasksBan(user.id, penaltyHours);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const violationsList = violations.map(v => `@${v.channelUsername}`).join(', ');
        let penaltyText = '';
        
        if (penaltyHours === 12) {
            penaltyText = '12 —á–∞—Å–æ–≤';
        } else if (penaltyHours === 24) {
            penaltyText = '1 –¥–µ–Ω—å';
        } else {
            penaltyText = '3 –¥–Ω—è';
        }
        
        try {
            await bot.sendMessage(
                user.telegram_id,
                `‚ö†Ô∏è **–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø–æ–¥–ø–∏—Å–æ–∫**\n\n` +
                `–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–æ–≤: ${violationsList}\n` +
                `–¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (72 —á–∞—Å–∞).\n\n` +
                `**–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ ${penaltyText}**\n\n` +
                `–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥—É—Ç –∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—é —Å—Ä–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n\n` +
                `‚ö° –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –æ–±—Ä–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —à—Ç—Ä–∞—Ñ–æ–≤ –≤ –±—É–¥—É—â–µ–º.`,
                { parse_mode: 'Markdown' }
            );
        } catch (notifyError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏:', notifyError.message);
        }
        
        console.log(`üö´ –ü—Ä–∏–º–µ–Ω–µ–Ω –±–∞–Ω –Ω–∞ ${penaltyHours} —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    }
}

process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    process.exit(1);
});

console.log('üöÄ Kosmetichka Lottery Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

// –ó–∞–ø—É—Å–∫–∞–µ–º polling –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
setTimeout(() => {
    startPolling();
}, 2000); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
